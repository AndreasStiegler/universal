/*!
GPII Canopy Ontology Server Tests

Copyright 2012 OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

// Declare dependencies
/*global require, fluid, jqUnit, gpii, start*/

var fluid = fluid || require("infusion");
var gpii = fluid.registerNamespace("gpii");

(function () {
    "use strict";

    fluid.registerNamespace("gpii.tests.ontologyServer");

    var ontologyServer = fluid.registerNamespace("gpii.ontologyServer");

    var full = {
        simple: {
            a: {
                b: 1,
                c: 2
            }
        },
        medium: {
            a: {
                a1: {
                    a11: 14
                },
                a2: {
                    a21: [ 'a', 'b' ]
                }
            }
        },
        complex: {
            a: 12,
            b: {},
            c: {
                c1: [
                    { hello: "world" }
                ]
            }
        }
    };

    var testFixtures = [
        {
            description: "Very simple non-nested removal of single key",
            full: full.simple,
            remove: {
                a: {
                    b: 3
                }
            },
            expected: {
                a: {
                    c: 2
                }
            }
        }, {
            description: "simple value filtering",
            full: full.medium,
            remove: {
                a: {
                    a1: {
                        a11: 12
                    }
                }
            },
            expected: {
                a: {
                    a2: {
                        a21: [ 'a', 'b' ]
                    }
                }
            }
        }, {
            description: "Higher hierarchy filtering",
            full: full.medium,
            remove: {
                a: 13
            },
            expected: {}
        }, {
            description: "Filtering simple array value",
            full: full.medium,
            remove: {
                a: {
                    a2: {
                        a21: [ 'a' ]
                    }
                }
            },
            expected: {
                a: {
                    a1: {
                        a11: 14
                    }
                }
            }
        }, {
            description: "filtering complementary objects",
            full: full.medium,
            remove: {
                b: 12
            },
            expected: full.medium
        }, {
            description: "removing multiple keys",
            full: full.complex,
            remove: {
                a: 15,
                c: 18
            },
            expected: {
                b: {}
            }
        }, {
            description: "Removing all keys",
            full: full.complex,
            remove: {
                a: {
                    a1: "hello"
                },
                b: "stupid",
                c: "cat"
            },
            expected: {}
        }, {
            description: "empty object passed as 'full' parameter",
            full: {},
            remove: {
                a: 15
            },
            expected: {}
        }, {
            description: "empty object passed as 'remove' parameter",
            full: {
                a: 15
            },
            remove: {},
            expected: {
                a: 15
            }
        }
    ];

    gpii.tests.ontologyServer.runTests = function () {
        jqUnit.module("Utilities");

        jqUnit.test("ontologyServer.filter", function () {
            fluid.each(testFixtures, function (test) {
                var result = gpii.ontologyServer.utils.filterPrefs(test.full, test.remove);
                jqUnit.assertDeepEq(test.description, test.expected, result);
            });
        });
    };
    // var preferences = {
    //     "flat": {
    //         "http://registry.gpii.org/common/magnification": [{value: 2.0}],
    //         "http://registry.gpii.org/common/tracking": [{value: ["mouse"]}],
    //         "http://registry.gpii.org/common/invertImages": [{value: true}],
    //         "http://registry.gpii.org/applications/some.application.id": [{
    //             "value": {
    //                 "some setting": true
    //             }
    //         }],
    //         "http://registry.gpii.org/applications/some.other.application.id": [{
    //             "value": {
    //                 "some setting": true
    //             }
    //         }]
    //     }
    // };

    // var transformations = {
    //     "ISO24751-2/flat": {
    //         "display.screenEnhancement.fontSize": "{http://registry.gpii.org/common/fontSize}.0.value",
    //         "display.screenEnhancement.tracking": "{http://registry.gpii.org/common/tracking}.0.value",
    //         "display.screenEnhancement.invertImages": "{http://registry.gpii.org/common/invertImages}.0.value",
    //         "": {
    //             "transform": {
    //                 "type": "gpii.ontologyServer.transform.application",
    //                 "inputPath": "",
    //                 "outputPath": "applications"
    //             }
    //         }
    //     }
    // };

    // gpii.tests.ontologyServer.runTests = function () {
    //     jqUnit.module("Utilities");

    //     jqUnit.test("ontologyServer.parsePreferences", function () {
    //         var expected = {
    //             "flat": {
    //                 to: "ISO24751-2",
    //                 from: "flat",
    //                 transformation: "ISO24751-2/flat"
    //             }
    //         };
    //         fluid.each(preferences, function (prefSet, type) {
    //             var actualName = ontologyServer.parsePreferences(prefSet);
    //             jqUnit.assertDeepEq("Ontology related information is parsed correctly",
    //                 expected[type], actualName);
    //         });
    //     });

    //     jqUnit.test("ontologyServer.expandTransformations", function () {
    //         var expected = {
    //             "ISO24751-2/flat": {
    //                 "display.screenEnhancement.fontSize": "http://registry\\.gpii\\.org/common/fontSize.0.value",
    //                 "display.screenEnhancement.tracking": "http://registry\\.gpii\\.org/common/tracking.0.value",
    //                 "display.screenEnhancement.invertImages": "http://registry\\.gpii\\.org/common/invertImages.0.value",
    //                 "": {
    //                     "transform": {
    //                         "type": "gpii.ontologyServer.transform.application",
    //                         "inputPath": "",
    //                         "outputPath": "applications"
    //                     }
    //                 }
    //             }
    //         };
    //         fluid.each(expected, function (thisExpected, key) {
    //             jqUnit.assertDeepEq("Ontology transformation rules are expanded correctly.", thisExpected, ontologyServer.expandTransformations(transformations[key]));
    //         });
    //     });

    //     jqUnit.test("test application transformation rule transform", function () {
    //         var transformations = {
    //             "display.screenEnhancement.magnification": "http://registry\\.gpii\\.org/common/magnification.0.value",
    //             "display.screenEnhancement.tracking": "http://registry\\.gpii\\.org/common/tracking.0.value",
    //             "display.screenEnhancement.invertImages": "http://registry\\.gpii\\.org/common/invertImages.0.value",
    //             "": {
    //                 "transform": {
    //                     "type": "gpii.ontologyServer.transform.application",
    //                     "inputPath": "",
    //                     "outputPath": "applications"
    //                 }
    //             }
    //         };
    //         jqUnit.assertDeepEq("Ontology transformation rules are expanded correctly.", {
    //             applications: {
    //                 "some.application.id": {
    //                     "id": "some.application.id",
    //                     "parameters": {
    //                         "some setting": true
    //                     }
    //                 },
    //                 "some.other.application.id": {
    //                     "id": "some.other.application.id",
    //                     "parameters": {
    //                         "some setting": true
    //                     }
    //                 }
    //             },
    //             display: {
    //                 screenEnhancement: {
    //                     magnification: 2.0,
    //                     tracking: ["mouse"],
    //                     invertImages: true
    //                 }
    //             }
    //         }, fluid.model.transformWithRules(preferences["flat"], transformations));
    //     });
    // };

}());