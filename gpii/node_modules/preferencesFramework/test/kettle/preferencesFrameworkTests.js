/**
 * GPII Preferences Framework Tests
 *
 * Copyright 2014 Raising the floor - international
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/kettle/LICENSE.txt
 */

/* global require, __dirname */

var fluid = require("infusion"),
    path = require("path"),
    jqUnit = fluid.require("jqUnit"),
    uuid = require("node-uuid"),
    configPath = path.resolve(__dirname, "./configs"),
    kettle = fluid.registerNamespace("kettle"),
    gpii = fluid.registerNamespace("gpii"),
    fs = require("fs"),
    testDefs = [];

fluid.require("ontologyHandler", require);

fluid.require("kettle/test/utils/js/KettleTestUtils", require);
fluid.registerNamespace("gpii.preferencesFramework.tests");

gpii.preferencesFramework.tests.prefsDir = path.resolve(__dirname, "../../../../testData/preferences/");

gpii.preferencesFramework.tests.filesToDelete = [];

gpii.preferencesFramework.tests.cleanUpTmpFiles = function () {
    var file;
    while (file = gpii.preferencesFramework.tests.filesToDelete.pop()) {
        fs.unlinkSync(file);
    }
};


fluid.defaults("gpii.preferencesFramework.tests.testServerMock", {
    gradeNames: ["fluid.littleComponent", "autoInit"],
    invokers: {
        set: {
            funcName: "gpii.preferencesFramework.tests.testServerMock.set",
            args: [ "{arguments}.0", "{arguments}.1", "{arguments}.2", "{that}.rawPreferencesDataSource"]
        },
        get: {
            funcName: "gpii.preferencesFramework.tests.testServerMock.get",
            args: [ "{arguments}.0", "{arguments}.1", "{arguments}.2", "{that}.rawPreferencesDataSource"]
        }
    },
    components: {
        rawPreferencesDataSource: {
            type: "kettle.dataSource.URL",
            options: {
                gradeNames: ["kettle.dataSource.simpleCallbackWrapper"],
                url: "{gpii.preferencesFramework}.options.urls.rawPreferences",
                termMap: {
                    token: "%token"
                },
                writable: true
            }
        }
    }
});

gpii.preferencesFramework.tests.testServerMock.set = function (model, body, callback, rawPreferencesDataSource) {
    //assert that this function is called with a body:
    jqUnit.assertTrue("Set function of rawPreferencesServer mock is called", true);
    var token = model.token;
    if (token === "" || token === undefined) {
        //if we post, dont worry about writing preferences. Just generate payload and call back
        token = uuid.v4();
        callback({ token: token, preferences: body});
    } else {
        rawPreferencesDataSource.set({token: token}, body, function (data) {
            callback({ token: token, preferences: body});
        });
    }
};

gpii.preferencesFramework.tests.testServerMock.get = function (model, body, callback, rawPreferencesDataSource) {
    rawPreferencesDataSource.get(model, body, callback);
};

/////////////////////// TESTING preferencesFramework GET functionality ////////////////////////////
fluid.registerNamespace("gpii.preferencesFramework.tests.get");

gpii.preferencesFramework.tests.get.testRequestResponse = function (expected) {
    return function (data) {
        var retrievedData = JSON.parse(data);
        console.log(JSON.stringify(retrievedData, null, 4));
        jqUnit.assertDeepEq("Response is correct", expected, retrievedData);
    };
};

gpii.preferencesFramework.tests.get.buildTestDef = function (fixture) {
    return {
        name: fixture.name,
        expect: 1,
        config: {
            nodeEnv: "standardConfig",
            configPath: configPath
        },
        components: {
            getRequest: {
                type: "kettle.tests.request.http",
                options: {
                    requestOptions: {
                        path: "/preferences/"+fixture.url,
                        method: "GET",
                        port: 8081
                    },
                    termMap: {
                        token: fixture.token
                    }
                }
            }
        },
        sequence: [{
            func: "{getRequest}.send"
        }, {
            event: "{getRequest}.events.onComplete",
            listenerMaker: "gpii.preferencesFramework.tests.get.testRequestResponse",
            makerArgs: [ fixture.expected ]
        }]
    };
};

var getFixtures = [
    {
        name: "GET: Basic retrieval of simple NP set in same ontology (no parameter)",
        token: "np_flatonly",
        url: "%token",
        expected: {
            "http://registry.gpii.org/common/onscreenKeyboard": [{ "value": true }],
            "http://registry.gpii.org/common/-provisional-initDelay": [{ "value": 0.120 }],
            "http://registry.gpii.org/common/cursorSpeed": [{ "value": 0.850 }],
            "http://registry.gpii.org/common/cursorAcceleration": [{ "value": 0.800 }],
            "http://registry.gpii.org/common/-provisional-mouseEmulationEnabled": [{ "value": true }],
            "http://registry.gpii.org/common/unknown": [{ "value": true }]
        }
    }, {
        name: "GET: Basic retrieval of simple NP set in same ontology (with parameter)",
        token: "np_flatonly",
        url: "%token?view=flat",
        expected: {
            "http://registry.gpii.org/common/onscreenKeyboard": [{ "value": true }],
            "http://registry.gpii.org/common/-provisional-initDelay": [{ "value": 0.120 }],
            "http://registry.gpii.org/common/cursorSpeed": [{ "value": 0.850 }],
            "http://registry.gpii.org/common/cursorAcceleration": [{ "value": 0.800 }],
            "http://registry.gpii.org/common/-provisional-mouseEmulationEnabled": [{ "value": true }],
            "http://registry.gpii.org/common/unknown": [{ "value": true }]
        }
    }, {
        name: "GET: Retrieval of simple NP set in different ontology plus non-translateable preference",
        token: "np_flatonly",
        url: "%token?view=ISO24751",
        expected: {
            "control": {
                "onscreenKeyboard": true,
                "mouseEmulation": {
                    "cursorSpeed": 0.85,
                    "cursorAcceleration": 0.8,
                    "-provisional-initDelay": 0.12,
                    "-provisional-mouseEmulationEnabled": true
                }
            }
        }
    }, {
        name: "GET: Retrieval of mixed NP set in flat (from ISO24751, flat and bogus ontologies)",
        token: "np_mixed_simple",
        url: "%token?view=flat",
        ontologyDir: path.resolve(__dirname, "../../../../testData/ontologies/"),
        expected: {
            "http://registry.gpii.org/common/onscreenKeyboard": [{ "value": true }],
            "http://registry.gpii.org/common/-provisional-initDelay": [{ "value": 0.120 }],
            "http://registry.gpii.org/common/cursorSpeed": [{ "value": 0.850 }],
            "http://registry.gpii.org/common/cursorAcceleration": [{ "value": 0.800 }],
            "http://registry.gpii.org/common/-provisional-mouseEmulationEnabled": [{ "value": true }],
            "http://registry.gpii.org/common/flatOnly": [{ "value": true }],
            "http://registry.gpii.org/common/fontSize": [{ "value": 24 }]
        }
    }, {
        name: "GET: Retrieval of mixed NP set in ISO24751 - requiring inversing provided ontology",
        token: "np_mixed_simple",
        url: "%token?view=ISO24751",
        ontologyDir: path.resolve(__dirname, "../../../../testData/ontologies/"),
        expected: {
              "control": {
                "onscreenKeyboard": true,
                "mouseEmulation": {
                    "cursorSpeed": 0.85,
                    "cursorAcceleration": 0.8,
                    "-provisional-initDelay": 0.12,
                    "-provisional-mouseEmulationEnabled": true
                }
            },
            "display": {
                "screenEnhancement": {
                    "fontSize": 24
                }
            }
        }
    }
];

fluid.each(getFixtures, function (fixture) {
    testDefs.push(gpii.preferencesFramework.tests.get.buildTestDef(fixture));
});

/////////////////////// TESTING preferencesFramework POST functionality ////////////////////////////
fluid.registerNamespace("gpii.preferencesFramework.tests.post");

gpii.preferencesFramework.tests.post.testRequestResponse = function (prefs) {
    return function (data) {
        var retrievedData = JSON.parse(data);
        //expect preferences without ontology info - any generated token is fine
        var expected = {
            preferences: prefs,
            token: retrievedData.token
        };

        jqUnit.assertDeepEq("Response from ontology server is as expected", expected, retrievedData);
    };
};

gpii.preferencesFramework.tests.post.buildTestDef = function (fixture) {
    return {
        name: fixture.name,
        expect: 2,
        config: {
            nodeEnv: "standardConfig",
            configPath: configPath
        },
        components: {
            postRequest: {
                type: "kettle.tests.request.http",
                options: {
                    requestOptions: {
                        path: "/preferences",
                        method: "POST",
                        port: 8081
                    }
                }
            }
        },
        sequence: [{
            func: "{postRequest}.send",
            args: fixture.postBody
        }, {
            event: "{postRequest}.events.onComplete",
            listenerMaker: "gpii.preferencesFramework.tests.post.testRequestResponse",
            makerArgs: [ fixture.postBody ]
        }]
    };
};

var postFixtures = [
    {
        name: "POST: With no token specified and no ontology specified",
        url: "",
        postBody: {
            "http://registry.gpii.org/common/onscreenKeyboard": [{ "value": true }],
            "http://registry.gpii.org/common/-provisional-initDelay": [{ "value": 0.120 }],
            "http://registry.gpii.org/common/cursorSpeed": [{ "value": 0.850 }],
            "http://registry.gpii.org/common/cursorAcceleration": [{ "value": 0.800 }],
            "http://registry.gpii.org/common/-provisional-mouseEmulationEnabled": [{ "value": true }],
            "http://registry.gpii.org/common/unknown": [{ "value": true }]
        }
    }, {
        name: "POST: With no token specified and and ontology specified",
        url: "?view=flat",
        postBody: {
            "http://registry.gpii.org/common/onscreenKeyboard": [{ "value": true }],
            "http://registry.gpii.org/common/-provisional-initDelay": [{ "value": 0.120 }],
            "http://registry.gpii.org/common/cursorSpeed": [{ "value": 0.850 }],
            "http://registry.gpii.org/common/cursorAcceleration": [{ "value": 0.800 }],
            "http://registry.gpii.org/common/-provisional-mouseEmulationEnabled": [{ "value": true }],
            "http://registry.gpii.org/common/unknown": [{ "value": true }]
        }
    }
];

// fluid.each(postFixtures, function (fixture) {
//     testDefs.push(gpii.preferencesFramework.tests.post.buildTestDef(fixture));
// });




// gpii.preferencesFramework.tests.testPUTResponseMaker = function (prefs, token) {
//     return function (data) {
//         var retrievedData = JSON.parse(data);
//         //expect preferences without ontology info - any generated token is fine
//         var expected = {
//             preferences: prefs,
//             token: token
//         };

//         jqUnit.assertDeepEq("Response from ontology server is as expected", expected, retrievedData);
//     };
// };
// gpii.preferencesFramework.tests.buildPUTTestDef = function (fixture) {
//     return {
//         name: fixture.name,
//         expect: 3,
//         config: {
//             nodeEnv: "standardConfig",
//             configPath: configPath
//         },
//         listeners: {
//             onDestroy: gpii.preferencesFramework.tests.cleanUpTmpFiles
//         },
//         components: {
//             putRequest: {
//                 type: "kettle.tests.request.http",
//                 options: {
//                     requestOptions: { //TODO: change to %token
//                         path: "/preferences/" + fixture.token + (fixture.view ?
//                             "?view="+fixture.view : ""),
//                         method: "PUT",
//                         port: 8081
//                     },
//                     termMap: {
//                         token: fixture.token
//                     }
//                 }
//             }
//         },
//         sequence: [{
//             func: "gpii.preferencesFramework.tests.copyNPSet",
//             args: [ fixture.token, fixture.copyFromToken ]
//         }, {
//             func: "{putRequest}.send",
//             args: fixture.putBody
//         }, {
//             event: "{putRequest}.events.onComplete",
//             listenerMaker: "gpii.preferencesFramework.tests.testPUTResponseMaker",
//             makerArgs: [ fixture.putBody, fixture.token ]
//         }, {
//             func: "gpii.preferencesFramework.tests.checkRawPreferences",
//             args: [ fixture.token, fixture.expectedRaw ]
//         }]
//     };
// };

// gpii.preferencesFramework.tests.copyNPSet = function (toToken, fromToken) {
//     //var resolved = fluid.stringTemplate(that.options.ontologySourceList, { root: that.options.root });
//     var rawPrefs = fs.readFileSync(__dirname+"/data/"+fromToken+".json");
//     fs.writeFileSync(__dirname+"/data/"+toToken+".json", rawPrefs);
//     gpii.preferencesFramework.tests.filesToDelete.push(__dirname+"/data/"+toToken+".json");
// };

// gpii.preferencesFramework.tests.checkRawPreferences = function (token, expectedRaw) {
//     //var resolved = fluid.stringTemplate(that.options.ontologySourceList, { root: that.options.root });
//     var rawPrefs = fs.readFileSync(__dirname+"/data/"+token+".json");
//     rawPrefs = JSON.parse(rawPrefs);
//     jqUnit.assertDeepEq("Raw preferences saved to the NP set are as expected: ", expectedRaw, rawPrefs);
// };

// var putFixtures = [
//     {
//         name: "PUT: Without view specified, and in ontology matching the one of the NP set",
//         token: "put_test1",
//         copyFromToken: "np_flatonly",
//         view: undefined,
//         putBody: {
//             "http://registry.gpii.org/common/onscreenKeyboard": [{ "value": true }]
//         },
//         expectedRaw: {
//             flat: {
//                 "http://registry.gpii.org/common/onscreenKeyboard": [{ "value": true }]
//             }
//         }
//     }, {
//         name: "PUT: Containing preference transformable from existing ontology but saving in different view",
//         token: "put_test2",
//         copyFromToken: "np_tiny",
//         view: "ISO24751",
//         putBody: {
//             control: {
//                 onscreenKeyboard: false
//             }
//         },
//         expectedRaw: {
//             ISO24751: {
//                 control: {
//                     onscreenKeyboard: false
//                 }
//             }
//         }
//     }, {
//         name: "PUT: Overwriting one view and modifying another",
//         token: "put_test3",
//         copyFromToken: "np_mixed",
//         view: "flat",
//         putBody: {
//             "http://registry.gpii.org/common/fontSize": [{ "value": 18 }]
//         },
//         expectedRaw: {
//             "flat": {
//                 "http://registry.gpii.org/common/fontSize": [{ "value": 18 }]
//             },
//             "ISO24751": {
//                 "control": {
//                     "onscreenKeyboard": true
//                 }
//             },
//             "bogus": {
//                 "foo": "bar"
//             }
//         }
//     }
// ];


// fluid.each(putFixtures, function (fixture) {
//     testDefs.push(gpii.preferencesFramework.tests.buildPUTTestDef(fixture));
// });

module.exports = kettle.tests.bootstrap(testDefs);