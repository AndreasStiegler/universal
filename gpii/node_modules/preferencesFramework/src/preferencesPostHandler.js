/*!
GPII Ontology Server POST Handler

Copyright 2014 Raising the floor - International

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

/* global require */
(function () {
    "use strict";

    var fluid = require("infusion"),
        gpii = fluid.registerNamespace("gpii");

    fluid.registerNamespace("gpii.preferencesFramework.post");

    fluid.defaults("kettle.requests.request.handler.preferencesPost", {
        gradeNames: ["autoInit", "fluid.littleComponent"],
        invokers: {
            handle: {
                funcName: "gpii.preferencesFramework.post.request",
                args: [ "{preferencesFramework}", "{request}", "{preferencesFramework}.ontologyHandler", "{that}.events.onRawPreferences"],
                dynamic: true
            },
            postHandler: {
                funcName: "gpii.preferencesFramework.post.postHandler",
                args: [ "{arguments}.0", "{request}", "{requestProxy}" ]
            }
        },
        events: {
            onRawPreferences: null
        },
        listeners: {
            onRawPreferences: "{that}.postHandler"
        }
    });

    gpii.preferencesFramework.post.request = function (preferencesFramework, request, ontologyHandler, event) {
        //key preferences set by ontology
        var toView = gpii.preferencesFramework.getRequestView(request);
        var payload = {};
        payload[toView] = request.req.body;

        preferencesFramework.setRawPreferences(event, payload, undefined);
    };

    gpii.preferencesFramework.post.postHandler = function (reply, request, requestProxy) {
        var ret = {
            token: reply.token,
            preferences: reply.preferences[request.req.query.view ? request.req.query.view : "flat"]
        };
        requestProxy.events.onSuccess.fire(ret);
    };
})();