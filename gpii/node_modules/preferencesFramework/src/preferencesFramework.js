/*!
GPII Ontology Server

Copyright 2012 OCAD University
Copyright 2014 Raising The Floor - International

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

/*global require, __dirname */


(function () {

    "use strict";

    var fluid = require("infusion"),
        path = require("path"),
        gpii = fluid.registerNamespace("gpii"),
        when = fluid.require("when", require),
        $ = fluid.registerNamespace("jQuery"),
        fs = require("fs");

    fluid.require("kettle", require);

    fluid.defaults("gpii.preferencesFramework", {
        gradeNames: ["kettle.app", "autoInit"],
        handlers: {
            preferencesGet: {
                route: "/preferences/:token",
                type: "get"
            },
            preferencesPost: {
                route: "/preferences",
                type: "post"
            },
            preferencesPut: {
                route: "/preferences/:token",
                type: "put"
            }
        },
        invokers: {
            getRawPreferences: {
                funcName: "gpii.preferencesFramework.getRawPreferences",
                args: ["{gpii.preferencesFramework}.rawPreferencesDataSource", "{arguments}.0", "{arguments}.1"]
            },
            setRawPreferences: {
                funcName: "gpii.preferencesFramework.setRawPreferences",
                args: ["{gpii.preferencesFramework}.rawPreferencesDataSource", "{arguments}.0", "{arguments}.1", "{arguments}.2" ]
            }
        },
        root: path.join(__dirname, ".."),
        components: {
            rawPreferencesDataSource: {
                type: "kettle.dataSource.URL",
                options: {
                    gradeNames: ["kettle.dataSource.simpleCallbackWrapper"],
                    url: "{gpii.preferencesFramework}.options.urls.rawPreferences",
                    termMap: {
                        token: "%token"
                    },
                    writable: true
                }
            },
            ontologyHandler: {
                type: "gpii.ontologyHandler"
            }
        },
        distributeOptions: { //TODO: stolen from FlowManager.js:96 - perhaps it should be default in kettle
            source: "{that}.options.urlExpanderGradeNames",
            target: "{that urlExpander}.options.gradeNames"
        },
        urlExpanderGradeNames: ["kettle.urlExpander.development"]
    });

    gpii.preferencesFramework.getRawPreferences = function (rawPreferencesDataSource, event, token) {
        if (token === undefined) {
            fluid.fail("Token for getting preferences is undefined - aborting");
            return;
        }

        rawPreferencesDataSource.get({
            token: token
        }, gpii.preferencesFramework.logAndNotify("Fetched raw user preferences: ", event,
            function getPreferences(data) {
                return data.preferences || data;
        }));
    };

    gpii.preferencesFramework.setRawPreferences = function (rawPreferencesDataSource, event, body, token) {
        //if we were passed a token, that means we want to do an update, else we're creating a new NP set
        rawPreferencesDataSource.options.writeMethod = (token) ? "PUT" : "POST";

        rawPreferencesDataSource.set({token: token || ""}, body, gpii.preferencesFramework.logAndNotify("Saved raw user preferences: ", event,
            function getPreferences(data) {
                return data;
        }));
    };

    //TODO - should be removed or factored - just copied from gpii.request.flowmanager.logAndNotify
    gpii.preferencesFramework.logAndNotify = function (msg, event, callback) {
        return function (data) {
            fluid.log(msg, data);
            event.fire(callback ? callback(data) : data);
        };
    };

    /*
     * Simple function to get the 'view' parameter from the request object. In case none is given,
     * defaults to the "flat" ontology.
     *
     * @request (Object) a request object
     * 
     * @return (String) the value of the 'view' parameter of the request object, or "flat" if
     *     none is given
     */
    gpii.preferencesFramework.getRequestView = function (request) {
        return (request.req.query && request.req.query.view) ? request.req.query.view : "flat";
    }

    // fluid.defaults("gpii.preferencesFramework.ontologyLink", {
    //     gradeNames: ["autoInit", "fluid.littleComponent"],
    //     invokers: {
    //         get: {
    //             funcName: "gpii.preferencesFramework.ontologyLink",
    //             args: [ "{arguments}.0", "{request}", "{requestProxy}" ]
    //         },
    //         set: {
    //             funcName: "gpii.preferencesFramework.ontologyLink",
    //             args: [ "{arguments}.0", "{request}", "{requestProxy}" ]
    //         }
    //     },
    //     invokers: {
    //         getRawPreferences: {
    //             funcName: "gpii.preferencesFramework.getRawPreferences",
    //             args: ["{gpii.preferencesFramework}.rawPreferencesDataSource", "{arguments}.0", "{arguments}.1"]
    //         },
    //         setRawPreferences: {
    //             funcName: "gpii.preferencesFramework.setRawPreferences",
    //             args: ["{gpii.preferencesFramework}.rawPreferencesDataSource", "{arguments}.0", "{arguments}.1", "{arguments}.2" ]
    //         }
    //     },
    //     root: path.join(__dirname, ".."),
    //     components: {
    //         rawPreferencesDataSource: {
    //             type: "kettle.dataSource.URL",
    //             options: {
    //                 gradeNames: ["kettle.dataSource.simpleCallbackWrapper"],
    //                 url: "{gpii.preferencesFramework}.options.urls.rawPreferences",
    //                 termMap: {
    //                     token: "%token"
    //                 },
    //                 writable: true
    //             }
    //         }
    //     },
    //     distributeOptions: { //TODO: stolen from FlowManager.js:96 - perhaps it should be default in kettle
    //         source: "{that}.options.urlExpanderGradeNames",
    //         target: "{that urlExpander}.options.gradeNames"
    //     },
    //     urlExpanderGradeNames: ["kettle.urlExpander.development"]
    // });

    // fluid.defaults("gpii.preferencesFramework.dev", {
    //     gradeNames: ["autoInit", "fluid.littleComponent"],
    //     components: {
    //         ontologyServer: {
    //             type: "gpii.preferencesFramework.ontologyLink"
    //         }
    //     },
    //     distributeOptions: { //TODO: should this block be removed?
    //         source: "{that}.options.urlExpanderGradeNames",
    //         target: "{that urlExpander}.options.gradeNames"
    //     },
    //     urlExpanderGradeNames: ["kettle.urlExpander.development"]
    // });
})();