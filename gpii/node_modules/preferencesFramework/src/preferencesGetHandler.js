/*!
GPII Ontology Server GET Handler

Copyright 2014 Raising the floor - International

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

/* global require */
(function () {
    "use strict";

    var fluid = require("infusion"),
        gpii = fluid.registerNamespace("gpii");

    fluid.registerNamespace("gpii.preferencesFramework.get");

    fluid.defaults("kettle.requests.request.handler.preferencesGet", {
        gradeNames: ["autoInit", "fluid.littleComponent"],
        invokers: {
            handle: {
                funcName: "gpii.preferencesFramework.get.getRawPreferences",
                args: [ "{preferencesFramework}", "{request}", "{that}.events.onRawPreferences"],
                dynamic: true
            },
            buildReturnPayload: {
                funcName: "gpii.preferencesFramework.get.buildReturnPayload",
                args: [ "{arguments}.0", "{preferencesFramework}.ontologyHandler", "{request}", "{requestProxy}" ]
            }
        },
        events: {
            onRawPreferences: null
        },
        listeners: {
            onRawPreferences: "{that}.buildReturnPayload"
        }
    });

    gpii.preferencesFramework.get.getRawPreferences = function (preferencesFramework, request, event) {
        preferencesFramework.getRawPreferences(event, request.req.params.token);
    };

    gpii.preferencesFramework.get.buildReturnPayload = function (rawPrefs, ontologyHandler, request, requestProxy) {
        fluid.log("Raw preferences fetched by preferencesFramework: "+rawPrefs);
        //grab the desired view (ontology) value from parameter (default to "flat") and GET
        var toView = gpii.preferencesFramework.getRequestView(request);
        var prefs = ontologyHandler.rawPrefsToOntology(rawPrefs, toView);
        requestProxy.events.onSuccess.fire(prefs);
    };
})();