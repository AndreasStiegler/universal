/**
 * GPII Flow Manager Update Tests
 *
 * Copyright 2013 OCAD University
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/kettle/LICENSE.txt
 */

/*global require, __dirname*/

var fluid = require("infusion"),
    path = require("path"),
    flowManager = fluid.require("flowManager", require),
    jqUnit = fluid.require("jqUnit"),
    configPath = path.resolve(__dirname, "./configs"),
    kettle = fluid.registerNamespace("kettle"),
    fs = require("fs");

fluid.require("kettle/test/utils/js/KettleTestUtils", require);

kettle.tests.tokenNisha = "nisha";

kettle.tests.tokenNishaPrefs = {
    "http://registry.gpii.org/common/fontSize": [{ value: 14 }]
};

kettle.tests.tokenNishaPrefsUpdated = {
    "http://registry.gpii.org/common/fontSize": [{ value: 16 }]
};

kettle.tests.testLoginResponse = function (data, headers, cookies, signedCookies) {
    jqUnit.assertEquals("Response is correct", "User with token " +
        kettle.tests.tokenNisha + " was successfully logged in.", data);
    jqUnit.assertValue("Cookie is set", headers["set-cookie"]);
    jqUnit.assertTrue("kettle session cookie is set", !!signedCookies["kettle.sid"]);
};

kettle.tests.testLogoutResponse = function (data, headers, cookies) {
    jqUnit.assertEquals("Response is correct", "User with token " +
        kettle.tests.tokenNisha + " was successfully logged out.", data);
    // jqUnit.assertEquals("kettle session cookie is unset", "", cookies["kettle.sid"]);
};

kettle.tests.testInvalidUpdateRequest = function (reason) {
    jqUnit.assertTrue("Authorization failed as expected", true);
};

kettle.tests.testFirstUpdateRequest = function (data) {
    testUpdateRequest(kettle.tests.tokenNishaPrefs, data)
};

kettle.tests.testSecondUpdateRequest = function (data) {
    testUpdateRequest(kettle.tests.tokenNishaPrefsUpdated, data)
};

function testUpdateRequest(expected, data) {
    jqUnit.assertDeepEq("Response is correct", expected, data);
}

var testDefs = [{
    name: "Flow Manager update tests.",
    expect: 7,
    config: {
        nodeEnv: "update",
        configPath: configPath
    },
    components: {
        invalidUpdateRequest: {
            type: "kettle.tests.request.io",
            options: {
                requestOptions: {
                    path: "/update"
                }
            }
        },
        login: {
            type: "kettle.tests.request.http",
            options: {
                requestOptions: {
                    path: "/user/%token/login"
                },
                termMap: {
                    token: kettle.tests.tokenNisha
                }
            }
        },
        logout: {
            type: "kettle.tests.request.http",
            options: {
                requestOptions: {
                    path: "/user/%token/logout"
                },
                termMap: {
                    token: kettle.tests.tokenNisha
                }
            }
        },
        updateRequest: {
            type: "kettle.tests.request.io",
            options: {
                requestOptions: {
                    path: "/update"
                }
            }
        }
    },
    sequence: [{
        func: "{invalidUpdateRequest}.send",
        args: "You shall not pass!!"
    }, {
        event: "{invalidUpdateRequest}.events.onError",
        listener: "kettle.tests.testInvalidUpdateRequest"
    }, {
        func: "{login}.send"
    }, {
        event: "{login}.events.onComplete",
        listener: "kettle.tests.testLoginResponse"
    }, {
        func: "{updateRequest}.send",
        args: kettle.tests.tokenNishaPrefs
    }, {
        event: "{updateRequest}.events.onComplete",
        listener: "kettle.tests.testFirstUpdateRequest"
    }, {
        func: "{updateRequest}.send",
        args: kettle.tests.tokenNishaPrefsUpdated
    }, {
        event: "{updateRequest}.events.onComplete",
        listener: "kettle.tests.testSecondUpdateRequest"
    }, {
        func: "{logout}.send"
    }, {
        event: "{logout}.events.onComplete",
        listener: "kettle.tests.testLogoutResponse"
    }]
}];

module.exports = kettle.tests.bootstrap(testDefs);
