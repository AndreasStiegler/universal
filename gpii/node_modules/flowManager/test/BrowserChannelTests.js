/**
 * GPII Flow Manager Browser Channel Tests
 *
 * Copyright 2013 OCAD University
 * Copyright 2015 Emergya
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/kettle/LICENSE.txt
 */

"use strict";

var fluid = require("infusion"),
    path = require("path"),
    jqUnit = fluid.require("jqUnit"),
    configPath = path.resolve(__dirname, "./configs"),
    kettle = require("kettle"),
    gpii = fluid.registerNamespace("gpii");

fluid.require("ontologyHandler", require);
fluid.require("contextManager", require);
fluid.require("transformer", require);
fluid.require("lifecycleManager", require);
fluid.require("settingsHandlers", require);
fluid.require("matchMakerFramework", require);

kettle.loadTestingSupport();

fluid.registerNamespace("gpii.tests.flowManager.browserChannel");

gpii.tests.flowManager.browserChannel.chromeUserToken = "chrome2";
gpii.tests.flowManager.browserChannel.firefoxUserToken = "firefox";

gpii.tests.flowManager.browserChannel.testLoginResponseChrome = function (data) {
    jqUnit.assertEquals("Response is correct", "User with token " +
        gpii.tests.flowManager.browserChannel.chromeUserToken + " was successfully logged in.", data);
};

gpii.tests.flowManager.browserChannel.testLogoutResponseChrome = function (data) {
    jqUnit.assertEquals("Response is correct", "User with token " +
        gpii.tests.flowManager.browserChannel.chromeUserToken + " was successfully logged out.", data);
};

gpii.tests.flowManager.browserChannel.testLoginResponseFirefox = function (data) {
    jqUnit.assertEquals("Response is correct", "User with token " +
        gpii.tests.flowManager.browserChannel.firefoxUserToken + " was successfully logged in.", data);
};

gpii.tests.flowManager.browserChannel.testLogoutResponseFirefox = function (data) {
    jqUnit.assertEquals("Response is correct", "User with token " +
        gpii.tests.flowManager.browserChannel.firefoxUserToken + " was successfully logged out.", data);
};


gpii.tests.flowManager.browserChannel.checkConnectionRequest = function (data, client) {
    jqUnit.assertEquals("Connection suceeded", "A request to browserChannel has been successfully processed", data);

    // Let's connect to 'onBrowserSettingsChanged' in order to keep track of the changes
    // in the settings during the tests.
    //
    client.socket.on("onBrowserSettingsChanged", client.events.onBrowserSettingsChanged.fire);
};

gpii.tests.flowManager.browserChannel.checkFirstClient = function () {
    jqUnit.assertEquals("'org.chrome.cloud4chrome' is registered as a client",
        "org.chrome.cloud4chrome",
        Object.keys(gpii.settingsHandlers.WebSockets.clients)
    );
};

gpii.tests.flowManager.browserChannel.checkSettingsForChrome = function () {
    jqUnit.assertEquals("The settings for 'org.chrome.cloud4chrome' are the expected",
        JSON.stringify({"screenReaderTTSEnabled":false,"highContrastEnabled":true,"invertColours":false,"magnifierEnabled":true,"magnification":2,"fontSize":"medium","simplifier":false,"highContrastTheme":"white-black"}),
        JSON.stringify(gpii.settingsHandlers.WebSockets.getSettingsForId("org.chrome.cloud4chrome"))
    );
};

gpii.tests.flowManager.browserChannel.checkSettingsForFirefox = function () {
    jqUnit.assertEquals("The settings for 'org.mozilla.cloud4firefox' are the expected",
        JSON.stringify({"screenReaderTTSEnabled":false,"highContrastEnabled":true,"invertColours":false,"magnifierEnabled":true,"magnification":2,"fontSize":"medium","simplifier":false,"highContrastTheme":"black-white"}),
        JSON.stringify(gpii.settingsHandlers.WebSockets.getSettingsForId("org.mozilla.cloud4firefox"))
    );
};


gpii.tests.flowManager.browserChannel.checkNoClients = function () {
    jqUnit.assertEquals("No clients are registered yet", "", Object.keys(gpii.settingsHandlers.WebSockets.clients));
};

gpii.tests.flowManager.browserChannel.checkTwoChromeClients = function () {
    jqUnit.assertEquals("We have two clients",
        2,
        Object.keys(gpii.settingsHandlers.WebSockets.clients["org.chrome.cloud4chrome"]).length
    );
};

gpii.tests.flowManager.browserChannel.checkThreeClients = function () {
    jqUnit.assertEquals("We have two client ids",
        2,
        Object.keys(gpii.settingsHandlers.WebSockets.clients).length
    );

    jqUnit.assertEquals("We have two clients in 'org.chrome.cloud4chrome'",
        2,
        Object.keys(gpii.settingsHandlers.WebSockets.clients["org.chrome.cloud4chrome"]).length
    );

    jqUnit.assertEquals("We have one clients in 'org.mozilla.cloud4firefox'",
        1,
        Object.keys(gpii.settingsHandlers.WebSockets.clients["org.mozilla.cloud4firefox"]).length
    );
};

gpii.tests.flowManager.browserChannel.checkOneChromeOneFirefox = function () {
    jqUnit.assertEquals("We have two client ids",
        2,
        Object.keys(gpii.settingsHandlers.WebSockets.clients).length
    );

    jqUnit.assertEquals("We have one client in 'org.chrome.cloud4chrome'",
        1,
        Object.keys(gpii.settingsHandlers.WebSockets.clients["org.chrome.cloud4chrome"]).length
    );

    jqUnit.assertEquals("We have one client in 'org.mozilla.cloud4firefox'",
        1,
        Object.keys(gpii.settingsHandlers.WebSockets.clients["org.mozilla.cloud4firefox"]).length
    );
};

gpii.tests.flowManager.browserChannel.checkLastClient = function () {
    jqUnit.assertEquals("We have one client id",
        1,
        Object.keys(gpii.settingsHandlers.WebSockets.clients).length
    );

    jqUnit.assertEquals("We have one client in 'org.mozilla.cloud4firefox'",
        1,
        Object.keys(gpii.settingsHandlers.WebSockets.clients["org.mozilla.cloud4firefox"]).length
    );
};

gpii.tests.flowManager.browserChannel.onBrowserSettingsChanged = function (data, solutionId) {
    jqUnit.assertDeepEq("Settings for " + solutionId  + " are as expected",
        gpii.settingsHandlers.WebSockets.getSettingsForId(solutionId),
        data
    );
};

gpii.tests.flowManager.browserChannel.checkRejectedConnection = function (data, solutionId) {
    jqUnit.assertEquals("An untrusted solutionId can't make use of the browserChannel",
        "Rejecting a connection request from '" + solutionId + "'. The solution id was not found in the solutions registry",
        data
    );
};

fluid.defaults("gpii.tests.flowManager.browserChannel.clientHolder", {
    gradeNames: ["kettle.test.request.io", "autoInit"],
    path: "/browserChannel",
    port: "{configuration}.options.port",
    listenOnInit: true,
    solutionId: "",
    events: {
        onBrowserSettingsChanged: null
    },
    listeners: {
        onBrowserSettingsChanged: {
            funcName: "gpii.tests.flowManager.browserChannel.onBrowserSettingsChanged",
            args: ["{arguments}.0", "{that}.options.solutionId"]
        }
    }
});

fluid.defaults("gpii.tests.flowManager.browserChannel.chromeClient", {
    gradeNames: ["gpii.tests.flowManager.browserChannel.clientHolder", "autoInit"],
    solutionId: "org.chrome.cloud4chrome"
});

fluid.defaults("gpii.tests.flowManager.browserChannel.firefoxClient", {
    gradeNames: ["gpii.tests.flowManager.browserChannel.clientHolder", "autoInit"],
    solutionId: "org.mozilla.cloud4firefox"
});

fluid.defaults("gpii.tests.flowManager.browserChannel.unauthorizedClient", {
    gradeNames: ["gpii.tests.flowManager.browserChannel.clientHolder", "autoInit"],
    solutionId: "com.unauthorized.app"
});


var testDefs = [{
    name: "Flow Manager BrowserChannel tests",
    expect: 37,
    config: {
        configName: "browserChannel",
        configPath: configPath
    },
    components: {
        clientOne: {
            type: "gpii.tests.flowManager.browserChannel.chromeClient"
        },
        clientTwo: {
            type: "gpii.tests.flowManager.browserChannel.chromeClient"
        },
        clientThree: {
            type: "gpii.tests.flowManager.browserChannel.firefoxClient"
        },
        clientFour: {
            type: "gpii.tests.flowManager.browserChannel.unauthorizedClient"
        },
        loginChrome: {
            type: "kettle.test.request.http",
            options: {
                requestOptions: {
                    path: "/user/%userToken/login",
                    port: "{configuration}.options.port"
                },
                termMap: {
                    userToken: gpii.tests.flowManager.browserChannel.chromeUserToken
                }
            }
        },
        logoutChrome: {
            type: "kettle.test.request.http",
            options: {
                requestOptions: {
                    path: "/user/%userToken/logout",
                    port: "{configuration}.options.port"
                },
                termMap: {
                    userToken: gpii.tests.flowManager.browserChannel.chromeUserToken
                }
            }
        },
        loginFirefox: {
            type: "kettle.test.request.http",
            options: {
                requestOptions: {
                    path: "/user/%userToken/login",
                    port: "{configuration}.options.port"
                },
                termMap: {
                    userToken: gpii.tests.flowManager.browserChannel.firefoxUserToken
                }
            }
        },
        logoutFirefox: {
            type: "kettle.test.request.http",
            options: {
                requestOptions: {
                    path: "/user/%userToken/logout",
                    port: "{configuration}.options.port"
                },
                termMap: {
                    userToken: gpii.tests.flowManager.browserChannel.firefoxUserToken
                }
            }
        }
    },
    sequence: [{
        func: "gpii.tests.flowManager.browserChannel.checkNoClients"
    }, {
        func: "{clientOne}.send",
        args: "{clientOne}.options.solutionId"
    }, {
        event: "{clientOne}.events.onComplete",
        listener: "gpii.tests.flowManager.browserChannel.checkConnectionRequest",
        args: ["{arguments}.0", "{clientOne}"]
    }, {
        func: "gpii.tests.flowManager.browserChannel.checkFirstClient"
    }, {
        func: "{loginChrome}.send"
    }, {
        event: "{loginChrome}.events.onComplete",
        listener: "gpii.tests.flowManager.browserChannel.testLoginResponseChrome"
    }, {
        func: "gpii.tests.flowManager.browserChannel.checkSettingsForChrome"
    }, {
        func: "{logoutChrome}.send"
    }, {
        event: "{logoutChrome}.events.onComplete",
        listener: "gpii.tests.flowManager.browserChannel.testLogoutResponseChrome"
    }, {
        func: "gpii.tests.flowManager.browserChannel.checkFirstClient"
    }, {
        func: "{clientOne}.disconnect"
    }, {
        func: "{logoutChrome}.send"
    }, {
        event: "{logoutChrome}.events.onComplete",
        listener: "gpii.tests.flowManager.browserChannel.testLogoutResponseChrome"
    }, {
        func: "gpii.tests.flowManager.browserChannel.checkNoClients"
    }, {
        func: "{clientOne}.send",
        args: "{clientOne}.options.solutionId"
    }, {
        event: "{clientOne}.events.onComplete",
        listener: "gpii.tests.flowManager.browserChannel.checkConnectionRequest",
        args: ["{arguments}.0", "{clientOne}"]
    }, {
        func: "{clientTwo}.send",
        args: "{clientTwo}.options.solutionId"
    }, {
        event: "{clientTwo}.events.onComplete",
        listener: "gpii.tests.flowManager.browserChannel.checkConnectionRequest",
        args: ["{arguments}.0", "{clientTwo}"]
    }, {
        func: "gpii.tests.flowManager.browserChannel.checkTwoChromeClients"
    }, {
        func: "{clientThree}.send",
        args: "{clientThree}.options.solutionId"
    }, {
        event: "{clientThree}.events.onComplete",
        listener: "gpii.tests.flowManager.browserChannel.checkConnectionRequest",
        args: ["{arguments}.0", "{clientThree}"]
    }, {
        func: "{clientFour}.send",
        args: "{clientFour}.options.solutionId"
    }, {
        event: "{clientFour}.events.onError",
        listener: "gpii.tests.flowManager.browserChannel.checkRejectedConnection",
        args: ["{arguments}.0" ,"{clientFour}.options.solutionId"]
    }, {
        func: "gpii.tests.flowManager.browserChannel.checkThreeClients"
    }, {
        func: "{clientOne}.disconnect"
    }, {
        func: "{logoutChrome}.send"
    }, {
        event: "{logoutChrome}.events.onComplete",
        listener: "gpii.tests.flowManager.browserChannel.testLogoutResponseChrome"
    }, {
        func: "gpii.tests.flowManager.browserChannel.checkOneChromeOneFirefox"
    }, {
        func: "{loginChrome}.send"
    }, {
        event: "{loginChrome}.events.onComplete",
        listener: "gpii.tests.flowManager.browserChannel.testLoginResponseChrome"
    }, {
        func: "{loginFirefox}.send"
    }, {
        event: "{loginFirefox}.events.onComplete",
        listener: "gpii.tests.flowManager.browserChannel.testLoginResponseFirefox"
    }, {
        func: "gpii.tests.flowManager.browserChannel.checkSettingsForChrome"
    }, {
        func: "gpii.tests.flowManager.browserChannel.checkSettingsForFirefox"
    }, {
        func: "{logoutChrome}.send"
    }, {
        event: "{logoutChrome}.events.onComplete",
        listener: "gpii.tests.flowManager.browserChannel.testLogoutResponseChrome"
    }, {
        func: "{clientTwo}.disconnect"
    }, {
        func: "{logoutFirefox}.send"
    }, {
        event: "{logoutFirefox}.events.onComplete",
        listener: "gpii.tests.flowManager.browserChannel.testLogoutResponseFirefox"
    }, {
        func: "gpii.tests.flowManager.browserChannel.checkLastClient"
    }, {
        func: "{clientThree}.disconnect"
    }, {
        func: "{logoutFirefox}.send"
    }, {
        event: "{logoutFirefox}.events.onComplete",
        listener: "gpii.tests.flowManager.browserChannel.testLogoutResponseFirefox"
    }, {
        func: "gpii.tests.flowManager.browserChannel.checkNoClients"
    }]
}];

module.exports = kettle.test.bootstrapServer(testDefs);
