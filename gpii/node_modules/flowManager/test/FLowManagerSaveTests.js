/**
 * GPII Flow Manager Save Tests
 *
 * Copyright 2013 OCAD University
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/kettle/LICENSE.txt
 */

/*global require, __dirname*/

var fluid = require("infusion"),
    path = require("path"),
    flowManager = fluid.require("flowManager", require),
    jqUnit = fluid.require("jqUnit"),
    configPath = path.resolve(__dirname, "./configs"),
    kettle = fluid.registerNamespace("kettle"),
    fs = require("fs"),
    statTime = new Date();

fluid.require("kettle/test/utils/js/KettleTestUtils", require);

kettle.tests.testToken1 = "testToken1";
kettle.tests.testToken1Set = {
    test: "test"
};

var getSeconds = function (date) {
    return Math.round(date.getTime() / 1000);
};

var cleanUpTmpFiles = function () {
    var dir = path.resolve(__dirname, "../../../../testData/preferences/");
    var files = fs.readdirSync(dir);
    fluid.each(files, function (filePath) {
        filePath = path.resolve(dir, filePath);
        var stats = fs.statSync(filePath);
        if (getSeconds(stats.ctime) >= getSeconds(statTime)) {
            fs.unlinkSync(filePath);
        }
    });
};

kettle.tests.testSaveResponse = function (data) {
    jqUnit.assertDeepEq("Response is correct", kettle.tests.testToken1Set,
        JSON.parse(data));
};

var testDefs = [{
    name: "Flow Manager save tests.",
    expect: 2,
    config: {
        nodeEnv: "save",
        configPath: configPath
    },
    listeners: {
        onDestroy: cleanUpTmpFiles
    },
    components: {
        saveRequest: {
            type: "kettle.tests.request.http",
            options: {
                requestOptions: {
                    path: "/save/%token",
                    method: "POST"

                },
                termMap: {
                    token: kettle.tests.testToken1
                }
            }
        },
        saveRequestNoToken: {
            type: "kettle.tests.request.http",
            options: {
                requestOptions: {
                    path: "/save",
                    method: "POST"
                }
            }
        }
    },
    sequence: [{
        func: "{saveRequest}.send",
        args: kettle.tests.testToken1Set
    }, {
        event: "{saveRequest}.events.onComplete",
        listener: "kettle.tests.testSaveResponse"
    }, {
        func: "{saveRequestNoToken}.send",
        args: kettle.tests.testToken1Set
    }, {
        event: "{saveRequestNoToken}.events.onComplete",
        listener: "kettle.tests.testSaveResponse"
    }]
}];

module.exports = kettle.tests.bootstrap(testDefs);
