/**
 * GPII User Update Handler
 *
 * Copyright 2013 OCAD University
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/gpii/universal/LICENSE.txt
 */

(function () {

    "use strict";

    var fluid = require("infusion"),
        $ = fluid.registerNamespace("jQuery"),
        request = fluid.registerNamespace("gpii.request.flowManager");

    fluid.defaults("kettle.requests.request.handler.userUpdate", {
        gradeNames: ["fluid.littleComponent", "gpii.request.flowManager.token", "autoInit"],
        invokers: {
            handle: {
                funcName: "gpii.request.flowManager.getMatch",
                args: [
                    "{flowManager}.matchMakerDataSource",
                    "{that}.events.onMatch",
                    "{request}.data",
                    "{request}.session.session.device"
                ],
                dynamic: true
            },
            onMatchHandler: {
                funcName: "gpii.request.flowManager.onMatchUpdateHandler",
                args: [
                    "{flowManager}.lifecycleManagerServerDataSource",
                    "{requestProxy}.events.onSuccess",
                    "{that}.userToken",
                    "{arguments}.0",
                    "{request}.data"
                ]
            }
        },
        listeners: {
            onMatch: "{that}.onMatchHandler"
        }
    });

    request.onMatchUpdateHandler = function (lifecycleManagerServerDataSource, event, token, match, preferences) {
        lifecycleManagerServerDataSource.set({
            // TODO: change operation to update. Add support for update in lcm.
            operation: "start",
            token: token
        }, match, request.logAndNotify("Lifecycle manager returned: ", event,
            function () {
                // TODO: send the payload back.
                return preferences;
            }
        ));
    };

})();
