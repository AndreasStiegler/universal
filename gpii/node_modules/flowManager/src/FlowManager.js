(function () {

    "use strict";
   
    var express = require("express"),
        fluid = require("infusion"),
        fs = require("fs"),
        path = require("path"),
        querystring = require("querystring");
        
    
    var gpii = fluid.registerNamespace("gpii");
    fluid.require("./Request.js", require);
    fluid.require("./Middleware.js", require);

    var findArgv = function (key) {
        return fluid.find(process.argv, function (arg) {
            if (arg.indexOf(key + "=") === 0) {
                return arg.substr(key.length + 1);
            }
        });
    };

    fluid.require("gpiiFramework", require);
    fluid.require("matchMaker", require);
    fluid.require("deviceReporter", require);
    fluid.require("configurationManager", require);

    fluid.defaults("gpii.flowManager", {
        gradeNames: ["fluid.eventedComponent", "autoInit"],
        preInitFunction: "gpii.flowManager.preInit",
        finalInitFunction: "gpii.flowManager.finalInit",
        components: {
            requests: {
                type: "gpii.requests"
            },
            bodyParser: {
                type: "gpii.middleware",
                options: {
                    components: {
                        server: "{gpii.flowManager}.server"
                    }
                },
                createOnEvent: "onMiddleware"
            },
            preferencesDataSource: {
                type: "gpii.dataSource",
                options: {
                    url: "{gpii.flowManager}.config.preferences.url",
                    termMap: {
                        token: "%token"
                    }
                }
            },
            deviceReporterDataSource: {
                type: "gpii.dataSource",
                options: {
                    url: "{gpii.flowManager}.config.deviceReporter.url"
                }
            },
            matchMakerDataSource: {
                type: "gpii.dataSource",
                options: {
                    url: "{gpii.flowManager}.config.matchMaker.url",
                    writable: true
                }
            },
            launchManagerDataSource: {
                type: "gpii.dataSource",
                options: {
                    url: "{gpii.flowManager}.config.launchManager.url",
                    writable: true
                }
            }
        },
        events: {
            onMiddleware: null
        }
    });

    gpii.flowManager.preInit = function (that) {
        that.server = express.createServer();
        that.server.configure("production", function () {
            // Set production options.
            fluid.staticEnvironment.production = fluid.typeTag("gpii.production");
            that.config = JSON.parse(fs.readFileSync(path.join(__dirname, "../config.production.json")));
            fluid.setLogging(false);
        });
        that.server.configure("development", function () {
            // Set development options.
            fluid.staticEnvironment.production = fluid.typeTag("gpii.development");
            that.config = JSON.parse(fs.readFileSync(path.join(__dirname, "../config.development.json")));
            fluid.setLogging(true);
        });
    };

    gpii.flowManager.finalInit = function (that) {

        that.server.configure(function () {
            that.server.use(that.requests.create);
        });
        that.events.onMiddleware.fire();

        that.server.get("/user/:token/login", function (req, res) {
            var request = req.fluidRequest;
            request.context = fluid.typeTag("userLogin");
            request.handle();
        });

        that.server.get("/user/:token/logout", function (req, res) {
            var request = req.fluidRequest;
            request.context = fluid.typeTag("userLogout");
            request.handle();
        });

        var port = findArgv("port") || 8081;
        fluid.log("Flow Manager is running on port: " + port);
        that.server.listen(typeof port === "string" ? parseInt(port, 10) : port);
    };

    fluid.demands("gpii.urlExpander", ["gpii.development", "gpii.flowManager"], {
        options: {
            vars: {
                db: path.join(__dirname, ".."),
                root: path.join(__dirname, "..")
            }
        }
    });

    fluid.demands("bodyParser", "gpii.flowManager", {
        funcName: "gpii.middleware.bodyParser"
    });

    fluid.demands("gpii.dataSource", ["gpii.production"], {
        funcName: "gpii.dataSource.URL"
    });
    
    fluid.demands("gpii.dataSource", ["gpii.development"], {
        funcName: "gpii.dataSource.file"
    });
    
    fluid.demands("matchMakerDataSource", ["gpii.flowManager", "gpii.development"], {
        funcName: "gpii.matchMaker"
    });

    fluid.demands("deviceReporterDataSource", ["gpii.flowManager", "gpii.development"], {
        funcName: "gpii.deviceReporter"
    });

    fluid.demands("launchManagerDataSource", ["gpii.flowManager", "gpii.development"], {
        funcName: "gpii.configurationManager"
    });

    gpii.flowManager();

})();