/*
 * GPII User Login Component
 *
 * Copyright 2012 OCAD University
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The research leading to these results has received funding from the European Union's
 * Seventh Framework Programme (FP7/2007-2013)
 * under grant agreement no. 289016.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

(function () {

    "use strict";

    var fluid = require("infusion");
    var gpii = fluid.registerNamespace("gpii");
    fluid.registerNamespace("gpii.request.flowManager.userKeyactions");



    gpii.request.flowManager.userKeyactions.handleResetToken = function (activeToken, that) {
        if (activeToken === undefined) { // if no user is logged in
            that.errorResponse("No users currently logged in - nothing to reset");
        } else {
            fluid.log("Logging out the user with token " + activeToken);
            that.logoutUser(activeToken);
        }
    };

    // keyactivity/<mytoken>:
    // * If no user is logged in, user <mytoken> will be logged in
    // * If <mytoken> is logged in, <mytoken> will be logged out
    // * If another user is logged in, nothing happens

    // If "reset" is used as the <mytoken> for any of the above URLs, any currently logged in user will be logged out
    gpii.request.flowManager.userKeyactions.keyAction = function (userToken, lifecycleManager, that) {
        // find currently logged in user:
        var activeTokens = lifecycleManager.getActiveSessionTokens();
        if (userToken === "reset") {
            gpii.request.flowManager.userKeyactions.handleResetToken(activeTokens[0], that);
            return;
        }
        if (activeTokens.length === 0) { // if no user is logged in
            that.loginUser(userToken);
            return;
        }

        if (activeTokens.length === 1) {
            if (activeTokens[0] === userToken) {
                that.logoutUser(activeTokens[0]);
            } else {
                that.errorResponse("Got keyaction from user " + userToken + ", but the user " +
                    activeTokens[0] + " is already logged in. So ignoring key action.");
            }
        }
    };

    gpii.request.flowManager.userKeyactions.errorResponse = function (request, message, statusCode) {
        request.events.onError.fire({
            statusCode: statusCode || 500,
            message: message || "Unknown error occured on key action"
        });
    };

    gpii.request.flowManager.userKeyactions.startLifecycle = function (lifecycleManager, lifecyclePayload, event) {
        console.log("Got final payload " + JSON.stringify(lifecyclePayload, null, 2));
        lifecycleManager.start(lifecyclePayload,
            gpii.request.flowManager.logAndNotify("Lifecycle manager returned: ", event, function () {
                return "User with token " + lifecyclePayload.userToken + " was successfully logged in.";
            }
        ));
    };

    gpii.request.flowManager.userKeyactions.logoutUser = function (requestProxy, lifecycleManager, userToken) {
        lifecycleManager.stop({
            userToken: userToken
        }, function onSuccess(response) {
            fluid.log("Lifecycle manager returned: ", response);
            requestProxy.events.onSuccess.fire("User with token " + userToken +
                " was successfully logged out.");
        });
    };

    gpii.request.flowManager.userKeyactions.loginUser = function (that, userToken) {
        that.events.onUserToken.fire(userToken);
    };

    gpii.request.flowManager.userKeyactions.getDeviceContext = function (deviceReporterDataSource, event) {
        var promise = deviceReporterDataSource.get();
        promise.then(function (deviceData) {
            if (deviceData.isError) {
                fluid.fail("Error in device reporter data", deviceData.message);
            }
            event.fire(deviceData);
        }, function (err) {
            fluid.fail("Rejected device reporter promise: " + err.message);
        });
    };

    fluid.defaults("gpii.request.flowManager.userKeyactions.userKeyactionHandler", {
        gradeNames: ["fluid.littleComponent", "gpii.request.flowManager.matchMakingRequest", "autoInit"],
        invokers: {
            startLifecycle: {
                funcName: "gpii.request.flowManager.userKeyactions.startLifecycle",
                args: [ "{flowManager}.lifecycleManager", "{arguments}.0", "{requestProxy}.events.onSuccess" ]
                                                    // final payload from matchmaking process
            },
            getDeviceContext: {
                funcName: "gpii.request.flowManager.userKeyactions.getDeviceContext",
                args: ["{flowManager}.deviceReporterDataSource", "{that}.events.onDeviceContext"]
            },
            logoutUser: {
                funcName: "gpii.request.flowManager.userKeyactions.logoutUser",
                args: ["{requestProxy}", "{flowManager}.lifecycleManager", "{arguments}.0"],
                dynamic: true
            },
            loginUser: {
                funcName: "gpii.request.flowManager.userKeyactions.loginUser",
                args: ["{that}", "{arguments}.0"],
                dynamic: true
            },
            errorResponse: {
                funcName: "gpii.request.flowManager.userKeyactions.errorResponse",
                args: ["{request}", "{arguments}.0", "{arguments}.1"]
            }
        },
        listeners: {
            onUserToken: "{that}.getDeviceContext",
            onMatchDone: "{that}.startLifecycle"
        }
    });

    fluid.defaults("kettle.requests.request.handler.userKeyaction", {
        gradeNames: ["fluid.littleComponent", "gpii.request.flowManager.userKeyactions.userKeyactionHandler"],
        invokers: {
            handle: {
                funcName: "gpii.request.flowManager.userKeyactions.keyAction",
                args: ["{request}.req.params.userToken", "{flowManager}.lifecycleManager", "{that}"]
            }
        }
    });

    /**
     * Handler for URL: /user/<mytoken>/login:
     * * If no user is logged in, <mytoken> will be logged in
     * * If another user is logged in, nothing will happen
     * * If token is "reset", log out any already logged in user.
     */
    gpii.request.flowManager.userKeyactions.loginHandler = function (userToken, lifecycleManager, that) {
        console.log("KASPER: Login handler called with: "+userToken);
        var activeTokens = lifecycleManager.getActiveSessionTokens(); // find currently logged in user:

        if (userToken === "reset") {
            gpii.request.flowManager.userKeyactions.handleResetToken(activeTokens[0], that);
            return;
        }

        if (activeTokens.length === 1) { // if another user is already logged in:
            that.errorResponse("Got key in action from user " + userToken + ", but the user " +
                activeTokens[0] + " is already logged in. So ignoring key action.");
            return;
        }

        that.loginUser(userToken);
    };

    fluid.defaults("kettle.requests.request.handler.userLogin", {
        gradeNames: ["fluid.littleComponent", "gpii.request.flowManager.userKeyactions.userKeyactionHandler"],
        invokers: {
            handle: {
                funcName: "gpii.request.flowManager.userKeyactions.loginHandler",
                args: ["{request}.req.params.userToken", "{flowManager}.lifecycleManager", "{that}"]
            }
        }
    });

    /**
     * Handler for the URL /user/<mytoken>/logout:
     * * If no user is logged in, nothing happens
     * * if user mytoken is logged in, he will be used out
     * * If another user is logged in, nothing will happen
     * * If token is "reset", log out any already logged in user.
     */

    gpii.request.flowManager.onUserLogout = function (userToken, lifecycleManager, that) {
                console.log("KASPER: Logout handler called with  "+userToken);
        var activeTokens = lifecycleManager.getActiveSessionTokens(); // find currently logged in user:

        if (userToken === "reset") {
            gpii.request.flowManager.userKeyactions.handleResetToken(activeTokens[0], that);
            return;
        }

        if (activeTokens.length === 0) { // if no user is logged in
            that.errorResponse("No user logged in, so ignoring key action.");
            return;
        }

        if (activeTokens[0] === userToken) {
            that.logoutUser(activeTokens[0]);
        } else {
            that.errorResponse("Got key out action from user " + userToken + ", but the user " +
                activeTokens[0] + " is logged in. So ignoring key action.");
        }
    };

    fluid.defaults("kettle.requests.request.handler.userLogout", {
        gradeNames: ["fluid.littleComponent", "gpii.request.flowManager.userKeyactions.userKeyactionHandler"],
        invokers: {
            handle: {
                funcName: "gpii.request.flowManager.onUserLogout",
                args: ["{request}.req.params.userToken", "{flowManager}.lifecycleManager", "{that}"],
                dynamic: true
            }
        }
    });
})();
