/*!
GPII User Logout Component

Copyright 2012 OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

(function () {

    "use strict";

    var fluid = require("infusion"),
        request = fluid.registerNamespace("gpii.request.flowManager");

    fluid.defaults("kettle.requests.request.handler.userLogout", {
        gradeNames: ["fluid.littleComponent", "autoInit"],
        invokers: {
            handle: {
                funcName: "gpii.request.flowManager.onUserLogout",
                args: ["{requestProxy}", "{request}.req.params.token", "{flowManager}.lifecycleManagerServerDataSource"],
                dynamic: true
            }
        }
    });

    request.onUserLogout = function (requestProxy, token, lifecycleManagerServerDataSource) {
        // TODO: clarify semantics of multiple active start/stop cycles.
        lifecycleManagerServerDataSource.set({
            operation: "stop",
            token: token
        }, {}, function onSuccess(response) {
            fluid.log("Lifecycle manager returned: ", response);
            requestProxy.events.onSuccess.fire("User with token " + token +
                " was successfully logged out.");
        });
    };

    fluid.defaults("kettle.gradeLinkageRecord.userLogoutHandlerSession", {
        gradeNames: ["autoInit", "fluid.gradeLinkageRecord"],
        contextGrades: ["gpii.flowManager.handlerSession",
            "kettle.requests.request.handler.userLogout"],
        resultGrades: ["gpii.flowManager.userLogoutSession"]
    });

    fluid.defaults("gpii.flowManager.userLogoutSession", {
        gradeNames: ["fluid.littleComponent", "autoInit"],
        listeners: {
            "{request}.session.events.afterDestroySession": [
                "{that}.clearCookie",
                "{that}.afterLogout"
            ]
        },
        invokers: {
            clearCookie: {
                funcName: "gpii.request.flowManager.clearCookie",
                args: ["{request}.res", "{sessionManager}.options.key"],
                dynamic: true
            },
            afterLogout: {
                funcName: "gpii.request.flowManager.afterLogout",
                args: ["{requestProxy}", "{request}.req.params.token"],
                dynamic: true
            },
            handle: {
                funcName: "gpii.request.flowManager.onUserLogoutSession",
                args: [
                    "{requestProxy}",
                    "{request}",
                    "{flowManager}.lifecycleManagerServerDataSource"
                ],
                dynamic: true
            }
        }
    });

    request.clearCookie = function (res, key) {
        res.clearCookie(key);
    };

    request.afterLogout = function (requestProxy, token) {
        requestProxy.events.onSuccess.fire("User with token " + token +
            " was successfully logged out.");
    };

    request.onUserLogoutSession = function (requestProxy, request, lifecycleManagerServerDataSource) {
        var token = request.req.params.token;
        var session = request.session;
        if (session.session.token !== token) {
            fluid.log("Token does not match the session token.");
            requestProxy.events.onError.fire("User token does not match the session token");
        } else {
            lifecycleManagerServerDataSource.set({
                operation: "stop",
                token: token
            }, {}, function onSuccess(response) {
                fluid.log("Lifecycle manager returned: ", response);
                session.events.onDestroySession.fire();
            });
        }
    };

})();
