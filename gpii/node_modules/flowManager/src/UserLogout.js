/*
 * GPII User Logout Component
 *
 * Copyright 2012 OCAD University
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The research leading to these results has received funding from the European Union's
 * Seventh Framework Programme (FP7/2007-2013)
 * under grant agreement no. 289016.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

(function () {

    "use strict";

    var fluid = require("infusion"),
        gpii = fluid.registerNamespace("gpii");

    fluid.registerNamespace("gpii.request.flowManager");

    gpii.request.flowManager.notifyLogout = function (status, pcpInterface) {
        pcpInterface.notifyLogout();
        pcpInterface.sendUserMessage(status);
    };

    fluid.defaults("kettle.requests.request.handler.userLogout", {
        gradeNames: ["fluid.littleComponent", "autoInit"],
        invokers: {
            handle: {
                funcName: "gpii.request.flowManager.onUserLogout",
                args: ["{that}", "{requestProxy}", "{request}.req.params.userToken", "{flowManager}.lifecycleManager"],
                dynamic: true
            },
            notifyLogout: {
                funcName: "gpii.request.flowManager.notifyLogout",
                args: ["{arguments}.0", "{flowManager}.pcpInterface"]
            }
        }
    });

    gpii.request.flowManager.onUserLogout = function (that, requestProxy, userToken, lifecycleManager) {
        // TODO: clarify semantics of multiple active start/stop cycles.
        lifecycleManager.stop({
            userToken: userToken
        }, function onSuccess(response) {
            var msg = "User with token " + userToken + " was successfully logged out.";
            fluid.log("Lifecycle manager returned: ", response);
            that.notifyLogout(msg);
            requestProxy.events.onSuccess.fire(msg);
        });
    };

})();
