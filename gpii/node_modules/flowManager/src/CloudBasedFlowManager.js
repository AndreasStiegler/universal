/**
 GPII Cloud-Based FlowManager

 Copyright 2013 OCAD University

 Licensed under the New BSD license. You may not use this file except in
 compliance with this License.

 You may obtain a copy of the License at
 https://github.com/gpii/universal/LICENSE.txt
*/
"use strict";

var fluid = require("infusion");
var gpii = fluid.registerNamespace("gpii");

require("gpii-oauth2");

/** BASE, UNSECURED CLOUD-BASED FLOW MANAGER - 
 * This will be maintained for a while in parallel with the OAuth2-secured API and eventually deprecated
 * This exposes an unsecured HTTP GET API of the form /:userToken/settings/:device
 */

fluid.defaults("gpii.flowManager.cloudBased", {
    gradeNames: ["autoInit", "fluid.littleComponent"],
    components: {
        deviceReporterDataSource: {
            type: "fluid.emptySubcomponent"
        }
    },
    urls: {
        deviceReporter: ""
    },
    handlers: {
        settings: {
            route: "/:userToken/settings/:device",
            type: "get"
        },
        userLogin: null,
        userLogout: null,
        getUserToken: null
    }
});

gpii.request.flowManager.onSettings = function (onError, userToken, handler, deviceString) {
    var device;
    try {
        device = JSON.parse(deviceString);
    } catch (ex) {
        onError.fire({
            isError: true,
            message: "Cloud based flow manager requires device information - failed to parse " + deviceString
        });
        return;
    }
    handler.events.onUserToken.fire(userToken);
    handler.events.onDevice.fire(device);
};

gpii.request.flowManager.processMatch = function (event, match) {
    var settings = {};
    fluid.each(match, function processSolution(solution, solutionId) {
        if (!solution.settingsHandlers) {
            return;
        }
        fluid.each(solution.settingsHandlers, function (settingsHandler) {
                if (!settingsHandler.settings) {
                    return;
                }
                settings[solutionId] = settingsHandler.settings;
            }
        );
    });
    event.fire(settings);
};

// TODO: This component is in an absurd namespace
fluid.defaults("kettle.requests.request.handler.settings", {
    gradeNames: ["fluid.littleComponent", "gpii.request.flowManager.matchMakingRequest", "autoInit"],
    invokers: {
        handle: {
            funcName: "gpii.request.flowManager.onSettings",
            args: ["{requestProxy}.events.onError", "{request}.req.params.userToken", "{that}", "{request}.req.params.device"],
            dynamic: true
        },
        processMatch: {
            funcName: "gpii.request.flowManager.processMatch",
            args: [ "{requestProxy}.events.onSuccess", "{arguments}.0", "{arguments}.1" ]
        },
        runContextManager: {
            funcName: "gpii.request.flowManager.runContextManager",
            args: ["{flowManager}.contextManager", "{arguments}.0", "{arguments}.1", "{that}.events.onReadyForLifecycle" ]
        }
    },
    listeners: {
        onMatch: "{that}.runContextManager",
        onReadyForLifecycle: "{that}.processMatch"
    }
});

/** BEGIN OAUTH2-SECURED CLOUD-BASED FLOW MANAGER */

fluid.defaults("gpii.flowManager.cloudBased.oauth2", {
    gradeNames: ["autoInit", "fluid.littleComponent"],
    components: {
        oauth2DataStore: {
        // TODO: We will not have implemented a signup UI and persistence for a while. For current demonstrations, we will need
        // to seed the implementation here with material similar to that which appears at 
        // gpii-oauth2-datastore/src/DataStoreWithSampleData.js in order to prepopulate the system with a usable collection of 
        // OAuth2 client services and users.
            type: "gpii.oauth2.inMemoryDataStore"
        },
        authServer: {
        // note that this subcomponent directly attaches express routes to our underlying express app via its direct API - 
        // e.g. at the paths /login, /authorize as well as mounting infusion at /infusion and the entire privacy UI at /privacy
            type: "gpii.oauth2.authServer",
            options: {
                components: {
                    dataStore: "{gpii.oauth2.dataStore}"
                },
                members: {
                    expressApp: "{kettle.server}.expressApp"
                },
                events: {
                    onContributeMiddleware: "{kettle.server}.events.onContributeMiddleware",
                    onContributeRouteHandlers: "{kettle.server}.events.onContributeRouteHandlers"
                }
            }
        },
        deviceReporterDataSource: {
            type: "fluid.emptySubcomponent"
        }
    },
    urls: {
        deviceReporter: ""
    },
    handlers: {
        oauth2Settings: {
            route: "/settings",
            type: "get"
        },
        userLogin: null,
        userLogout: null,
        getUserToken: null
    }
});

// TODO: This component is in an absurd namespace
fluid.defaults("kettle.requests.request.handler.oauth2Settings", {
    gradeNames: ["fluid.littleComponent", "kettle.requests.request.handler.settings", "autoInit"],
    invokers: {
        handle: {
            funcName: "gpii.request.flowManager.onOauth2Settings",
            args: ["{request}", "{that}", "{gpii.oauth2.dataStore}"],
            dynamic: true
        }
    }
});

gpii.oauth2.sendUnauthorized = function (request) {
    request.events.onError.fire({
            isError: true,
            message: "Unauthorized",
            statusCode: 401 // TODO: this is currently uninterpreted (see KETTLE-26)
        });
};

gpii.flowManager.cloudBased.solutionToDevice = function (solutionId) {
    return {
        OS: {
            id: "web"
        },
        solutions: [ {
            id: solutionId
        }]
    };
};

gpii.request.flowManager.onOauth2Settings = function (request, handler, dataStore) {
    var accessToken = gpii.oauth2.parseBearerAuthorizationHeader(request.req);
    if (!accessToken) {
        gpii.oauth2.sendUnauthorized(request);
    } else {
        var auth = dataStore.findAuthByAccessToken(accessToken);
        if (!auth) {
            gpii.oauth2.sendUnauthorized(request);
        } else {
            handler.events.onUserToken.fire(auth.userGpiiToken);
            handler.events.onDevice.fire(gpii.flowManager.cloudBased.solutionToDevice(auth.oauth2ClientId));
        }
    }
};
