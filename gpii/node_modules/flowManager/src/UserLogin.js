/*!
GPII User Login Component

Copyright 2012 OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

(function () {

    "use strict";

    var fluid = require("infusion"),
        kettle = fluid.require("kettle", require);

    kettle.requests.request.handler.userLogin = function (token, handler) {
        handler.userToken = token;
        handler.events.onUserListener.fire(token);
    };

    kettle.requests.request.handler.userLogin.cloudBased = function (token, handler, device) {
        if (!device) {
            handler.requestProxy.events.onError.fire({
                isError: true,
                message: "Cloud based flow manager requires device information."
            });
        }
        handler.device = device;
        kettle.requests.request.handler.userLogin(token, handler);
    };

    var logAndNotify = function (msg, event, callback) {
        return function (data) {
            fluid.log(msg, data);
            event.fire(callback ? callback(data) : data);
        };
    };

    kettle.requests.request.handler.userLogin.getPreferences = function (preferencesDataSource, event, token) {
        preferencesDataSource.get({
            token: token
        }, logAndNotify("Fetched user preferences: ", event));
    };

    kettle.requests.request.handler.userLogin.getDevice = function (deviceReporterDataSource, event) {
        deviceReporterDataSource.get(null, logAndNotify(
            "Fetched device reporter data: ", event));
    };

    kettle.requests.request.handler.userLogin.onReadyToMatchHandler = function (matchMakerDataSource, event, preferences, device) {
        matchMakerDataSource.set(null, {
            preferences: preferences,
            device: device
        }, logAndNotify("Matched preferences and device reporter data: ",
            event));
    };

    kettle.requests.request.handler.userLogin.onMatchHandler = function (lifecycleManagerServerDataSource, event, token, match) {
        lifecycleManagerServerDataSource.set({
            operation: "start",
            token: token
        }, match, logAndNotify("Lifecycle manager returned: ", event,
            function () {
                return "User with token " + token +
                    " was successfully logged in.";
            }
        ));
    };

    kettle.requests.request.handler.userLogin.onMatchHandler.cloudBased = function (event, match) {
        logAndNotify("Flow manager matched the following solutions: ", event)(match);
    };

    fluid.defaults("kettle.requests.request.handler.userLoginHandler", {
        gradeNames: ["fluid.eventedComponent", "autoInit"],
        invokers: {
            getPreferences: {
                funcName: "kettle.requests.request.handler.userLogin.getPreferences",
                args: ["{flowManager}.preferencesDataSource", "{that}.events.onPreferences", "{that}.userToken"]
            },
            onReadyToMatchHandler: {
                funcName: "kettle.requests.request.handler.userLogin.onReadyToMatchHandler",
                args: ["{flowManager}.matchMakerDataSource", "{that}.events.onMatch", "{arguments}.0", "{arguments}.1"]
            },
            onMatchHandler: {
                funcName: "kettle.requests.request.handler.userLogin.onMatchHandler",
                args: ["{flowManager}.lifecycleManagerServerDataSource", "{requestProxy}.events.onSuccess", "{that}.userToken", "{arguments}.0"]
            }
        },
        components: {
            "requestProxy": "{requestProxy}"
        },
        events: {
            onUserListener: null,
            onPreferences: null,
            onReadyToMatch: null,
            onMatch: null
        },
        listeners: {
            onUserListener: "{that}.getPreferences",
            onReadyToMatch: "{that}.onReadyToMatchHandler",
            onMatch: "{that}.onMatchHandler"
        }
    });

    fluid.defaults("kettle.requests.request.handler.userLoginHandler.cloudBased", {
        gradeNames: ["kettle.requests.request.handler.userLoginHandler", "autoInit"],
        invokers: {
            onMatchHandler: {
                funcName: "kettle.requests.request.handler.userLogin.onMatchHandler.cloudBased",
                args: ["{requestProxy}.events.onSuccess", "{arguments}.0"]
            }
        },
        listeners: {
            onPreferences: {
                listener: "{that}.events.onReadyToMatch.fire",
                args: [
                    "{arguments}.0",
                    "{that}.device"
                ]
            }
        }
    });

    fluid.defaults("kettle.requests.request.handler.userLoginHandler.local", {
        gradeNames: ["kettle.requests.request.handler.userLoginHandler", "autoInit"],
        invokers: {
            getDevice: {
                funcName: "kettle.requests.request.handler.userLogin.getDevice",
                args: ["{flowManager}.deviceReporterDataSource", "{that}.events.onDevice"]
            }
        },
        events: {
            onDevice: null,
            onReadyToMatch: {
                events: {
                   preferences: "onPreferences",
                   device: "onDevice"
                },
                args: ["{arguments}.preferences.0", "{arguments}.device.0"]
            }
        },
        listeners: {
            "onUserListener.local": "{that}.getDevice"
        }
    });

})();
