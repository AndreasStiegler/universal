/*
 * GPII User Login Component
 *
 * Copyright 2012 OCAD University
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The research leading to these results has received funding from the European Union's
 * Seventh Framework Programme (FP7/2007-2013)
 * under grant agreement no. 289016.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

(function () {

    "use strict";

    var fluid = require("infusion");
    var gpii = fluid.registerNamespace("gpii");
    fluid.registerNamespace("gpii.request.flowManager");

    gpii.request.flowManager.onUserLogin = function (token, handler) {
        handler.userToken = token;
        handler.events.onUserListener.fire(token);
    };

    gpii.request.flowManager.onMatchHandler = function (lifecycleManager, event, request, match) {
        lifecycleManager.start({
            userToken: request.userToken,
            device: request.userDevice,
            preferences: request.userPreferences
        }, match, gpii.request.flowManager.logAndNotify("Lifecycle manager returned: ", event,
            function () {
                return "User with token " + request.userToken + " was successfully logged in.";
            }
        ));
    };

    fluid.defaults("kettle.requests.request.handler.userLogin", {
        gradeNames: ["fluid.littleComponent", "gpii.request.flowManager.token", "autoInit"],
        invokers: {
            onMatchHandler: {
                funcName: "gpii.request.flowManager.onMatchHandler",
                args: ["{gpii.lifecycleManager}", "{requestProxy}.events.onSuccess", "{that}", "{arguments}.0"]
            },
            getDevice: {
                funcName: "gpii.request.flowManager.getDevice",
                args: ["{flowManager}.deviceReporterDataSource", "{that}.events.onDevice"]
            },
            handle: {
                funcName: "gpii.request.flowManager.onUserLogin",
                args: ["{request}.req.params.token", "{that}"],
                dynamic: true
            }
        },
        events: {
            onDevice: null,
            onReadyToMatch: { // TODO: This is confusingly named wrt the event in MatchPost.js
                events: {
                   preferences: "onPreferences",
                   device: "onDevice"
                },
                args: ["{arguments}.preferences.0", "{arguments}.device.0"]
            }
        },
        listeners: {
            onUserListener: "{that}.getDevice",
            onMatch: "{that}.onMatchHandler",
            onReadyToMatch: {
                funcName: "gpii.request.flowManager.recordMatch",
                args: ["{that}", "{arguments}.0", "{arguments}.1"]
            }
        }
    });

    gpii.request.flowManager.recordMatch = function (request, preferences, device) {
        // Store this information to be forwarded to the session
        request.userPreferences = preferences;
        request.userDevice = device;
    };

})();
