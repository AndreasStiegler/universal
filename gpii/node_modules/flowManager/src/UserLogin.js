/*!
GPII User Login Component

Copyright 2012 OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

(function () {

    "use strict";

    var fluid = require("infusion");
    var gpii = fluid.registerNamespace("gpii");
    fluid.registerNamespace("gpii.request.flowManager");

    gpii.request.flowManager.onUserLogin = function (token, handler) {
        handler.userToken = token;
        handler.events.onToken.fire(token);
    };

    gpii.request.flowManager.sendToLifecycle = function (lifecycleManager, request, lifecyclePayload, event) {
        console.log("gpii.request.flowManager.sendToLifecycle: "+JSON.stringify(lifecyclePayload, null, 4));
        lifecycleManager.start({
            userToken: request.handler.userToken
        }, lifecyclePayload, gpii.request.flowManager.logAndNotify("Lifecycle manager returned: ", event,
            function () {
                return "User with token " + request.handler.userToken + " was successfully logged in.";
            }
        ));
    };

    fluid.defaults("kettle.requests.request.handler.userLogin", {
        gradeNames: ["fluid.littleComponent", "gpii.request.flowManager.token", "autoInit"],
        invokers: {
            onMatchHandler: { //NOT USED?!
                funcName: "gpii.request.flowManager.onMatchHandler",
                args: ["{gpii.lifecycleManager}", "{requestProxy}.events.onSuccess", "{that}", "{arguments}.0"]
            },
            sendToLifecycle: {
                funcName: "gpii.request.flowManager.sendToLifecycle",
                args: [ "{flowManager}.lifecycleManager", "{request}", "{arguments}.0", "{requestProxy}.events.onSuccess" ]
            },
            getDevice: {
                funcName: "gpii.request.flowManager.getDevice",
                args: ["{flowManager}.deviceReporterDataSource", "{that}.events.onDevice"]
            },
            handle: {
                funcName: "gpii.request.flowManager.onUserLogin",
                args: ["{request}.req.params.token", "{that}"],
                dynamic: true
            },
            runContextManager: {
                funcName: "gpii.request.flowManager.runContextManager",
                args: ["{flowManager}.contextManager", "{arguments}.0", "{arguments}.1", "{that}.events.onReadyForLifecycle" ]
            }
        },
        listeners: {
            onToken: "{that}.getDevice",
            onMatch: "{that}.runContextManager",
            // "{gpii.matchMakerFramework}.events.onReadyForLifecycleManager": "{that}.sendToLifecycle",
            onReadyToMatch: {
                funcName: "gpii.request.flowManager.recordMatch",
                args: ["{that}", "{arguments}.0", "{arguments}.1", "{arguments}.2"]
            },
            onReadyForLifecycle: "{that}.sendToLifecycle"
        }
    });

    gpii.request.flowManager.runContextManager = function (contextManager, matchData, fullMMData, event) {
        console.log("gpii.request.flowManager.runContextManager");
        contextManager.evaluateMatch(matchData, fullMMData, event);
        return;
    };

    gpii.request.flowManager.recordMatch = function (request, preferences, device, solutionsRegistry) {
        // Store this information to be forwarded to the session
        request.userPreferences = preferences;
        request.userDevice = device;
        request.solutionsRegistry = solutionsRegistry;
    };
})();
