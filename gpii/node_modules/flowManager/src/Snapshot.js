/**
 * GPII snapshot Handler
 *
 * Copyright 2014 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/gpii/universal/LICENSE.txt
 */

 /*global require*/

(function () {

    "use strict";

    var fluid = require("infusion"),
        fs = require("fs");
    var snapshotter = fluid.registerNamespace("gpii.request.flowManager.snapshotter");

    fluid.defaults("kettle.requests.request.handler.snapshot", {
        gradeNames: ["fluid.littleComponent", "autoInit"],
        invokers: {
            handle: {
                funcName: "gpii.request.flowManager.getDevice",
                args: ["{flowManager}.deviceReporterDataSource", "{that}.events.onDevice"]
            },
            getSolutions: {
                funcName: "gpii.request.flowManager.snapshotter.getSolutions",
                // funcName: "gpii.request.matchMaker.getSolutions",
                args: ["{gpii.matchMaker}", "{that}.events.onSolutions", "{arguments}.0", "{requestProxy}" ]
            }
        },
        events: {
             onDevice: null,
             onSolutions: null
        },
        listeners: {
            onDevice: "{that}.getSolutions",
            onSolutions: "{gpii.lifecycleManager}.snapshot"
        }
    });

    snapshotter.getSolutions = function (matchMaker, event, device, rptmp) {
        var os = fluid.get(device, "OS.id"),
            version = fluid.get(device, "OS.version");
        var fullPath = matchMaker.options.solutionsReporterUrl;
        fullPath = fullPath.indexOf("file://") === 0 ? fullPath.substring(7) : fullPath;

        fullPath = fluid.stringTemplate(fullPath, {
            os: os,
            version: version,
            root: matchMaker.options.root
        });

        fs.readFile(fullPath, 'utf8', function (err, solutions) {
            if (err) {
                fluid.fail("FUCK OFF");
            }
            solutions = JSON.parse(solutions);
            solutions = matchMaker.prefilterSolutions(solutions, device);
            event.fire(solutions, rptmp);
        });
//         var fs = require('fs');

// var path = "C:\\tmp\\testfile.txt";
// fs.readFile(path, 'utf8', function (err, data) {
//   if (err) throw err;
//   console.log(data);
// })s;


    };
})();
