/**
 * GPII snapshot Handler
 *
 * Copyright 2014 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/gpii/universal/LICENSE.txt
 */

 /*global require*/

//OVERALL TODOS:
// Describe flow of this in comment
// Factor anything that needs factoring
// Write tests for this function (incl. acceptance tests?)
// write tests for .get calls with null for each settingshandler?
(function () {

    "use strict";

    var fluid = require("infusion")
    var gpii = fluid.registerNamespace("gpii");
    fluid.registerNamespace("gpii.request.flowManager.snapshotter");

    fluid.defaults("kettle.requests.request.handler.snapshot", {
        gradeNames: ["fluid.littleComponent", "autoInit"],
        invokers: {
            handle: {
                funcName: "gpii.request.flowManager.getDevice",
                args: ["{flowManager}.deviceReporterDataSource", "{that}.events.onDevice"]
            },
            getSolutions: {
                funcName: "gpii.request.flowManager.snapshotter.getSolutions",
                args: ["{gpii.matchMaker}.solutionsReporter", "{that}.events.onSolutions", "{arguments}.0", "{gpii.matchMaker}"]
            },
            executeSnapshot: {
                funcName: "gpii.request.flowManager.snapshotter.executeSnapshot",
                args: ["{gpii.lifecycleManager}.snapshot", "{requestProxy}", "{arguments}.0", "{arguments}.1"]
            }
        },
        events: {
             onDevice: null,
             onSolutions: null
        },
        listeners: {
            onDevice: "{that}.getSolutions",
            onSolutions: "{that}.executeSnapshot"
        }
    });

    //TODO: Factor out along with snapshotters get solutions function
    //TODO: Remove duplicate call to prefilterSolutions
    gpii.request.flowManager.snapshotter.getSolutions = function (solutionsReporterDataSource, event, model, matchMaker) {
        var device = model,
            os = fluid.get(device, "OS.id"),
            version = fluid.get(device, "OS.version");
        solutionsReporterDataSource.get({
            os: os,
            version: version
        }, function (solutions) {
            matchMaker.prefilterSolutions(solutions, os, version);
            solutions = matchMaker.prefilterSolutions(solutions, device);
            event.fire(solutions, model);
        });
    };

    gpii.request.flowManager.snapshotter.executeSnapshot = function (snapshotter, that, solutions, device) {
        snapshotter(that, solutions, device);
        //TODO:
        //filter out solutions based on installed solutions
        //add snapshot function to the lifecycle manager
        //in that function
            //for each solution
                //for each settingsHandler
                    //call get function with 'null'
        //return result
        // console.log("SO FAR SO GOD");
        // that.events.onSuccess.fire(JSON.stringify(device));
    };

})();
