(function () {

    "use strict";

    var fluid = require("infusion"),
        uuid = require("node-uuid"),
        gpii = fluid.registerNamespace("gpii");

    fluid.defaults("gpii.requests", {
        gradeNames: ["autoInit", "fluid.eventedComponent"],
        components: {
            instantiator: "{instantiator}"
        },
        events: {
            registerMiddleware: null
        },
        listeners: {
            registerMiddleware: "{gpii.requests}.onRegisterMiddleware"
        },
        preInitFunction: "gpii.requests.preInit",
        finalInitFunction: "gpii.requests.finalInit",
        middleware: {}
    });

    gpii.requests.preInit = function (that) {
        that.onRegisterMiddleware = function (middlewareObject) {
            var eventName = middlewareObject.resolveEventName();
            that.options.middleware[eventName] = middlewareObject;
        };

        that.registerMiddleware = function () {
            return fluid.transform(that.options.middleware, function (middlewareObject) {
                return middlewareObject.handle;
            });
        };

        that.registerEvents = function () {
            return fluid.transform(that.options.middleware, function () {
                return null;
            });
        };
    };

    gpii.requests.finalInit = function (that) {
        // This function will create a lifecycle object that will serve as a context
        // for a current request/response sequence.
        that.create = function (req, res, next) {
            var name = uuid.v4(),
                instantiator = that.instantiator;
            that.options.components[name] = {
                type: "gpii.requests.request",
                options: {
                    req: req,
                    res: res,
                    next: next,
                    events: that.registerEvents(),
                    listeners: that.registerMiddleware()
                }
            };
            function clear (name) {
                if (!that[name]) {
                    return;
                }
                instantiator.clearComponent(that, name);
            }
            fluid.initDependent(that, name, instantiator);
            // NOTE: This is here because any of these events can represent the moment
            // when the server is finished with the response.
            fluid.each(["close", "finish", "end", "error"], function (event) {
                res.on(event, function () {
                    clear(name);
                });
            });

            // Adding a request object to express's req.
            req.fluidRequest = that[name];
            next();
        };
    };

    fluid.defaults("gpii.requests.request", {
        gradeNames: ["autoInit", "fluid.eventedComponent"],
        nickName: "request",
        mergePolicy: {
            req: "noexpand",
            res: "noexpand",
            next: "noexpand"
        },
        components: {
            instantiator: "{instantiator}"
        },
        preInitFunction: "gpii.requests.request.preInit"
    });

    gpii.requests.request.preInit = function (that) {
        that.nickName = "request";
        fluid.each(["req", "res", "next"], function (obj) {
            that[obj] = that.options[obj];
        });

        that.handle = function () {
            that.options.components = that.options.components || {};
            that.options.components.handler = {
                type: "gpii.requests.request.handler"
            };
            fluid.initDependent(that, "handler", that.instantiator);
            that.handler.handle();
        };
    };

    fluid.defaults("gpii.requests.request.handler", {
        gradeNames: ["autoInit", "fluid.littleComponent"],
        invokers: {
            handle: {
                funcName: "gpii.requests.request.handler.handle",
                args: ["{request}", "{gpii.requests.request.handler}"]
            }
        }
    });

    fluid.demands("gpii.requests.request.handler", "userLogin", {
        options: {
            preInitFunction: "gpii.requests.request.handler.userLoginPreInit",
            invokers: {
                handle: {
                    funcName: "gpii.requests.request.handler.userLoginHandle"
                }
            },
            components: {
                request: "{request}",
                preferencesDataSource: "{preferencesDataSource}",
                deviceReporterDataSource: "{deviceReporterDataSource}",
                matchMakerDataSource: "{matchMakerDataSource}",
                launchManagerDataSource: "{launchManagerDataSource}"
            },
            events: {
                onUserListener: null,
                onPreferences: null,
                onDevice: null,
                onReadyToMatch: {
                    events: {
                       preferences: "onPreferences",
                       device: "onDevice"
                    },
                    args: ["{arguments}.preferences.0", "{arguments}.device.0"]
                },
                onMatch: null
            },
            listeners: {
                onUserListener: [{
                    listener: "{gpii.requests.request.handler}.getPreferences"
                }, {
                    listener: "{gpii.requests.request.handler}.getDevice"
                }],
                onReadyToMatch: "{gpii.requests.request.handler}.onReadyToMatchHandler",
                onMatch: "{gpii.requests.request.handler}.onMatchHandler"
            }
        }
    });

    gpii.requests.request.handler.userLoginPreInit = function (that) {
        that.getPreferences = function (token) {
            that.preferencesDataSource.get({
                token: token
            }, function (preferences) {
                if (preferences && preferences.isError) {
                    return that.request.res.send(preferences, 500);
                }
                fluid.log("Fetched user preferences: ", preferences);
                that.events.onPreferences.fire(preferences);
            });
        };
        that.getDevice = function () {
            that.deviceReporterDataSource.get(undefined, function (device) {
                if (device && device.isError) {
                    return that.request.res.send(device, 500);
                }
                fluid.log("Fetched device reporter data: ", device);
                that.events.onDevice.fire(device);
            });
        };
        that.onReadyToMatchHandler = function (preferences, device) {
            that.matchMakerDataSource.set(undefined, {
                preferences: preferences,
                device: device
            }, function (match) {
                if (match && match.isError) {
                    return that.request.res.send(match, 500);
                }
                fluid.log("Matched preferences and device reporter data: ", match);
                that.events.onMatch.fire(match);
            });
        };
        that.onMatchHandler = function (match) {
            that.launchManagerDataSource.set(undefined, match, function (response) {
                if (response && response.isError) {
                    return that.request.res.send(response, 500);
                }
                fluid.log("Launch manager returned: ", response);
                that.request.res.send("User was successfully logged in.", 200);
            });
        };
    };

    gpii.requests.request.handler.userLoginHandle = function (request, handler) {
        var req = request.req,
            token = req.params.token;
        handler.events.onUserListener.fire(token);
    };

    fluid.demands("gpii.requests.request.handler", "userLogout", {
        options: {
            invokers: {
                handle: {
                    funcName: "gpii.requests.request.handler.userLogoutHandle",
                    args: ["{request}", "{launchManagerDataSource}"]
                }
            }
        }
    });

    gpii.requests.request.handler.userLogoutHandle = function (request, launchManagerDataSource) {
        var res = request.res;
        launchManagerDataSource.del(undefined, function (response) {
            if (response && response.isError) {
                return res.send(response, 500);
            }
            fluid.log("Launch manager returned: ", response);
            res.send("User with token " + request.req.params.token + " was successfully logged out.", 200);
        });
    };

})();