(function () {

    "use strict";

    var fluid = require("infusion"),
        uuid = require("node-uuid"),
        gpii = fluid.registerNamespace("gpii");

    fluid.defaults("gpii.requests", {
        gradeNames: ["autoInit", "fluid.littleComponent"],
        components: {
            instantiator: "{instantiator}"
        },
        finalInitFunction: "gpii.requests.finalInit"
    });

    gpii.requests.finalInit = function (that) {
        // This function will create a lifecycle object that will serve as a context
        // for a current request/response sequence.
        that.create = function (req, res, next) {
            var name = uuid.v4(),
                instantiator = that.instantiator;
            that.options.components[name] = {
                type: "gpii.requests.context",
                options: {
                    req: req,
                    res: res,
                    next: next
                }
            };
            function clear (name) {
                if (!that[name]) {
                    return;
                }
                instantiator.clearComponent(that, name);
            }
            fluid.initDependent(that, name, instantiator);
            // NOTE: This is here because any of these events can represent the moment
            // when the server is finished with the response.
            fluid.each(["close", "finish", "end", "error"], function (event) {
                res.on(event, function () {
                    clear(name);
                });
            });

            // Adding a request object to express's req.
            req._request = that[name].request;
            next();
        };
    };

    fluid.defaults("gpii.requests.context", {
        gradeNames: ["autoInit", "fluid.littleComponent"],
        preInitFunction: "gpii.requests.context.preInit",
        components: {
            request: {
                type: "gpii.requests.request",
                options: {
                    req: "{gpii.requests.context}.options.req",
                    res: "{gpii.requests.context}.options.res",
                    next: "{gpii.requests.context}.options.next"
                }
            }
        },
        mergePolicy: {
            req: "noexpand",
            res: "noexpand",
            next: "noexpand"
        }
    });

    gpii.requests.context.preInit = function (that) {
        that.context = fluid.typeTag(that.options.context);
    };

    fluid.defaults("gpii.requests.request", {
        gradeNames: ["autoInit", "fluid.eventedComponent"],
        mergePolicy: {
            req: "preserve",
            res: "preserve",
            next: "preserve"
        },
        events: {
            onBodyParser: "{gpii.flowManager}.events.onBodyParser"
        },
        preInitFunction: "gpii.requests.request.preInit"
    });

    gpii.requests.request.preInit = function (that) {
        fluid.each(["req", "res", "next"], function (obj) {
            that[obj] = that.options[obj];
        });
    };

})();