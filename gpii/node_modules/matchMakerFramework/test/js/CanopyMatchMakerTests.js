/*!
GPII Canopy MatchMaker Tests

Copyright 2012 OCAD University
Copyright 2012 Raising The Floor - International

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

// Declare dependencies
/*global jqUnit */

var fluid = fluid || require("infusion");
var gpii = fluid.registerNamespace("gpii");

(function () {
    "use strict";

    fluid.registerNamespace("gpii.tests.canopyMatchMaker");

    var transformSpec = {
        "http://registry\\.gpii\\.net/common/fontSize": "display.screenEnhancement.fontSize",
        "http://registry\\.gpii\\.net/common/foregroundColor": "display.screenEnhancement.foregroundColor",
        "http://registry\\.gpii\\.net/common/backgroundColor": "display.screenEnhancement.backgroundColor",
        "http://registry\\.gpii\\.net/common/fontFaceFontName": "display.screenEnhancement.fontFaceFontName",
        "http://registry\\.gpii\\.net/common/fontFaceGenericFontFace": "display.screenEnhancement.fontFaceGenericFontFace",
        "http://registry\\.gpii\\.net/common/magnifierEnabled": "display.screenEnhancement.-provisional-magnifierEnabled",
        "http://registry\\.gpii\\.net/common/magnification": "display.screenEnhancement.magnification",
        "http://registry\\.gpii\\.net/common/magnifierPosition": "display.screenEnhancement.-provisional-magnifierPosition",
        "http://registry\\.gpii\\.net/common/tracking": "display.screenEnhancement.tracking",
        "http://registry\\.gpii\\.net/common/trackingTTS": "display.screenEnhancement.trackingTTS",
        "http://registry\\.gpii\\.net/common/invertImages": "display.screenEnhancement.invertImages",
        "http://registry\\.gpii\\.net/common/invertColours": "display.screenEnhancement.-provisional-invertColours",
        "http://registry\\.gpii\\.net/common/cursorSize": "display.screenEnhancement.cursorSize",
        "http://registry\\.gpii\\.net/common/highContrastEnabled": "display.screenEnhancement.-provisional-highContrastEnabled",
        "http://registry\\.gpii\\.net/common/highContrastTheme": "display.screenEnhancement.-provisional-highContrastTheme",
        "http://registry\\.gpii\\.net/common/mouseTrailing": "display.screenEnhancement.mouseTrailing",
        "http://registry\\.gpii\\.net/common/screenReaderBrailleOutput": "display.screenReader.-provisional-screenReaderBrailleOutput",
        "http://registry\\.gpii\\.net/common/auditoryOutLanguage": "display.screenReader.-provisional-auditoryOutLanguage",
        "http://registry\\.gpii\\.net/common/speechRate": "display.screenReader.speechRate",
        "http://registry\\.gpii\\.net/common/speakTutorialMessages": "display.screenReader.-provisional-speakTutorialMessages",
        "http://registry\\.gpii\\.net/common/keyEcho": "display.screenReader.-provisional-keyEcho",
        "http://registry\\.gpii\\.net/common/wordEcho": "display.screenReader.-provisional-wordEcho",
        "http://registry\\.gpii\\.net/common/announceCapitals": "display.screenReader.-provisional-announceCapitals",
        "http://registry\\.gpii\\.net/common/punctuationVerbosity": "display.screenReader.-provisional-punctuationVerbosity",
        "http://registry\\.gpii\\.net/common/screenReaderTTSEnabled": "display.screenReader.-provisional-screenReaderTTSEnabled",
        "http://registry\\.gpii\\.net/common/pitch": "display.textReadingHighlight.pitch",
        "http://registry\\.gpii\\.net/common/readingUnit": "display.textReadingHighlight.readingUnit",
        "http://registry\\.gpii\\.net/common/volumeTTS": "display.textReadingHighlight.-provisional-volumeTTS",
        "http://registry\\.gpii\\.net/common/selfVoicingEnabled": "display.textReadingHighlight.-provisional-selfVoicingEnabled",
        "http://registry\\.gpii\\.net/common/brailleMode": "display.braille.-provisional-brailleMode",
        "http://registry\\.gpii\\.net/common/screenOffTime": "display.-provisional-screenOffTime",
        "http://registry\\.gpii\\.net/common/screenRotation": "display.-provisional-screenRotation",
        "http://registry\\.gpii\\.net/common/screenDefaultRotation": "display.-provisional-screenDefaultRotation",
        "http://registry\\.gpii\\.net/common/screenDim": "display.-provisional-screenDim",
        "http://registry\\.gpii\\.net/common/onscreenKeyboard": "control.onscreenKeyboard",
        "http://registry\\.gpii\\.net/common/initDelay": "control.mouseEmulation.-provisional-initDelay",
        "http://registry\\.gpii\\.net/common/cursorSpeed": "control.mouseEmulation.cursorSpeed",
        "http://registry\\.gpii\\.net/common/cursorAcceleration": "control.mouseEmulation.cursorAcceleration",
        "http://registry\\.gpii\\.net/common/mouseEmulationEnabled": "control.mouseEmulation.-provisional-mouseEmulationEnabled",
        "http://registry\\.gpii\\.net/common/stickyKeys": "control.keyboardEnhancement.stickyKeys",
        "http://registry\\.gpii\\.net/common/slowKeysInterval": "control.keyboardEnhancement.slowKeys.slowKeysInterval",
        "http://registry\\.gpii\\.net/common/slowKeysEnable": "control.keyboardEnhancement.slowKeys.-provisional-slowKeysEnable",
        "http://registry\\.gpii\\.net/common/debounceEnable": "control.keyboardEnhancement.debounceKeys.-provisional-debounceEnable",
        "http://registry\\.gpii\\.net/common/debounceInterval": "control.keyboardEnhancement.debounceKeys.debounceInterval",
        "http://registry\\.gpii\\.net/common/hapticFeedback": "control.-provisional-hapticFeedback",
        "http://registry\\.gpii\\.net/common/adaptationPreference": "content.adaptationPreference",
        "http://registry\\.gpii\\.net/common/tableOfContents": "control.structuralNavigation.tableOfContents",
        "http://registry\\.gpii\\.net/common/volume": "-provisional-general.-provisional-volume",
        "http://registry\\.gpii\\.net/common/language": "language",
        "": {
            "transform": {
                "type": "gpii.ontologyHandler.transforms.applicationISOToFlat",
                "inputPath": "applications",
                "outputPath": ""
            }
        }
    };

    var magnifier = {"settingsHandlers": [{
        "type": "gpii.integrationTesting.mockSettingsHandler",
        "capabilities": ["display.screenEnhancement"],
        "capabilitiesTransformations": {
            "mag-factor": "display.screenEnhancement.magnification",
            "show-cross-hairs": "display.screenEnhancement.-provisional-showCrosshairs",
            "mouse-tracking": {
                "transform": {
                    "type": "fluid.transforms.valueMapper",
                    "inputPath": "display.screenEnhancement.tracking",
                    "options": {
                        "mouse": {
                            "outputValue": "centered"
                        }
                    }
                }
            }
        }
    }]
    };

    var lesserMagnifier = {"settingsHandlers": [{
        "type": "gpii.integrationTesting.mockSettingsHandler",
        "capabilitiesTransformations": {
            "mag-factor": "display.screenEnhancement.magnification"
        }
    }, {
        "type": "gpii.integrationTesting.mockSettingsHandler",
        "capabilities": "display.screenEnhancement.magnification"
    }]
    };

    var magnifierLeaves = [
        "display.screenEnhancement.magnification",
        "display.screenEnhancement.-provisional-showCrosshairs",
        "display.screenEnhancement.tracking",
        "display.screenEnhancement"
    ];

    var magnifierSkeleton = {
        display: {
            screenEnhancement: {
                magnification: {},
                "-provisional-showCrosshairs": {},
                tracking: {}
            }
        }
    };

    var escapedLeaves = [
        "display.screenReader.applications.nvda\\.screenReader"
    ];

    var escapedSkeleton = {
        display: {
            screenReader: {
                applications: {
                    "nvda.screenReader": {}
                }
            }
        }
    };

    var sammyProfile = {
        "display": {
            "screenEnhancement": {
                "fontSize": 24,
                "foregroundColor": "white",
                "backgroundColor": "black",
                "fontFace": {
                    "fontName": ["Comic Sans"],
                    "genericFontFace": "sans serif"
                },
                "magnification": 2.0,
                "tracking": ["mouse"],
                "invertImages": true,
                "-provisional-showCrosshairs": true
            }
        }
    };

    var sammyLeaves = [
        "display.screenEnhancement.-provisional-showCrosshairs",
        "display.screenEnhancement.backgroundColor",
        "display.screenEnhancement.fontFace.fontName.0",
        "display.screenEnhancement.fontFace.genericFontFace",
        "display.screenEnhancement.fontSize",
        "display.screenEnhancement.foregroundColor",
        "display.screenEnhancement.invertImages",
        "display.screenEnhancement.magnification",
        "display.screenEnhancement.tracking.0"
    ];

    var expandFitness = function (fitnesses) {
        return fluid.transform(fitnesses, function(fit, index) {
            return {
                fitness: fit,
                index: index
            };
        });
    };

    var extractIndices = function (solns) {
        return fluid.transform(solns, function (soln) {
            return soln.index;
        });
    };

    var canopy = gpii.matchMaker.canopy;

    gpii.tests.canopyMatchMaker.runTests = function () {
        jqUnit.module("Utilities");

        jqUnit.test("Path Utilities", function() {
            jqUnit.assertEquals("Exact depth", 0, gpii.matchMakerFramework.utils.prefixLength("display.screenEnhancement.fontSize", sammyProfile));
            jqUnit.assertEquals("Near depth", 0, gpii.matchMakerFramework.utils.prefixLength("display.screenEnhancement.fontSize", sammyProfile));
            jqUnit.assertEquals("Mid depth", -1, gpii.matchMakerFramework.utils.prefixLength("display.unrecognizable", sammyProfile));
            jqUnit.assertEquals("Far depth", -2, gpii.matchMakerFramework.utils.prefixLength("display.unrecognizable.thing", sammyProfile));
            var skeleton = gpii.matchMakerFramework.utils.pathsToSkeleton(magnifierLeaves);
            jqUnit.assertDeepEq("Computed model skeleton", magnifierSkeleton, skeleton);

            var skeleton2 = gpii.matchMakerFramework.utils.pathsToSkeleton(escapedLeaves);
            jqUnit.assertDeepEq("Computed model escaped skeleton", escapedSkeleton, skeleton2);
        });

        jqUnit.test("Fitness computation", function() {
            var fitness = canopy.computeFitness(sammyLeaves, magnifierSkeleton);
            var expected = [0, 0, -1, -1, -1, -1, -1, -2, -3];
            jqUnit.assertDeepEq("Computed fitness vector", expected, fitness);

            var fitnesses = [
                [-1, -3, 0],
                [0, 0, 0],
                [0, 0],
                [0, 0, 0, 0],
                [-1, -3, -1]
            ];
            var solns = canopy.sortSolutions(expandFitness(fitnesses));
            var indices = extractIndices(solns);
            var expected2 = [3, 1, 2, 0, 4];
            jqUnit.assertDeepEq("Ranked fitnesses", expected2, indices);
        });

        var disposePayload = {
            hierarchicalPrefs: {
                contexts: {
                    "gpii-default": sammyProfile
                }
            },
            // solutionsRegistry: {
            //     id1: lesserMagnifier,
            //     id2: magnifier
            // },
            // solutionsRegistry: [
            //     lesserMagnifier,
            //     magnifier
            // ]
        }
        jqUnit.module("MatchMaker");
        jqUnit.test("Rank and dispose solutions", function() {
            var solutions = [lesserMagnifier, magnifier];
            var expanded = gpii.matchMakerFramework.utils.expandSolutions(solutions, { "*": "*" });
            var ranked = canopy.rankSolutions(sammyLeaves, expanded);
            var indices = extractIndices(ranked);
            var expected = [1, 0];
            jqUnit.assertDeepEq("Ranked solutions", expected, indices);

            var disposed = gpii.matchMakerFramework.utils.disposeSolutions(disposePayload, gpii.matchMaker.canopy.disposeStrategy, transformSpec);
            var itions = gpii.matchMakerFramework.utils.extractDispositions(disposed);
            var expected = ["reject", "accept"];
            jqUnit.assertDeepEq("Disposed solutions", expected, itions);
            // gpii.matchMakerFramework.utils.disposeSolutions(disposePayload, gpii.matchMaker.canopy.disposeStrategy, transformSpec).then(function (disposed) {
            //     var itions = gpii.matchMaker.extractDispositions(disposed);
            //     var expected = ["reject", "accept"];
            //     jqUnit.assertDeepEq("Disposed solutions", expected, itions);
            // });
        });

    };

}());