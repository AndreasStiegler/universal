/**
/*
* Flat Match Maker
*
* Copyright 2014 Raising the Floor - International
*
* Licensed under the New BSD license. You may not use this file except in
* compliance with this License.
*
* The research leading to these results has received funding from the European Union's
* Seventh Framework Programme (FP7/2007-2013)
* under grant agreement no. 289016.
*
* You may obtain a copy of the License at
* https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

/*global require, __dirname, module*/

var fluid = require("infusion"),
    path = require("path"),
    jqUnit = fluid.require("jqUnit"),
    configPath = path.resolve(__dirname, "./configs"),
    kettle = fluid.registerNamespace("kettle"),
    gpii = fluid.registerNamespace("gpii"),
    fs = require("fs");

fluid.require("flatMatchMaker", require);
fluid.require("kettle/test/utils/js/KettleTestUtils", require);


fluid.registerNamespace("gpii.flatMatchMaker.test");

gpii.flatMatchMaker.test.solutionsRegistry = require("../../../testData/win32.json")

var testDefs = [];

gpii.flatMatchMaker.test.APITestFixtures = [
    {
        name: "User with common terms only and multiple matching applications",
        input: {
            preferences: {
                "contexts": {
                    "gpii-default": {
                        "name": "Default preferences",
                        "preferences": {
                            "http://registry.gpii.net/common/fontSize": 15,
                            "http://registry.gpii.net/common/speechRate": 15
                        }
                    },

                    "nighttime-at-home": {
                        "name": "Nighttime at home",

                        "preferences": {
                            "http://registry.gpii.net/common/fontSize": 18
                        },

                        "metadata": [
                           {
                                "type": "required",
                                "scope": ["http://registry.gpii.net/common/fontSize"],
                                "value": 100
                            }
                        ],

                        "conditions": [
                            {
                                "type": "http://gpii.net/common/operators/inRange",
                                "max": 1800,
                                "min": 600,
                                "inputPath": "http://registry.gpii.net/conditions/timeOfDay"
                            }
                        ]
                    }
                }
            },
            deviceReporter: {
                "OS": {
                    "id": "win32",
                    "version": "5.0.0"
                },
                "solutions": [
                    {
                        "id": "com.microsoft.windows.onscreenKeyboard"
                    }, {
                        "id": "com.microsoft.windows.desktop"
                    }, {
                        "id": "org.nvda-project"
                    }, {
                        "id": "com.freedomScientific.jaws"
                    }
                ]
            },
            environmentReporter: {
                "http://registry.gpii.net/terms/environment/timeOfDay": "18:29:00",
            },
            solutionsRegistry: {
                //stuff from: https://github.com/GPII/universal/blob/master/testData/solutions/win32.json
            },
            activeContexts: [
                "gpii-default",
                "nighttime-at-home"
            ],
            inverseCapabilities: { //inferred from application settings
                "com.microsoft.windows.cursors": {
                    "http://registry.gpii.net/common/mouseTrailing": 0.8,
                    (...)
                    "http://registry.gpii.net/common/cursorSize": 0.60
                },
                (...),
                "org.nvda-project": {
                    (...)
                }
            },
            rematch: { //out of scope for review - it would be useful to allow a MM specific block in the MM output,
            //which can then be sent back in the rematch section to make the MM more informed
                // [ ?
                userFeedback: {
                    dislike: true
                },
                previousOutput: {
                    // vast document previously output by matchmaker in this session
                }
                // ]?
            }
        },
        output: {

        }

    // },
    // {
    //     name: "common and app"
    // },
    // {
    //     name: "no matches"
    }

];

gpii.flatMatchMaker.test.disposeStrategyFixtures = {

};

// gpii.rawPreferencesServer.test.post.assertNewNPResponse = function (data) {
//     data = JSON.parse(data);
//     jqUnit.assertTrue("Structure of returned payload should contain token and preferences",
//         data.preferences !== undefined && data.token !== undefined);
//     //saved prefs set should contain the preferences
//     var fsPrefs = fs.readFileSync(__dirname+"/data/"+data.token+".json");
//     jqUnit.assertDeepEq("Expecting preferences to be those posted response",
//          data.preferences, JSON.parse(fsPrefs));

//     //clean up the created NP set
//     fs.unlinkSync(__dirname + "/data/" + data.token + ".json");
// };

// gpii.rawPreferencesServer.test.post.buildTestDef = function (fixture) {
//     return {
//         name: fixture.name,
//         expect: 2,
//         config: {
//             nodeEnv: "testSetup",
//             configPath: configPath
//         },
//         components: {
//             postRequest: {
//                 type: "kettle.tests.request.http",
//                 options: {
//                     requestOptions: {
//                         path: "/rawPreferences",
//                         method: "POST",
//                         port: 8078
//                     }
//                 }
//             }
//         },
//         sequence: [{
//             func: "{postRequest}.send",
//             args: fixture.postBody
//         }, {
//             event: "{postRequest}.events.onComplete",
//             listener: "gpii.rawPreferencesServer.test.post.assertNewNPResponse"
//         }]
//     };
// };

// gpii.rawPreferencesServer.test.post.fixtures = [
//     {
//         name: "POST: With no token specified",
//         postBody: {
//             "flat": {
//                 "contexts": {
//                     "gpii-default": {
//                         "name": "Default preferences",
//                         "preferences": {
//                             "http://registry.gpii.net/common/onscreenKeyboard": [{ "value": true }],
//                             "http://registry.gpii.net/common/-provisional-initDelay": [{ "value": 0.120 }],
//                             "http://registry.gpii.net/common/cursorSpeed": [{ "value": 0.850 }],
//                             "http://registry.gpii.net/common/cursorAcceleration": [{ "value": 0.800 }],
//                             "http://registry.gpii.net/common/-provisional-mouseEmulationEnabled": [{ "value": true }],
//                             "http://registry.gpii.net/common/unknown": [{ "value": true }]
//                         }
//                     }
//                 },
//                 "metadata": []
//             }
//         }
//     }
// ];

// fluid.each(gpii.rawPreferencesServer.test.post.fixtures, function (fixture) {
//     testDefs.push(gpii.rawPreferencesServer.test.post.buildTestDef(fixture));
// });

module.exports = kettle.tests.bootstrap(testDefs);
