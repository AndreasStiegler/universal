/*!
GPII Matchmaker Utilities

Copyright 2012 OCAD University
Copyright 2012 Antranig Basman

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

var fluid = fluid || require("infusion"),
     when = when || require("when");

(function () {

    "use strict";

    var matchMaker = fluid.registerNamespace("gpii.matchMaker");

    matchMaker.computeLeavesFromOneSolution = function (solution) {
        var leaves = [];
        leaves = leaves.concat(fluid.makeArray(solution.capabilities));
        var inputPaths = fluid.model.transform.collectInputPaths(solution.capabilitiesTransformations || {});
        leaves = leaves.concat(inputPaths);
        return leaves;
    };

    matchMaker.computeLeavesFromSolution = function (solution) {
        var leaves = [];
        leaves = leaves.concat.apply(leaves, fluid.transform(solution.settingsHandlers,
            function(settingsHandler) {
                return matchMaker.computeLeavesFromOneSolution(settingsHandler);
            }));
        return leaves;
    };

    function computeLeavesImpl (model, path, paths) {
        fluid.each(model, function (value, key) {
            var newPath = fluid.pathUtil.composePath(path, key.toString());
            if (fluid.isPrimitive(value)) {
                paths.push(newPath);
            }
            else {
                computeLeavesImpl(value, newPath, paths);
            }
        });
    }

    matchMaker.computeLeaves = function (model) {
        var paths = [];
        computeLeavesImpl(model, "", paths);
        return paths;
    };

    /** Returns a non-positive number indicating by how many path segments the supplied
     * path fails to index correctly into the supplied model. A return value of 0
     * indicates that the path indexes fully */
     //only used by canopy MM
    matchMaker.prefixLength = function (path, model) {
        var segs = fluid.pathUtil.parseEL(path);
        for (var i = 0; i < segs.length; ++ i) {
            var seg = segs[i];
            model = model[seg];
            if (model === undefined) {
                return i - segs.length;
            }
        }
        return 0;
    };

    //only used by canopyMatchMaker
    matchMaker.extractDispositions = function (solrecs) {
        var togo = [];
        fluid.each(solrecs, function(soln) {
            togo[soln.index] = soln.disposition;
        });
        return togo;
    };



    // TODO: UNUSED FUNCTION
    // matchMaker.makeComparator = function (leaves) {
    //     return function (solnA, solnB) {
    //         var domA = false, domB = false;
    //         for (var i = 0; i < leaves.length; ++ i) {
    //             var leaf = leaves[i];
    //             var goodA = matchMaker.prefixLength(leaf, solnA.solution);
    //             var goodB = matchMaker.prefixLength(leaf, solnB.solution);
    //             if (goodA > goodB) {
    //                 domA = true;
    //             }
    //             else if (goodB > goodA) {
    //                 domB = true;
    //             }
    //         }
    //         return domA ^ domB? (domA? 1 : -1) : 0;
    //     };
    // };

    matchMaker.pathsToSkeleton = function (paths) {
        var togo = {};
        for (var i = 0; i < paths.length; ++ i) {
            var path = paths[i];
            var existing = fluid.get(togo, path, fluid.model.escapedGetConfig);
            if (!existing) {
                fluid.set(togo, path, {}, fluid.model.escapedSetConfig);
            }
        }
        return togo;
    };

    matchMaker.sortDescending = function (numA, numB) {
        return numB - numA;
    };

    matchMaker.expandSolutions = function (solutions) {
        return fluid.transform(solutions, function (solution, index) {
            var paths = matchMaker.computeLeavesFromSolution(solution);
            var skeleton = matchMaker.pathsToSkeleton(paths);
            return {
                solution: solution,
                skeleton: skeleton,
                index: index
            };
        });
    };

    matchMaker.ontologizePreferences = function (ontologyHandler, prefs, fromView, toView) {
        return ontologyHandler.prefsToOntology(prefs, fromView, toView);
    };

    //expecting a hierarchical prefs set to be present in the payload, containing hierarchical prefs
    //returns object keyed by contexts and where the values are arrays of solutions to launch in that context
    matchMaker.disposeSolutions2 = function (data, strategy) {
        var solrecs = matchMaker.expandSolutions(data.solutionsRegistry);
        var togo = {};
        //calculate match for each of the contexts
        fluid.each(data.hierarchicalPrefs.contexts, function (context, contextId) {
            var leaves = matchMaker.computeLeaves(context.preferences);
            var disposed = strategy(leaves, solrecs);
            togo[contextId] = [];
            fluid.each(disposed, function(solrec, solid) {
                if (solrec.disposition === "accept") {
                    togo[contextId].push(solid);
                }
            });
        });
        return togo;
    };

    //disposed: object with keys of context-ids. Each value should be an array listing the disposed
    //solutions
    //fullModel: input to MM
    matchMaker.buildReturnPayload = function (fullModel, disposed) {
        var togo = {
            inferredConfiguration: {}
        };
        console.log("BRP" + JSON.stringify(disposed, null, 4));

        fluid.each(disposed, function (solArray, contextId) {
            togo.inferredConfiguration[contextId] = {
                applications: {}
            };
            var appBlock = togo.inferredConfiguration[contextId].applications;
            fluid.each(solArray, function (solutionId) {
                var content = {
                    active: true,
                    //stick all the common terms and relevant app specific settings in there
                    //so they'll be applied to this application:
                    settings: fullModel.preferences.contexts[contextId].preferences
                };
                appBlock[solutionId] = content;
                //TODO: add metadata sections
            });

            //add conditions if they exist:
            if (fullModel.preferences.contexts[contextId].conditions) {
                togo.inferredConfiguration[contextId].conditions = fullModel.preferences.contexts[contextId].conditions;
            }
        });
        return togo;
    };
 })();