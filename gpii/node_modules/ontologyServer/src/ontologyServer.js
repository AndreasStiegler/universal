/*!
GPII Ontology Server

Copyright 2012 OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

(function () {

    "use strict";

    var fluid = require("infusion"),
        path = require("path"),
        gpii = fluid.registerNamespace("gpii");

    fluid.require("gpiiFramework", require);
    fluid.require("./ontologyPreferencesGet.js", require);
    
    fluid.defaults("gpii.ontologyServer", {
        gradeNames: ["gpii.app", "autoInit"],
        handlers: {
            ontologyPreferencesGet: {
                route: "/ontology/%to/preferences=%preferences",
                type: "get"
            }
        },
        ontologySourceUrl: "",
        components: {
            rawOntologySource: {
                type: "gpii.dataSource",
                options: {
                    url: "{gpii.ontologyServer}.options.ontologySourceUrl",
                    termMap: {
                        name: "%name"
                    },
                    responseParser: "gpii.ontologyServer.responseParser"
                }
            },
            ontologySource: {
                type: "gpii.callbackWrappingPromiseData"
            }
        }
    });

    gpii.ontologyServer.responseParser = function (ontology) {
        return ontology.transformations;
    };

    gpii.ontologyServer.getOntologyName = function (preferences) {
        return fluid.find(preferences, function (preference, key) {
            if (key.indexOf("http://gpii.org/") < 0) {
                return "default";
            }
            var segs = key.split("/");
            return segs.slice(0, segs.length - 1).join("/");
        });
    };

    fluid.demands("gpii.urlExpander", ["ontologyServer.development", "gpii.ontologyServer"], {
        options: {
            vars: {
                port: "{gpii.server}.options.port",
                root: path.join(__dirname, "..")
            }
        }
    });

    fluid.demands("rawOntologySource", "gpii.ontologyServer", {
        funcName: "gpii.dataSource.CouchDB"
    });

    fluid.demands("rawOntologySource", ["gpii.ontologyServer", "ontologyServer.development"], {
        funcName: "gpii.dataSource.URL"
    });

    fluid.demands("ontologySource", "gpii.ontologyServer", {
        options: {
            components: {
                rawSource: "{rawOntologySource}"
            }
        }
    });

    fluid.defaults("gpii.ontologyServer.development", {
        gradeNames: ["autoInit", "fluid.littleComponent"],
        components: {
            rawOntologySource: {
                type: "gpii.dataSource.URL",
                options: {
                    url: "{gpii.matchMaker}.options.ontologyServerUrl"
                }
            },
            ontologySource: {
                type: "gpii.callbackWrappingPromiseData",
                options: {
                    components: {
                        rawSource: "{rawOntologySource}"
                    }
                }
            }
        },
        preInitFunction: "gpii.ontologyServer.development.preInit"
    });

    gpii.ontologyServer.development.preInit = function (that) {
        that.get = function (directModel, callback) {
            var preferences = directModel.preferences;
            that.ontologySource.get(null).then(function (data) {
                var ontologyName = gpii.ontologyServer.getOntologyName(preferences);
                preferences = fluid.model.transformWithRules(preferences, data[ontologyName].transformations);
                callback(preferences);
            });
        };
    };
    
})();