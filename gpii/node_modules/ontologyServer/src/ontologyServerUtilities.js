/*!
GPII Ontology Server Utilities

Copyright 2012 OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

var fluid = require("infusion");
    
var ontologyServer = fluid.registerNamespace("gpii.ontologyServer"),
    transform = fluid.registerNamespace("gpii.ontologyServer.transform");

ontologyServer.getOntologyName = function (preferences) {
    return fluid.find(preferences, function (preference, key) {
        var ontologyPrefix = "//gpii.org/ontology/",
            index = key.indexOf(ontologyPrefix);
        if (index < 0) {
            return "default";
        }
        index += ontologyPrefix.length;
        var segs = key.substr(index).split("/");
        return segs[0];
    });
};

ontologyServer.expandTransformations = function (transformations) {
    var expanded = {};
    fluid.each(transformations, function (transformation, elPath) {
        var source, sourceURI;
        if (typeof transformation !== "string" || transformation.charAt(0) !== "{") {
            expanded[elPath] = transformation;
            return;
        }
        source = fluid.parseContextReference(transformation, 0);
        sourceURI = fluid.pathUtil.escapeSegment(source.context);
        expanded[elPath] = fluid.model.composeSegments(sourceURI, source.path);
    });
    return expanded;
};

fluid.model.escapedSetConfig = {
    parser: {
        parse: fluid.pathUtil.parseEL,
        compose: fluid.pathUtil.composePath
    },
    strategies: [fluid.model.defaultFetchStrategy, fluid.model.defaultCreatorStrategy]
};

transform.application = function (value, expander, expandSpec) {
    var path = expander.path,
        appIndex = path.indexOf("//gpii\\.org/applications/"),
        appId;
    if (appIndex < 0) {
        return;
    }
    appId = path.substring(appIndex + 25);
    value = {
        id: appId.split("\\").join(""),
        parameters: value[0].value
    };
    fluid.set(expander.target, fluid.model.composeSegments(expandSpec.outputPath,
        appId), value, fluid.model.escapedSetConfig);
};

fluid.defaults("gpii.ontologyServer.transform.application", {
    gradeNames: "fluid.standardTransformFunction"
});