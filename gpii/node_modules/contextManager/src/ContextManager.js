/*
* Context Manager
*
* Copyright 2014 Raising the Floor - International
*
* Licensed under the New BSD license. You may not use this file except in
* compliance with this License.
*
* The research leading to these results has received funding from the European Union's
* Seventh Framework Programme (FP7/2007-2013)
* under grant agreement no. 289016.
*
* You may obtain a copy of the License at
* https://github.com/GPII/universal/blob/master/LICENSE.txt
*/

(function () {
    "use strict";

    var fluid = require("infusion"),
        $ = fluid.registerNamespace("jQuery"),
        gpii = fluid.registerNamespace("gpii");

    fluid.registerNamespace("gpii.contextManager");

    fluid.defaults("gpii.contextManager", {
        gradeNames: ["fluid.eventedComponent", "autoInit"],
        handlers: {
            // contextChanged: {
            //     route: "/match",
            //     type: "post"
            // }, // TODO
        },
        invokers: {
            evaluateMatch: {
                funcName: "gpii.contextManager.evaluateMatch",
                args: [ "{that}", "{arguments}.0", "{arguments}.1", "{arguments}.2" ]
            }
        }
    });

    /**
     * Function to take the full output of a matchmaking process, evaluate the current context,
     * and decide which context should currently be used. The application block for this context
     * is passed on in the event passed as parameter.
     *
     * @param that {Object} - gpii.contextManager object
     * @param matchMakerResponse {Object} - the full structure fired from gpii.matchMakerFramework.matchMakerDispatcher - a structure containing, in addition to
     * all fields from matchMakerInput payload (userToken, preferences, solutionsRegistryEntries, deviceContext):
     *     matchMakerOutput {Object} - the output of a matchmaking process
     * @return {Object} - a filled-in shallow clone of matchMakerResponse including
     *     activeContextName, activeConfiguration
     */
    gpii.contextManager.evaluateMatch = function (that, matchMakerResponse) {
        console.log("contextManager received matchMakerResponse " + JSON.stringify(matchMakerResponse, null, 2));
        var contextPayload = $.extend({}, matchMakerResponse);
        var matchMakerOutput = matchMakerResponse.matchMakerOutput;

        // TODO: call the reporters to retrieve data about the current context
        // TODO: This needs to be in a model
        that.currentContext = {
            data: {
                "http://registry.gpii.net/terms/environment/brightness": 60,
                "http://registry.gpii.net/terms/environment/sound": -6,
                "http://registry.gpii.net/terms/environment/timeOfDay": "18:29:00",
                "http://registry.gpii.net/terms/environment/location": {
                    "lat": "43.999N",
                    "long": "74.382W"
                }
            }
        };
        
        var activeContextName = "gpii-default";
        
        contextPayload.activeContextName = activeContextName;
        contextPayload.activeConfiguration = $.extend(true, {}, matchMakerOutput.inferredConfiguration[activeContextName]);

        return contextPayload;
    };
})();