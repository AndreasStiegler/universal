/*
* Context Manager Tests
*
* Copyright 2014 Raising the Floor - International
*
* Licensed under the New BSD license. You may not use this file except in
* compliance with this License.
*
* The research leading to these results has received funding from the European Union's
* Seventh Framework Programme (FP7/2007-2013)
* under grant agreement no. 289016.
*
* You may obtain a copy of the License at
* https://github.com/GPII/universal/blob/master/LICENSE.txt
*/

/* global require */
(function () {
    "use strict";

    var fluid = require("infusion"),
        gpii = fluid.registerNamespace("gpii"),
        when = when || require("when"),
        jqUnit = fluid.require("jqUnit"),
        kettle = fluid.require("kettle", require);

    require("contextManager");
    require("transformer");

    fluid.registerNamespace("gpii.contextManager.tests");

    gpii.contextManager.tests.standardMMInput = require("./data/standardMMInput.json");
    gpii.contextManager.tests.standardMMOutput = require("./data/standardMMOutput.json");

    fluid.require("kettle/test/utils/js/KettleTestUtils", require);

    fluid.defaults("fluid.tests.contextManagerTestTree", {
        gradeNames: ["fluid.test.testEnvironment", "autoInit"],
        components: {
            contextManager: {
                type: "gpii.contextManager"
            },
            contextManagerTester: {
                type: "fluid.tests.contextManagerTester"
            }
        }
    });

    fluid.defaults("fluid.tests.contextManagerTester", {
        gradeNames: ["fluid.test.testCaseHolder", "autoInit"],
        modules: [{
            name: "gpii.contextManager.evaluateMatch tests",
            tests: [
                {
                    expect: 1,
                    name: "Basic test",
                    sequence: [ {
                        func: "fluid.tests.evaluateMatchTest",
                        args: [ "{contextManager}", "{that}.events.onMatchEvaluated" ]
                    }, {
                        event: "{that}.events.onMatchEvaluated",
                        listener: "gpii.contextManager.tests.testMatchEvaluatedResponse"
                    }]
                }
            ]
        }],
        events: {
            onMatchEvaluated: null
        }
    });

    fluid.tests.evaluateMatchTest = function (contextManager, event) {
        var returned = contextManager.evaluateMatch(gpii.contextManager.tests.standardMMOutput,
            gpii.contextManager.tests.standardMMInput, event);
    };

    gpii.contextManager.tests.testMatchEvaluatedResponse = function (b, c) {
        var expect = {
            "org.nvda-project": {
                "active": true,
                "settings": {
                    "http://registry.gpii.net/common/speechRate": 200,
                    "http://registry.gpii.net/applications/org.nvda-project": {
                        "speech\\.espeak\\.pitch": 63
                    }
                }
            }
        };

        jqUnit.assertDeepEq("checking return from evaluateMatchTest", expect, b);
    }



    if (kettle.tests.allTests) {
        module.exports = "fluid.tests.contextManagerTestTree";
    } else {
        fluid.test.runTests(["fluid.tests.contextManagerTestTree"]);
    }

})();