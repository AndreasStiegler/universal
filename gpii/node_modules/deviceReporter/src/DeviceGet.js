/**
 * GPII Device GET Handler
 *
 * Copyright 2012 OCAD University
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/gpii/universal/LICENSE.txt
 */

/* global require */

(function () {

    "use strict";

    var fluid = require("infusion"),
        gpii = fluid.registerNamespace("gpii");

    fluid.defaults("kettle.requests.request.handler.deviceGet", {
        gradeNames: ["fluid.littleComponent", "autoInit"],
        invokers: {
            handle: {
                funcName: "gpii.handleDeviceGet",
                args: [
                    "{requestProxy}",
                    "{deviceReporter}.installedSolutionsDataSource",
                    "{deviceReporter}.platformReporter",
                    "{deviceReporter}.solutionsRegistryDataSource"
                ]
            }
        }
    });

    gpii.handleDeviceGet = function (requestProxy, installedSolutionsDataSource, platformReporter, solutionsRegistryDataSource) {
        if (installedSolutionsDataSource.options.url) {
          installedSolutionsDataSource.get(null, function onSuccess(solutions) {
                requestProxy.events.onSuccess.fire({
                    solutions: solutions,
                    OS: platformReporter.reportPlatform()
                });
            });
        } else {
            var installedSolutions = [];
            solutionsRegistryDataSource.get(null, function onSuccess(entries) {
                Object.keys (entries).forEach( function (entryId) {
                    var entry = entries[entryId];
                    if (!installedSolutions.some(function(s) { return s.id === entryId; })) {
                        fluid.each(entry.contexts.deviceReporters, function (deviceReporter) {
                            if (!installedSolutions.some(function(s) { return s.id === entryId; })) {
                                if (fluid.invokeGradedFunction(deviceReporter.type, deviceReporter)) {
                                    installedSolutions.push({ "id": entryId });
                                }
                            }
                        });
                    }
                });
                requestProxy.events.onSuccess.fire({
                    solutions: installedSolutions,
                    OS: platformReporter.reportPlatform()
                });
            });
        }
    };

})();
