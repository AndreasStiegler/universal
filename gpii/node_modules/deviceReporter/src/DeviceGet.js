/**
 * GPII Device GET Handler
 *
 * Copyright 2012 OCAD University
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/gpii/universal/LICENSE.txt
 */

(function () {

    "use strict";

    var fluid = require("infusion"),
        os = require("os"),
        gpii = fluid.registerNamespace("gpii"),
        kettle = fluid.require("kettle", require);

    fluid.defaults("kettle.requests.request.handler.deviceGet", {
        gradeNames: ["fluid.littleComponent", "autoInit"],
        invokers: {
            handle: {
                funcName: "gpii.handleDeviceGet",
                args: [
                    "{requestProxy}",
                    "{deviceReporter}.installedSolutionsDataSource",
                    "{deviceReporter}.solutionsRegistryDataSource"
                ]
            }
        }
    });

    gpii.handleDeviceGet = function (requestProxy, installedSolutionsDataSource, solutionsRegistryDataSource) {
        if (installedSolutionsDataSource.options.url) {
            installedSolutionsDataSource.get(null, function onSuccess(solutions) {
                requestProxy.events.onSuccess.fire({
                    solutions: solutions,
                    OS: {
                        //TODO: need to report more details - windowmanager, etc.
                        id: os.platform(),
                        // TODO: Need a better strategy - Node semver fails horribly
                        // in the face of the benign underscore (eg. x86_64).
                        version: os.release().replace("_", "-")
                    }
                });
            });
        } else {
           var installedSolutions = [];

           solutionsRegistryDataSource.options.url += os.platform();
           solutionsRegistryDataSource.get(null, function onSuccess(entries) {
                entries.forEach( function (entry) {
                    if (!installedSolutions.some(function(s) { return s.id == entry.id })) {
                        if (entry.contexts.deviceReporters) {
                            entry.contexts.deviceReporters.forEach( function (deviceReporter) {
                                if (!installedSolutions.some(function(s) { return s.id == entry.id })) {
                                    if (fluid.invokeGlobalFunction(deviceReporter.type, [deviceReporter.name])) {
                                        installedSolutions.push({ "id": entry.id });
                                    }
                                }
                            });
                        }
                    }
                });

                requestProxy.events.onSuccess.fire({
                    solutions: installedSolutions,
                    OS: {
                        //TODO: need to report more details - windowmanager, etc.
                        id: os.platform(),
                        // TODO: Need a better strategy - Node semver fails horribly
                        // in the face of the benign underscore (eg. x86_64).
                        version: os.release().replace("_", "-")
                    }
                });

            });
        }
    };

})();
