/**
 * GPII Device GET Handler
 *
 * Copyright 2012 OCAD University
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/gpii/universal/LICENSE.txt
 */

/* global require */

(function () {

    "use strict";

    var fluid = require("infusion"),
        os = require("os"),
        gpii = fluid.registerNamespace("gpii");

    fluid.defaults("kettle.requests.request.handler.deviceGet", {
        gradeNames: ["fluid.littleComponent", "autoInit"],
        invokers: {
            handle: {
                funcName: "gpii.handleDeviceGet",
                args: [
                    "{requestProxy}",
                    "{deviceReporter}.installedSolutionsDataSource",
                    "{deviceReporter}.solutionsRegistryDataSource"
                ]
            }
        }
    });

    gpii.invokeGradedFunction = function (name, spec) {
        var defaults = fluid.defaults(name);
        if (!defaults.argumentMap || !fluid.hasGrade(defaults, "fluid.function")) {
            fluid.fail("Cannot look up name " + name 
                + " to a function with registered argumentMap - got defaults ", defaults);
        }
        var args = [];
        fluid.each(defaults.argumentMap, function (value, key) {
            args[value] = spec[key];
        });
        return fluid.invokeGlobalFunction(name, args);
    };

    gpii.handleDeviceGet = function (requestProxy, installedSolutionsDataSource, solutionsRegistryDataSource) {
        if (installedSolutionsDataSource.options.url) {
            installedSolutionsDataSource.get(null, function onSuccess(solutions) {
                fireDeviceInformation(requestProxy, solutions);
            });
        } else {
           var installedSolutions = [];

           solutionsRegistryDataSource.get(null, function onSuccess(entries) {
                entries.forEach( function (entry) {
                    if (!installedSolutions.some(function(s) { return s.id === entry.id; })) {
                        fluid.each(entry.contexts.deviceReporters, function (deviceReporter) {
                            if (!installedSolutions.some(function(s) { return s.id === entry.id; })) {
                                if (gpii.invokeGradedFunction(deviceReporter.type, deviceReporter)) {
                                    installedSolutions.push({ "id": entry.id });
                                }
                            }
                        });
                    }
                });

            fireDeviceInformation(requestProxy, installedSolutions);

            });
        }
    };

    function fireDeviceInformation (requestProxy, installedSolutions) {
        requestProxy.events.onSuccess.fire({
            solutions: installedSolutions,
            OS: {
                //TODO: need to report more details - windowmanager, etc.
                id: os.platform(),
                // TODO: Need a better strategy - Node semver fails horribly
                // in the face of the benign underscore (eg. x86_64).
                version: os.release().replace("_", "-")
            }
        });
    }

})();
