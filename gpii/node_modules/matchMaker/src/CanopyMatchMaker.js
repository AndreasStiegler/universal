/*!
GPII Canopy Matchmaker

Copyright 2012 OCAD University
Copyright 2012 Antranig Basman

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

var fluid = require("infusion");
    
var matchMaker = fluid.registerNamespace("gpii.matchMaker");

function computeLeavesImpl (model, path, paths) {
    fluid.each(model, function (value, key) {
        var newPath = fluid.pathUtil.composePath(path, key.toString());
        if (fluid.isPrimitive(value)) {
            paths.push(newPath);
        }
        else {
            computeLeavesImpl(value, newPath, paths);
        }
    });
}

matchMaker.computeLeaves = function (model) {
    var paths = [];
    computeLeavesImpl(model, "", paths);
    return paths;
};

/** Returns a non-positive number indicating by how many path segments the supplied
 * path fails to index correctly into the supplied model. A return value of 0 
 * indicates that the path indexes fully */

matchMaker.prefixLength = function (path, model) {
    var segs = fluid.pathUtil.parseEL(path);
    for (var i = 0; i < segs.length; ++ i) {
        if (model === undefined) {
            return i - segs.length - 1;
        }
        var seg = segs[i];
        model = model[seg];
    }
    return 0;
};

matchMaker.makeComparator = function (leaves) {
    return function (solnA, solnB) {
        var domA = false, domB = false;
        for (var i = 0; i < leaves.length; ++ i) {
            var leaf = leaves[i];
            var goodA = matchMaker.prefixLength(leaf, solnA.solution);
            var goodB = matchmaker.prefixLength(leaf, solnB.solution);
            if (goodA > goodB) {
                domA = true;
            }
            else if (goodB > goodA) {
                domB = true;
            }
        }
        return domA ^ domB? (domA? 1 : -1) : 0;
    };
};

matchMaker.bestCoverage = function (leaves, soln) {
    var best = Number.NEGATIVE_INFINITY;
    for (var i = 0; i < leaves.length; ++ i) {
        var leaf = leaves[i];
        var good = matchMaker.prefixLength(leaf, soln.solution);
        best = Math.max(good, best);
    }
    return best;
};

matchMaker.disposeSolutions = function (solutions, profile) {
    var leaves = matchMaker.computeLeaves(profile);
    var solrecs = fluid.transform(solutions, function (solution, index) {
        return {
            solution: solution,
            paths: matchMaker.computePaths(solution),
            index: index
        }
    });
    // Phase 1: sort all solutions by domination ordering
    var comparator = matchMaker.makeComparator(leaves);
    solrecs.sort(comparator);
    var dom = 0;
    for (;dom < solrecs.length - 1; ++dom) {
        if (comparator(solrecs[dom], solrecs[dom+1]) > 0)
        break;
    }
    // eliminate all dominated solutions
    solrecs.length = dom;
    // For remaining solutions, pick a covering set, moving out others into ambiguous set
    for (var i = 0; i < solrecs.length; ++ i) {
        var sol = solrecs[i];
        
    }
};
