/*!
GPII Canopy Matchmaker

Copyright 2012 OCAD University
Copyright 2012 Antranig Basman

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

var fluid = require("infusion");
    
var matchMaker = fluid.registerNamespace("gpii.matchMaker");

function computeLeavesImpl (model, path, paths) {
    fluid.each(model, function (value, key) {
        var newPath = fluid.pathUtil.composePath(path, key.toString());
        if (fluid.isPrimitive(value)) {
            paths.push(newPath);
        }
        else {
            computeLeavesImpl(value, newPath, paths);
        }
    });
}

matchMaker.computeLeaves = function (model) {
    var paths = [];
    computeLeavesImpl(model, "", paths);
    return paths;
};

matchMaker.computeLeavesFromSolution = function (solution) {
    var leaves = [];
    leaves = leaves.concat(fluid.makeArray(solution.capabilities));
    var inputPaths = fluid.model.transform.collectInputPaths(solution.capabilitiesTransformations);
    leaves = leaves.concat(inputPaths);
    return leaves;
};

/** Returns a non-positive number indicating by how many path segments the supplied
 * path fails to index correctly into the supplied model. A return value of 0 
 * indicates that the path indexes fully */

matchMaker.prefixLength = function (path, model) {
    var segs = fluid.pathUtil.parseEL(path);
    for (var i = 0; i < segs.length; ++ i) {
        var seg = segs[i];
        model = model[seg];
        if (model === undefined) {
            return i - segs.length;
        }
    }
    return 0;
};

matchMaker.makeComparator = function (leaves) {
    return function (solnA, solnB) {
        var domA = false, domB = false;
        for (var i = 0; i < leaves.length; ++ i) {
            var leaf = leaves[i];
            var goodA = matchMaker.prefixLength(leaf, solnA.solution);
            var goodB = matchmaker.prefixLength(leaf, solnB.solution);
            if (goodA > goodB) {
                domA = true;
            }
            else if (goodB > goodA) {
                domB = true;
            }
        }
        return domA ^ domB? (domA? 1 : -1) : 0;
    };
};

matchMaker.pathsToSkeleton = function (paths) {
    var togo = {};
    for (var i = 0; i < paths.length; ++ i) {
        var path = paths[i];
        var existing = fluid.get(togo, path);
        if (!existing) {
            fluid.set(togo, path, {});
        }  
    };
    return togo;
};

matchMaker.sortDescending = function (numA, numB) {
    return numB - numA;
}

matchMaker.computeFitness = function (leaves, solution) {
    var vector = [];
    for (var i = 0; i < leaves.length; ++ i) {
        var leaf = leaves[i];
        vector[i] = matchMaker.prefixLength(leaf, solution);
    }
    vector = vector.sort(matchMaker.sortDescending);
    return vector;
};

matchMaker.compareFitness = function (solA, solB) {
    var i = 0, fitA = solA.fitness, fitB = solB.fitness;;
    for (; ; ++i) {
        var endA = i === fitA.length, endB = i === fitB.length;
        if (endA || endB) {
            return endA && endB? 0 : (endB? -1 : 1);
        }
        var diff = fitB[i] - fitA[i];
        if (diff !== 0) {
            return diff;
        }
    }
};

matchMaker.sortSolutions = function (solutions) {
    return solutions.sort(matchMaker.compareFitness);
};

matchMaker.bestCoverage = function (leaves, soln) {
    var best = Number.NEGATIVE_INFINITY;
    for (var i = 0; i < leaves.length; ++ i) {
        var leaf = leaves[i];
        var good = matchMaker.prefixLength(leaf, soln.solution);
        best = Math.max(good, best);
    }
    return best;
};

matchMaker.rankSolutions = function (leaves, solutions) {
    var solrecs = fluid.transform(solutions, function (solution, index) {
        var paths = matchMaker.computeLeavesFromSolution(solution);
        var skeleton = matchMaker.pathsToSkeleton(paths);
        var fitness = matchMaker.computeFitness(leaves, skeleton);
        return {
            solution: solution,
            skeleton: skeleton,
            fitness: fitness,
            index: index
        }
    });
    solrecs = matchMaker.sortSolutions(solrecs);
    return solrecs;
};

matchMaker.disposeSolutions = function (leaves, solutions) {
    var ranked = matchMaker.rankSolutions(leaves, solutions);
    var disposed = matchMaker.disposeSolutionsImpl(leaves, ranked);
    return disposed;
};

matchMaker.disposeSolutionsImpl = function (leaves, solrecs) {
    var canopy = fluid.transform(leaves, function() {
        return Number.NEGATIVE_INFINITY;
    });

    for (var i = 0; i < solrecs.length; ++ i) {
        var sol = solrecs[i];
        var inCanopy = false;
        for (var j = 0; j < leaves.length; ++ j) {
            var depth = matchMaker.prefixLength(leaves[j], sol.skeleton);
            if (depth > canopy[j]) {
                inCanopy = true;
                canopy[j] = depth;
            }
        }
        if (inCanopy) {
            solrecs[i].disposition = "accept";
        }
        else {
            solrecs[i].disposition = "reject";
        }
    }
    return solrecs;
};
