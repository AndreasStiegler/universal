/*!
GPII Match Maker POST Handler

Copyright 2012 OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

(function () {

    "use strict";

    var fluid = require("infusion"),
        gpii = fluid.registerNamespace("gpii");

    fluid.demands("gpii.requests.request.handler", "matchPost", {
        options: {
            components: {
                matchMaker: "{gpii.matchMaker}"
            },
            invokers: {
                handle: {
                    funcName: "gpii.requests.request.handler.matchPost",
                    args: ["{that}", "{requestProxy}", "{request}.req.body"]
                }
            },
            events: {
                onSolutionsReporter: null,
                onOntologyServer: null,
                onReadyToMatch: {
                    events: {
                       solutions: "onSolutionsReporter",
                       ontology: "onOntologyServer"
                    },
                    args: ["{arguments}.solutions.0", "{arguments}.ontology.0"]
                }
            },
            listeners: {
                onReadyToMatch: "{that}.match"
            },
            preInitFunction: "gpii.requests.request.handler.matchPostPreInit"
        }
    });

    gpii.requests.request.handler.matchPostPreInit = function (that) {
        that.match = function (solutions, preferences) {
            var matchMaker = that.matchMaker,
                transform = matchMaker.transformer.transformSettings,
                strategy = fluid.getGlobalValue(matchMaker.options.strategy);

            that.when(matchMaker.match(preferences, solutions, strategy), function (matchedSolutions) {
                return transform({
                    solutions: matchedSolutions,
                    preferences: preferences
                });
            });
        };
    };

    gpii.requests.request.handler.matchPost = function (that, requestProxy, model) {
        var matchMaker = that.matchMaker,
            solutionsReporter = matchMaker.solutionsReporter,
            ontologyServer = matchMaker.ontologyServer,
            os = fluid.get(model, "device.OS.id"),
            version = fluid.get(model, "device.OS.version");

        function handleEvent (data, event) {
            if (!data) {
                requestProxy.events.onError.fire();
                return;
            }
            event.fire(data);
        }

        solutionsReporter.get({
            os: os,
            version: version
        }, function (solutions) {
            matchMaker.prefilterSolutions(solutions, os, version);
            solutions = matchMaker.prefilterSolutions(solutions, model.device);
            handleEvent(solutions, that.events.onSolutionsReporter);
        });

        ontologyServer.get({
            preferences: model.preferences
        }, function (preferences) {
            handleEvent(preferences, that.events.onOntologyServer);
        });
    };

})();