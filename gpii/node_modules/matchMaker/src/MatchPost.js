/*!
GPII Match Maker POST Handler

Copyright 2012 OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

(function () {

    "use strict";

    var fluid = require("infusion"),
        gpii = fluid.registerNamespace("gpii");

    gpii.requests.request.handler.matchPostPreInit = function (that) {
        that.match = function (solutions, preferences) {
            var matchMaker = that.matchMaker,
                transform = matchMaker.transformer.transformSettings,
                strategy = fluid.getGlobalValue(matchMaker.options.strategy);

            that.when(matchMaker.match(preferences, solutions, strategy), function (matchedSolutions) {
                return transform({
                    solutions: matchedSolutions,
                    preferences: preferences
                });
            });
        };
    };

    gpii.requests.request.handler.matchPost = function (that, requestProxy, model) {
        var matchMaker = that.matchMaker,
            solutionsReporter = matchMaker.solutionsReporter,
            ontologyServer = matchMaker.ontologyServer,
            os = fluid.get(model, "device.OS.id"),
            version = fluid.get(model, "device.OS.version");

        function handleEvent (callback) {
            return function (data) {
                if (!data) {
                    requestProxy.events.onError.fire();
                    return;
                }
                callback(data);
            };
        }

        solutionsReporter.get({
            os: os,
            version: version
        }, handleEvent(function (solutions) {
            matchMaker.prefilterSolutions(solutions, os, version);
            solutions = matchMaker.prefilterSolutions(solutions, model.device);
            that.events.onSolutionsReporter.fire(solutions);
        }));

        ontologyServer.set(null, {
            preferences: model.preferences
        }, handleEvent(function (preferences) {
            that.events.onOntologyServer.fire(preferences);
        }));
    };

})();