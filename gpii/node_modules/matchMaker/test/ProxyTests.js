/**
 * GPII Match Maker Proxy Tests
 *
 * Copyright 2013 OCAD University
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The research leading to these results has received funding from the European Union's
 * Seventh Framework Programme (FP7/2007-2013)
 * under grant agreement no. 289016.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("infusion"),
    path = require("path"),
    $ = fluid.registerNamespace("jQuery"),
    jqUnit = fluid.require("jqUnit"),
    configPath = path.resolve(__dirname, "../configs"),
    kettle = fluid.registerNamespace("kettle");

fluid.require("kettle/test/utils/js/KettleTestUtils", require);

var proxy = fluid.registerNamespace("gpii.tests.matchMakerProxyTests");

proxy.preferences = require("universal/testData/preferences/acceptanceTests/os_common.json");

proxy.preferencesRuleBased = $.extend(true, {}, proxy.preferences, {
    "http://registry.gpii.org/common/matchMakerType": [{
        "value": "ruleBased"
    }]
});

proxy.payload = {
    preferences: proxy.preferences,
    device: {
        solutions: require("universal/testData/deviceReporter/installedSolutions.json"),
        OS: {
            id: "linux",
            version: "3.0.0"
        }
    }
};

proxy.payloadRuleBased = $.extend(true, {}, proxy.payload, {
    preferences: proxy.preferencesRuleBased
});


proxy.testProxyResponse = function (data) {
    data = JSON.parse(data);
    jqUnit.assertUndefined("No error reported", data.isError);
    jqUnit.assertTrue("There is a valid non-empty match", data.length > 0);
};

proxy.testFailedResponse = function (data) {
    data = JSON.parse(data);
    jqUnit.assertTrue("Undeployed match maker was not found", data.isError);
    jqUnit.assertEquals("Error message is correct", "connect ECONNREFUSED",
        data.message);
};

var testDefs = [{
    name: "Match Maker Proxy tests.",
    expect: 4,
    config: {
        nodeEnv: "proxy",
        configPath: configPath
    },
    components: {
        request: {
            type: "kettle.tests.request.http",
            options: {
                requestOptions: {
                    path: "/match",
                    method: "POST"
                }
            }
        }
    },
    sequence: [{
        func: "{request}.send",
        args: proxy.payload
    }, {
        event: "{request}.events.onComplete",
        listener: "gpii.tests.matchMakerProxyTests.testProxyResponse"
    }, {
        func: "{request}.send",
        args: proxy.payloadRuleBased
    }, {
        event: "{request}.events.onComplete",
        listener: "gpii.tests.matchMakerProxyTests.testFailedResponse"
    }]
}];

module.exports = kettle.tests.bootstrap(testDefs);
