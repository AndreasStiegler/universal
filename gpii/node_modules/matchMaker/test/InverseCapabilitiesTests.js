/**
 * GPII Match Maker Proxy Tests
 *
 * Copyright 2013 OCAD University
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/kettle/LICENSE.txt
 */

/*global require, __dirname*/

var fluid = require("infusion"),
    jqUnit = fluid.require("jqUnit"),
    kettle = fluid.registerNamespace("kettle"),
    gpii = fluid.registerNamespace("gpii");
    
fluid.setLogging(true);

require("matchMaker");
require("ontologyServer");


fluid.require("kettle/test/utils/js/KettleTestUtils", require);

fluid.registerNamespace("gpii.tests.matchMaker.inverse");

// TODO: create a unified scheme for locating preferences sets
gpii.tests.matchMaker.inverse.os_win7 = require("universal/testData/preferences/acceptanceTests/os_win7.json");
gpii.tests.matchMaker.inverse.rules = require("matchMaker/src/inverseCapabilities.json");

gpii.tests.matchMaker.inverse.ontologyFlat = require("universal/testData/ontologies/ISO24751-2/flat.json");

fluid.defaults("gpii.tests.matchMaker.inverse.env", {
    gradeNames: ["fluid.test.testEnvironment", "autoInit"],
    components: {
        tester: {
            type: "fluid.test.testCaseHolder",
            options: {
                modules: [{
                    name: "Inverse Capabilities tests",
                    tests: [{
                        name: "os_win7 inversion",
                        expect: 1,
                            func: "gpii.tests.matchMaker.inverse.testInversion",
                            args: ["os_win7"]                      
                    }]
                }]
            }
        }
    }
});

gpii.tests.matchMaker.inverse.testInversion = function (prefName) {
    var root = gpii.tests.matchMaker.inverse;
    prefs = root[prefName];
    rules = root.rules;
    fluid.log(prefs);
    var flattened = gpii.ontologyServer.doSuppliedTransform(prefs, gpii.tests.matchMaker.inverse.ontologyFlat);
    fluid.log("flattened", flattened);
    var expected = require("matchMaker/test/inverseCapabilities/" + prefName + "_expected");
    var transformed = gpii.matchMaker.supplyOntologizedPreferences(flattened, rules);
    console.log(transformed);
    jqUnit.assertDeepEq("Expected inversion for capabilities transformation", expected, transformed);
};

if (kettle.tests.allTests) {
    module.exports = "gpii.tests.matchMaker.inverse.env";
} else {
    fluid.test.runTests(["gpii.tests.matchMaker.inverse.env"]);
}