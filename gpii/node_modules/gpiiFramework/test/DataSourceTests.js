/*!
XML Settings Handler Tests

Copyright 2012 Raising the Floor - International

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

/*global require, __dirname*/

(function () {
    // This loads universal.
     var fluid = require("infusion"),
         gpii = fluid.registerNamespace("gpii"),
         path = require("path"),
         jqUnit = fluid.require("jqUnit");

    fluid.require("../dataSource.js", require);
    fluid.require("../../../../tests/gpiiTests.js", require);

    var dataSourceTester = gpii.tests.testEnvironment();

    fluid.demands("gpii.urlExpander", "gpii.test", {
        options: {
            vars: {
                root: __dirname
            }
        }
    });

    fluid.demands("gpii.dataSource.handleError", ["gpii.dataSource.URL", "gpii.test"], {
        funcName: "gpii.dataSource.handleErrorTest",
        args: "{arguments}.0"
    });

    dataSourceTester.asyncTest("Testing url datasource with filesystem", function () {
        var dataSource = gpii.dataSource.URL({
                url: "file://%root/data/dataSourceTestFile.json"
            }),
            expected = {
                dataSource: "works"
            };

        dataSource.get(null, function (data) {
            jqUnit.assertDeepEq("Data source should properly fetch data from a local file", expected, data);
            jqUnit.start();
        });
    });

    gpii.dataSource.handleErrorTest = function (data) {
        jqUnit.assertTrue("Data source should properly handle paths to non-existent files", data.isError);
        jqUnit.start();
    };

    dataSourceTester.asyncTest("Testing url datasource with filesystem with expansion and no file", function () {
        jqUnit.expect(1);
        var dataSource = gpii.dataSource.URL({
                url: "file://%root/data/%expand.json",
                termMap: {
                    expand: "%expand"
                }
            });

        dataSource.get({
            expand: "not_found"
        });
    });

    dataSourceTester.asyncTest("Testing url datasource with filesystem with expansion and static termMap", function () {
        var dataSource = gpii.dataSource.URL({
                url: "file://%root/data/%expand.json",
                termMap: {
                    expand: "dataSourceTestFile"
                }
            }),
            expected = {
                dataSource: "works"
            };

        dataSource.get(null, function (data) {
            jqUnit.assertDeepEq("Data source should properly fetch data from a local file", expected, data);
            jqUnit.start();
        });
    });

    dataSourceTester.asyncTest("Testing url datasource with filesystem and expansion", function () {
        var dataSource = gpii.dataSource.URL({
                url: "file://%root/data/%expand.json",
                termMap: {
                    expand: "%expand"
                }
            }),
            expected = {
                dataSource: "works"
            };

        dataSource.get({
            expand: "dataSourceTestFile"
        }, function (data) {
            jqUnit.assertDeepEq("Data source should properly fetch data from a local file", expected, data);
            jqUnit.start();
        });
    });

    dataSourceTester.test("Initialization", function () {
        var dataSource = gpii.dataSource({
            url: "file://%expand/test.json",
            termMap: {
                expand: "%expand"
            }
        });
        jqUnit.assertValue("Data source is initialized", dataSource);
        jqUnit.assertValue("Data source should have a get method", dataSource.get);
        jqUnit.assertValue("Data source should have a resolveUrl method", dataSource.resolveUrl);
        jqUnit.assertUndefined("Data source should not have a set method by default", dataSource.set);
        jqUnit.assertEquals("Data source should should expand urls based on termMap", "file://test/test.json", dataSource.resolveUrl({expand: "test"}));

        dataSource = gpii.dataSource({
            url: "file://%expand/test.json",
            termMap: {
                expand: "test"
            }
        });
        jqUnit.assertEquals("Data source should should expand urls based on termMap", "file://test/test.json", dataSource.resolveUrl());
    });

}());