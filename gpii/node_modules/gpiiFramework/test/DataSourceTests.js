/*!
XML Settings Handler Tests

Copyright 2012 Raising the Floor - International

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

/*global require, __dirname*/

(function () {
    // This loads universal.
     var fluid = require("infusion"),
         gpii = fluid.registerNamespace("gpii"),
         path = require("path"),
         fs = require("fs"),
         jqUnit = fluid.require("jqUnit");

    fluid.require("../dataSource.js", require);
    fluid.require("../../../../tests/gpiiTests.js", require);

    var dataSourceTester = gpii.tests.testEnvironment();

    var cleanUpAndContinue = function (fileName) {
        fileName = fileName.substring(7);
        fs.unlink(fileName);
        jqUnit.start();
    };

    fluid.demands("gpii.urlExpander", "gpii.test", {
        options: {
            vars: {
                root: __dirname
            }
        }
    });

    fluid.demands("gpii.dataSource.handleError", ["gpii.dataSource.URL", "gpii.test"], {
        funcName: "gpii.dataSource.handleErrorTest",
        args: "{arguments}.0"
    });

    gpii.dataSource.handleErrorTest = function (data) {
        jqUnit.assertTrue("Data source should properly handle paths to non-existent files", data.isError);
        jqUnit.start();
    };

    var testConfig = {
        "Testing url datasource with filesystem": {
            options: {
                url: "file://%root/data/dataSourceTestFile.json"
            },
            type: "asyncTest",
            expected: {
                dataSource: "works"
            },
            argLength: 2,
            operation: "get",
            directModel: null,
            testCallback: true,
            testCases: {
                "Data source should properly fetch data from a local file": {
                    operation: "assertDeepEq"
                }
            }
        },
        "Testing url datasource with filesystem with expansion and no file": {
            options: {
                url: "file://%root/data/%expand.json",
                termMap: {
                    expand: "%expand"
                }
            },
            argLength: 1,
            type: "asyncTest",
            operation: "get",
            directModel: {
                expand: "not_found"
            }
        },
        "Testing url datasource with filesystem with expansion and static termMap": {
            options: {
                url: "file://%root/data/%expand.json",
                termMap: {
                    expand: "dataSourceTestFile"
                }
            },
            type: "asyncTest",
            operation: "get",
            directModel: null,
            testCallback: true,
            expected: {
                dataSource: "works"
            },
            argLength: 2,
            testCases: {
                "Data source should properly fetch data from a local file": {
                    operation: "assertDeepEq"
                }
            }
        },
        "Testing url datasource with filesystem and expansion": {
            options: {
                url: "file://%root/data/%expand.json",
                termMap: {
                    expand: "%expand"
                }
            },
            type: "asyncTest",
            operation: "get",
            directModel: {
                expand: "dataSourceTestFile"
            },
            testCallback: true,
            expected: {
                dataSource: "works"
            },
            argLength: 2,
            testCases: {
                "Data source should properly fetch data from a local file": {
                    operation: "assertDeepEq"
                }
            }
        },
        "Testing url datasource 0 args": {
            options: {
                url: "file://%root/data/dataSourceTestFile.json"
            },
            type: "asyncTest",
            operation: "get",
            expected: {
                dataSource: "works"
            },
            testPromise: true,
            argLength: 0,
            testCases: {
                "Data source should properly fetch data from a local file": {
                    operation: "assertDeepEq"
                }
            }
        },
        "Testing url datasource 1 args - direct model": {
            options: {
                url: "file://%root/data/%expand.json",
                termMap: {
                    expand: "%expand"
                }
            },
            type: "asyncTest",
            operation: "get",
            expected: {
                dataSource: "works"
            },
            directModel: {
                expand: "dataSourceTestFile"
            },
            argLength: 1,
            testPromise: true,
            testCases: {
                "Data source should properly fetch data from a local file": {
                    operation: "assertDeepEq"
                }
            }
        },
        "Testing url datasource 1 args - callback": {
            options: {
                url: "file://%root/data/dataSourceTestFile.json"
            },
            type: "asyncTest",
            operation: "get",
            expected: {
                dataSource: "works"
            },
            testCallback: true,
            argLength: 1,
            testCases: {
                "Data source should properly fetch data from a local file": {
                    operation: "assertDeepEq"
                }
            }
        },
        "Testing url datasource 1 args - model": {
            options: {
                url: "file://%root/data/test.json",
                writable: true
            },
            type: "asyncTest",
            operation: "set",
            expected: {
                dataSource: "works"
            },
            model: {
                dataSource: "works"
            },
            argLength: 1,
            testPromise: true,
            testCases: {
                "Data source should properly fetch data from a local file": {
                    operation: "assertDeepEq"
                }
            }
        },
        "Testing url datasource 1 args - set, callback": {
            options: {
                url: "file://%root/data/test.json",
                writable: true
            },
            type: "asyncTest",
            operation: "set",
            testCallback: true,
            testPromise: true,
            argLength: 1,
            expected: "No payload provided on set.",
            testCases: {
                "Invalid arguments to data source": {
                    operation: "assertEquals"
                }
            }
        }
    };

    var testRunner = function (testsConfig) {
        fluid.each(testsConfig, function (config, testName) {
            dataSourceTester[config.type](testName, function () {
                jqUnit.expect(2);
                var dataSource = gpii.dataSource.URL(config.options),
                    args = [],
                    callback = function (data) {
                        fluid.each(config.testCases, function (testCase, name) {
                            jqUnit[testCase.operation](name, config.expected, data);
                        });
                        if (config.operation === "get") {
                            jqUnit.start();
                            return;
                        }
                        cleanUpAndContinue(dataSource.resolveUrl());
                    }, promise;

                fluid.each(["directModel", "model"], function (argName) {
                    var arg = config[argName];
                    if (typeof arg !== "undefined") {
                        args.push(arg);
                    }
                });

                if (config.testCallback) {
                    args.push(callback)
                }
                jqUnit.assertEquals("Confirm number of args", config.argLength, args.length);
                promise = dataSource[config.operation].apply(null, args);
                if (config.testPromise) {
                    promise.then(callback);
                }
            });
        });
    };

    testRunner(testConfig);

    dataSourceTester.test("Initialization", function () {
        var dataSource = gpii.dataSource({
            url: "file://%expand/test.json",
            termMap: {
                expand: "%expand"
            }
        });
        jqUnit.assertValue("Data source is initialized", dataSource);
        jqUnit.assertValue("Data source should have a get method", dataSource.get);
        jqUnit.assertValue("Data source should have a resolveUrl method", dataSource.resolveUrl);
        jqUnit.assertUndefined("Data source should not have a set method by default", dataSource.set);
        jqUnit.assertEquals("Data source should should expand urls based on termMap", "file://test/test.json", dataSource.resolveUrl({expand: "test"}));

        dataSource = gpii.dataSource({
            url: "file://%expand/test.json",
            termMap: {
                expand: "test"
            }
        });
        jqUnit.assertEquals("Data source should should expand urls based on termMap", "file://test/test.json", dataSource.resolveUrl());
    });

}());