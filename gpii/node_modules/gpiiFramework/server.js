/*
GPII Infusion/Express Middleware

Copyright 2012 OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

(function () {

    "use strict";

    var fluid = require("infusion"),
        fs = require("fs"),
        path = require("path"),
        express = require("express"),
        gpii = fluid.registerNamespace("gpii");

    var findArgv = function (key) {
        return fluid.find(process.argv, function (arg) {
            if (arg.indexOf(key + "=") === 0) {
                return arg.substr(key.length + 1);
            }
        });
    };

    fluid.require("gpiiFramework", require);

    fluid.defaults("gpii.server", {
        gradeNames: ["fluid.eventedComponent", "autoInit"],
        preInitFunction: "gpii.server.preInit",
        finalInitFunction: "gpii.server.finalInit",
        components: {
            requests: {
                type: "gpii.requests"
            },
            configurations: {
                type: "gpii.server.configurations"
            },
            bodyParser: {
                type: "gpii.middleware",
                options: {
                    components: {
                        server: "{that}.server"
                    }
                },
                createOnEvent: "onMiddleware"
            }
        },
        events: {
            onMiddleware: null,
            onHandlers: null,
            onConfig: null
        },
        listeners: {
            onHandlers: "{that}.registerHandlers",
            onConfig: "{that}.onConfigHandler"
        },
        handlers: {}
    });

    gpii.server.preInit = function (that) {
        that.server = express.createServer();

        that.onConfigHandler = function (config) {
            that.config = config;
            fluid.setLogging(that.config.logging);
        };
        that.amalgamateHandlers = function (handlers) {
            fluid.merge(null, that.options.handlers, handlers);
        };
        that.registerHandlers = function () {
            fluid.each(that.options.handlers, function (handler, context) {
                that.server[handler.type](handler.route, function (req) {
                    var request = req.fluidRequest;
                    request.context = fluid.typeTag(context);
                    request.handle();
                });
            });
        };
    };

    gpii.server.finalInit = function (that) {
        that.events.onMiddleware.fire();
        that.events.onHandlers.fire();

        var port = findArgv("port") || 8080;
        fluid.log("Server is running on port: " + port);
        that.server.listen(typeof port === "string" ? parseInt(port, 10) : port);
    };

    fluid.defaults("gpii.server.configurations", {
        gradeNames: ["autoInit", "fluid.littleComponent"],
        components: {
            // Set production options.
            production: {
                type: "gpii.server.config",
                options: {
                    typeTag: "gpii.production",
                    configPath: "../config.production.json"
                }
            },
            // Set development options.
            development: {
                type: "gpii.server.config",
                options: {
                    typeTag: "gpii.development",
                    configPath: "../config.development.json"
                }
            },
            createRequest: {
                type: "gpii.server.config.createRequest"
            }
        }
    });

    fluid.defaults("gpii.server.config", {
        gradeNames: ["fluid.eventedComponent", "autoInit"],
        finalInitFunction: "gpii.server.config.finalInit",
        events: {
            configure: null,
            onConfig: {
                event: "{gpii.server}.events.onConfig"
            }
        },
        listeners: {
            configure: "{that}.configureHandler"
        },
        preInitFunction: "gpii.server.config.preInit",
        invokers: {
            configure: "gpii.server.config.configure"
        }
    });

    fluid.defaults("gpii.server.config.createRequest", {
        gradeNames: ["autoInit", "gpii.server.config"]
    });

    gpii.server.config.configure = function (server, that) {
        var env = that.nickName;
        server.configure(env, function () {
            fluid.staticEnvironment[env] = fluid.typeTag(that.options.typeTag || env);
            fluid.setLogging(that.options.logging);
            if (!that.options.configPath) {
                return;
            }
            var config =  JSON.parse(fs.readFileSync(path.join(__dirname, that.options.configPath)));
            that.events.onConfig.fire(config);
        });
    };

    gpii.server.config.configureCreateRequest = function (server, requests) {
        server.configure(function () {
            server.use(requests.create);
        });
    };

    gpii.server.config.preInit = function (that) {
        that.configureHandler = function () {
            that.configure();
        };
    };

    gpii.server.config.finalInit = function (that) {
        that.events.configure.fire();
    };

    fluid.demands("gpii.server.config.configure", "gpii.server.config.createRequest", {
        funcName: "gpii.server.config.configureCreateRequest",
        args: ["{gpii.server}.server", "{requests}"]
    });

    fluid.demands("gpii.server.config.configure", "gpii.server.config", {
        funcName: "gpii.server.config.configure",
        args: ["{gpii.server}.server", "{that}"]
    });

    fluid.demands("bodyParser", "gpii.server", {
        funcName: "gpii.middleware.bodyParser"
    });

})();