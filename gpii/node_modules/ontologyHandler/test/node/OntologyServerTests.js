/**
 * GPII Ontology Server Tests
 *
 * Copyright 2014 Raising the floor - international
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/kettle/LICENSE.txt
 */

/*global require, __dirname*/

//TODO: Test with non-existing ontology *3
//TODO: Test with non-existing user *3
//TODO: Add tests to "all-tests.js"

var fluid = require("infusion"),
    path = require("path"),
    jqUnit = fluid.require("jqUnit"),
    uuid = require("node-uuid"),
    configPath = path.resolve(__dirname, "./configs"),
    // kettle = fluid.registerNamespace("kettle"),
    gpii = fluid.registerNamespace("gpii"),
    fs = require("fs"),
    testDefs = [];

jqUnit.module("Ontology Server Module");
require("../../src/ontologyHandler");

// fluid.require("kettle/test/utils/js/KettleTestUtils", require);
fluid.registerNamespace("gpii.ontologyHandler.tests");

gpii.ontologyHandler.tests.testGETResponseMaker = function (expected) {
    return function (data) {
        var retrievedData = JSON.parse(data);
        console.log(JSON.stringify(retrievedData, null, 4));
        jqUnit.assertDeepEq("Response is correct", expected, retrievedData);
    };
};

gpii.ontologyHandler.tests.getTest = function (rawPrefs, toView, event, ontologyHandler) {
    ontologyHandler.get(rawPrefs, toView, event);
};


gpii.ontologyHandler.tests.buildGETTestDef = function (fixture) {
    return {
        name: fixture.name,
        expect: 1,
        components: {
            ontologyHandler: {
                type: "gpii.ontologyHandler"
            }
        },
        events: {
            getComplete: null
        },
        sequence: [{
            func: "{ontologyHandler}.get",
            args: [ fixture.rawPrefs, fixture.toView, "{that}.getComplete" ]
        }, {
            event: "{that}.events.getComplete",
            listenerMaker: "gpii.ontologyHandler.tests.testGETResponseMaker",
            makerArgs: [ fixture.expected ]
        }]
    };
};

var getFixtures = [
    {
        name: "GET: Basic retrieval of simple NP set in same ontology (no parameter)",
        toView: "flat",
        rawPrefs: {
            "flat": {
                "http://registry.gpii.org/common/onscreenKeyboard": [{ "value": true }],
                "http://registry.gpii.org/common/-provisional-initDelay": [{ "value": 0.120 }],
                "http://registry.gpii.org/common/cursorSpeed": [{ "value": 0.850 }],
                "http://registry.gpii.org/common/cursorAcceleration": [{ "value": 0.800 }],
                "http://registry.gpii.org/common/-provisional-mouseEmulationEnabled": [{ "value": true }],
                "http://registry.gpii.org/common/unknown": [{ "value": true }]
            }
        },
        expected: {
            "http://registry.gpii.org/common/onscreenKeyboard": [{ "value": true }],
            "http://registry.gpii.org/common/-provisional-initDelay": [{ "value": 0.120 }],
            "http://registry.gpii.org/common/cursorSpeed": [{ "value": 0.850 }],
            "http://registry.gpii.org/common/cursorAcceleration": [{ "value": 0.800 }],
            "http://registry.gpii.org/common/-provisional-mouseEmulationEnabled": [{ "value": true }],
            "http://registry.gpii.org/common/unknown": [{ "value": true }]
        }
    // }, {
    //     name: "GET: Basic retrieval of simple NP set in same ontology (with parameter)",
    //     token: "np_flatonly",
    //     url: "%token?view=flat",
    //     ontologyDir: path.resolve(__dirname, "../../../../testData/ontologies/"),
    //     expected: {
    //         "http://registry.gpii.org/common/onscreenKeyboard": [{ "value": true }],
    //         "http://registry.gpii.org/common/-provisional-initDelay": [{ "value": 0.120 }],
    //         "http://registry.gpii.org/common/cursorSpeed": [{ "value": 0.850 }],
    //         "http://registry.gpii.org/common/cursorAcceleration": [{ "value": 0.800 }],
    //         "http://registry.gpii.org/common/-provisional-mouseEmulationEnabled": [{ "value": true }],
    //         "http://registry.gpii.org/common/unknown": [{ "value": true }]
    //     }
    // }, {
    //     name: "GET: Retrieval of simple NP set in different ontology plus non-translateable preference",
    //     token: "np_flatonly",
    //     url: "%token?view=ISO24751",
    //     ontologyDir: path.resolve(__dirname, "../../../../testData/ontologies/"),
    //     expected: {
    //         "control": {
    //             "onscreenKeyboard": true,
    //             "mouseEmulation": {
    //                 "cursorSpeed": 0.85,
    //                 "cursorAcceleration": 0.8,
    //                 "-provisional-initDelay": 0.12,
    //                 "-provisional-mouseEmulationEnabled": true
    //             }
    //         }
    //     }
    // }, {
    //     name: "GET: Retrieval of mixed NP set in flat (from ISO24751, flat and bogus ontologies)",
    //     token: "np_mixed_simple",
    //     url: "%token?view=flat",
    //     ontologyDir: path.resolve(__dirname, "../../../../testData/ontologies/"),
    //     expected: {
    //         "http://registry.gpii.org/common/onscreenKeyboard": [{ "value": true }],
    //         "http://registry.gpii.org/common/-provisional-initDelay": [{ "value": 0.120 }],
    //         "http://registry.gpii.org/common/cursorSpeed": [{ "value": 0.850 }],
    //         "http://registry.gpii.org/common/cursorAcceleration": [{ "value": 0.800 }],
    //         "http://registry.gpii.org/common/-provisional-mouseEmulationEnabled": [{ "value": true }],
    //         "http://registry.gpii.org/common/flatOnly": [{ "value": true }],
    //         "http://registry.gpii.org/common/fontSize": [{ "value": 24 }]
    //     }
    // }, {
    //     name: "GET: Retrieval of mixed NP set in ISO24751 - requiring inversing provided ontology",
    //     token: "np_mixed_simple",
    //     url: "%token?view=ISO24751",
    //     ontologyDir: path.resolve(__dirname, "../../../../testData/ontologies/"),
    //     expected: {
    //           "control": {
    //             "onscreenKeyboard": true,
    //             "mouseEmulation": {
    //                 "cursorSpeed": 0.85,
    //                 "cursorAcceleration": 0.8,
    //                 "-provisional-initDelay": 0.12,
    //                 "-provisional-mouseEmulationEnabled": true
    //             }
    //         },
    //         "display": {
    //             "screenEnhancement": {
    //                 "fontSize": 24
    //             }
    //         }
    //     }
    }
];


fluid.defaults("gpii.ontologyHandler.tests.eventHolder", {
    gradeNames: ["fluid.eventedComponent", "autoInit"],
    events: {
        getComplete: null
    }

});

fluid.defaults("gpii.ontologyHandler.tests.getTests", {
    gradeNames: ["fluid.test.testEnvironment", "autoInit"],
    components: {
        ontologyHandler: {
            type: "gpii.ontologyHandler"
        },
        eventer: {
            type: "gpii.ontologyHandler.tests.eventHolder"
        },
        testHolder: {
            type: "gpii.ontologyHandler.tests.getTests.testCaseHolder"
        }
    }
});

fluid.defaults("gpii.ontologyHandler.tests.getTests.testCaseHolder", {
    gradeNames: ["fluid.test.testCaseHolder", "autoInit"],
    modules: [{
        name: "Delegating tooltip tests",
        tests: {
            name: getFixtures[0].name,
            expect: 1,
            sequence: [{
                func: "{ontologyHandler}.get",
                args: [ getFixtures[0].rawPrefs, getFixtures[0].toView, "{eventer}.events.getComplete" ]
            }, {
                event: "{eventer}.events.getComplete",
                listenerMaker: "gpii.ontologyHandler.tests.testGETResponseMaker",
                makerArgs: [ getFixtures[0].expected ]
            }
            ]
        }
    }]
});



// fluid.defaults("gpii.ontologyHandler.tests.getTests", {
//     gradeNames: ["fluid.test.testEnvironment", "autoInit"],

//     events: {
//         getComplete: null
//     },
//     components: {
//         ontologyHandler: {
//             type: "gpii.ontologyHandler",
//         },
//         testHolder: {
//             type: "gpii.ontologyHandler.tests.getTests.testCaseHolder"
//         }
//         fixtures: {
//             type: "fluid.test.testCaseHolder",
//             options: {
//                 modules: {
//                     name: "Delegating tooltip tests",
//                     tests: {
//                         name: getFixtures[0].name,
//                         expect: 1,
//                         sequence: [{
//                             func: "{ontologyHandler}.get",
//                             args: [ getFixtures[0].rawPrefs, getFixtures[0].toView, "{ontologyHandler}.events.getComplete" ]
//                         }, {
//                             event: "{ontologyHandler}.events.getComplete",
//                             listenerMaker: "gpii.ontologyHandler.tests.testGETResponseMaker",
//                             makerArgs: [ getFixtures[0].expected ]
//                         }
//                         ]
//                     }
//                 }
//             }
//         }
//     }
// });

fluid.test.runTests(["gpii.ontologyHandler.tests.getTests"]);
// gpii.ontologyHandler.tests.buildPOSTTestDef = function (fixture) {
//     return {
//         name: fixture.name,
//         expect: 2,
//         config: {
//             nodeEnv: "standardConfig",
//             configPath: configPath
//         },
//         components: {
//             postRequest: {
//                 type: "kettle.tests.request.http",
//                 options: {
//                     requestOptions: {
//                         path: "/preferences"+fixture.url,
//                         method: "POST",
//                         port: 8081
//                     }
//                 }
//             }
//         },
//         sequence: [{
//             func: "{postRequest}.send",
//             args: fixture.postBody
//         }, {
//             event: "{postRequest}.events.onComplete",
//             listenerMaker: "gpii.ontologyHandler.tests.testPOSTResponseMaker",
//             makerArgs: [ fixture.postBody ]
//         }]
//     };
// };

// var postFixtures = [
//     {
//         name: "POST: With no token specified and no ontology specified",
//         url: "",
//         postBody: {
//             "http://registry.gpii.org/common/onscreenKeyboard": [{ "value": true }],
//             "http://registry.gpii.org/common/-provisional-initDelay": [{ "value": 0.120 }],
//             "http://registry.gpii.org/common/cursorSpeed": [{ "value": 0.850 }],
//             "http://registry.gpii.org/common/cursorAcceleration": [{ "value": 0.800 }],
//             "http://registry.gpii.org/common/-provisional-mouseEmulationEnabled": [{ "value": true }],
//             "http://registry.gpii.org/common/unknown": [{ "value": true }]
//         }
//     }, {
//         name: "POST: With no token specified and and ontology specified",
//         url: "?view=flat",
//         postBody: {
//             "http://registry.gpii.org/common/onscreenKeyboard": [{ "value": true }],
//             "http://registry.gpii.org/common/-provisional-initDelay": [{ "value": 0.120 }],
//             "http://registry.gpii.org/common/cursorSpeed": [{ "value": 0.850 }],
//             "http://registry.gpii.org/common/cursorAcceleration": [{ "value": 0.800 }],
//             "http://registry.gpii.org/common/-provisional-mouseEmulationEnabled": [{ "value": true }],
//             "http://registry.gpii.org/common/unknown": [{ "value": true }]
//         }
//     }
// ];

// fluid.each(postFixtures, function (fixture) {
//     testDefs.push(gpii.ontologyHandler.tests.buildPOSTTestDef(fixture));
// });


// gpii.ontologyHandler.tests.buildPUTTestDef = function (fixture) {
//     return {
//         name: fixture.name,
//         expect: 3,
//         config: {
//             nodeEnv: "standardConfig",
//             configPath: configPath
//         },
//         listeners: {
//             onDestroy: gpii.ontologyHandler.tests.cleanUpTmpFiles
//         },
//         components: {
//             putRequest: {
//                 type: "kettle.tests.request.http",
//                 options: {
//                     requestOptions: { //TODO: change to %token
//                         path: "/preferences/" + fixture.token + (fixture.view ?
//                             "?view="+fixture.view : ""),
//                         method: "PUT",
//                         port: 8081
//                     },
//                     termMap: {
//                         token: fixture.token
//                     }
//                 }
//             }
//         },
//         sequence: [{
//             func: "gpii.ontologyHandler.tests.copyNPSet",
//             args: [ fixture.token, fixture.copyFromToken ]
//         }, {
//             func: "{putRequest}.send",
//             args: fixture.putBody
//         }, {
//             event: "{putRequest}.events.onComplete",
//             listenerMaker: "gpii.ontologyHandler.tests.testPUTResponseMaker",
//             makerArgs: [ fixture.putBody, fixture.token ]
//         }, {
//             func: "gpii.ontologyHandler.tests.checkRawPreferences",
//             args: [ fixture.token, fixture.expectedRaw ]
//         }]
//     };
// };

// gpii.ontologyHandler.tests.copyNPSet = function (toToken, fromToken) {
//     //var resolved = fluid.stringTemplate(that.options.ontologySourceList, { root: that.options.root });
//     var rawPrefs = fs.readFileSync(__dirname+"/data/"+fromToken+".json");
//     fs.writeFileSync(__dirname+"/data/"+toToken+".json", rawPrefs);
//     gpii.ontologyHandler.tests.filesToDelete.push(__dirname+"/data/"+toToken+".json");
// };

// gpii.ontologyHandler.tests.checkRawPreferences = function (token, expectedRaw) {
//     //var resolved = fluid.stringTemplate(that.options.ontologySourceList, { root: that.options.root });
//     var rawPrefs = fs.readFileSync(__dirname+"/data/"+token+".json");
//     rawPrefs = JSON.parse(rawPrefs);
//     jqUnit.assertDeepEq("Raw preferences saved to the NP set are as expected: ", expectedRaw, rawPrefs);
// };

// var putFixtures = [
//     {
//         name: "PUT: Without view specified, and in ontology matching the one of the NP set",
//         token: "put_test1",
//         copyFromToken: "np_flatonly",
//         view: undefined,
//         putBody: {
//             "http://registry.gpii.org/common/onscreenKeyboard": [{ "value": true }]
//         },
//         expectedRaw: {
//             flat: {
//                 "http://registry.gpii.org/common/onscreenKeyboard": [{ "value": true }]
//             }
//         }
//     }, {
//         name: "PUT: Containing preference transformable from existing ontology but saving in different view",
//         token: "put_test2",
//         copyFromToken: "np_tiny",
//         view: "ISO24751",
//         putBody: {
//             control: {
//                 onscreenKeyboard: false
//             }
//         },
//         expectedRaw: {
//             ISO24751: {
//                 control: {
//                     onscreenKeyboard: false
//                 }
//             }
//         }
//     }, {
//         name: "PUT: Overwriting one view and modifying another",
//         token: "put_test3",
//         copyFromToken: "np_mixed",
//         view: "flat",
//         putBody: {
//             "http://registry.gpii.org/common/fontSize": [{ "value": 18 }]
//         },
//         expectedRaw: {
//             "flat": {
//                 "http://registry.gpii.org/common/fontSize": [{ "value": 18 }]
//             },
//             "ISO24751": {
//                 "control": {
//                     "onscreenKeyboard": true
//                 }
//             },
//             "bogus": {
//                 "foo": "bar"
//             }
//         }
//     }
// ];


// fluid.each(putFixtures, function (fixture) {
//     testDefs.push(gpii.ontologyHandler.tests.buildPUTTestDef(fixture));
// });

// module.exports = kettle.tests.bootstrap(testDefs);