/*!
GPII Ontology Server GET Handler

Copyright 2014 Raising the floor - International

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

/* global require */

(function () {
    "use strict";

    var fluid = require("infusion"),
        gpii = fluid.registerNamespace("gpii"),
        $ = fluid.registerNamespace("jQuery");

    fluid.registerNamespace("gpii.ontology.get");


    fluid.defaults("kettle.requests.request.handler.ontologyGet", {
        gradeNames: ["autoInit", "fluid.littleComponent"],
        invokers: {
            handle: {
                funcName: "gpii.ontology.get.request",
                args: [ "{request}", "{ontologyHandler}", "{that}.events.onRawPreferences"],
                dynamic: true
            },
            getHandler: {
                funcName: "gpii.ontology.get.getHandler",
                args: [ "{arguments}.0", "{request}", "{requestProxy}", "{ontologyHandler}.ontologySource", "{ontologyHandler}" ]
            }
        },
        events: {
            onRawPreferences: null
        },
        listeners: {
            onRawPreferences: "{that}.getHandler"
        }
    });

    gpii.ontology.get.request = function (request, ontologyHandler, event) {
        ontologyHandler.getRawPreferences(event, request.req.params.token);
    };

    //TODO: Handle/Test with ?view=nonexistant as well as a block in the preferences for which no transform/ontology file exist
    //TODO  Handle/test with non-existant preferences set
    //TODO KASPER avoid jquery
    gpii.ontology.get.getHandler = function (rawPrefs, request, requestProxy, ontologySource, ontologyHandler) {
        fluid.log("Raw preferences "+rawPrefs);
        //request.req.query.view contains <VALUE> from ?view=<VALUE>
        //grab the desired view (ontology) value from parameter (default to "flat")
        var toView = (request.req.query && request.req.query.view) ? request.req.query.view : "flat"; //TODO KASPER consider moving this flat default check into separate function
        var returnSet = rawPrefs[toView] || {};

        //build a set of ontology transformations that we would like to have available
        var transformSpecs = [];
        fluid.each(rawPrefs, function (preferences, fromView) {
            if (fromView === toView)
                return;

            transformSpecs.push({from: fromView, to: toView});
        });


        gpii.ontologyHandler.evaluateOntologyTransforms(transformSpecs, ontologyHandler.options.ontologies, ontologySource, function (transforms) {
            fluid.each(transforms, function (data) {
                var transformed = fluid.model.transformWithRules(rawPrefs[data.from], data.transformation);
                fluid.log("translated from " + data.from + " to " + data.to + ", result: "+JSON.stringify(transformed, 2, null));
                $.extend(returnSet, transformed);
            });
            requestProxy.events.onSuccess.fire(returnSet);
        });
    };
})();