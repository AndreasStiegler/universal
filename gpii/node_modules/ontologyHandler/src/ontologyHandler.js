/*!
GPII Ontology Server

Copyright 2012 OCAD University
Copyright 2014 Raising The Floor - International

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt

The ontologyHandler component is responsible for all the functionality related to ontologization,
etc., of preferences sets. It is not implmented as a kettle server and hence does _not_ expose any
URLs - this aspect is taken care of in the preferences framework component.
*/

/*global require, __dirname */

//TODO KASPER: Ensure that transformations work for app specific settings + tests
//TODO KASPER: change all the NP sets to use this new format
//TODO KASPER: Change the URLs used in the raw preferences server
//TODO KASPER: Change all the URLs used by the system to use the raw preferences server
//TODO KASPER: Ensure that all tests pass with this new setup
//TODO KASPER: Do changes and pull request for any required kettle changes
//TODO KASPER: Documentation for all functions
(function () {

    "use strict";

    var fluid = require("infusion"),
        path = require("path"),
        gpii = fluid.registerNamespace("gpii"),
        when = fluid.require("when", require),
        $ = fluid.registerNamespace("jQuery"),
        callbacks = fluid.require("when/callbacks", require),
        fs = require("fs");

    fluid.require("kettle", require);

    fluid.defaults("gpii.ontologyHandler", {
        gradeNames: ["fluid.littleComponent", "autoInit"],
        invokers: {
            prefsToOntology: {
                funcName: "gpii.ontologyHandler.prefsToOntology",
                args: [ "{that}", "{arguments}.0", "{arguments}.1", "{arguments}.2" ]
            },
            rawPrefsToOntology: {
                funcName: "gpii.ontologyHandler.rawPrefsToOntology",
                args: [ "{that}", "{arguments}.0", "{arguments}.1" ]
            }
        },
        ontologySourceListDir: "%root/../../../testData/ontologies", //directory with ontologies
        ontologyTransformSpecs: "", //will hold the actual ontology transformation definitions after read
        // components: {
        //     ontologySource: {
        //         type: "kettle.dataSource.URL",
        //         options: {
        //             //gradeNames: ["kettle.dataSource.simpleCallbackWrapper"],
        //             //gradeNames: ["kettle.dataSource.promiseCallbackWrapper"],

        //             url: "{gpii.ontologyHandler}.options.ontologySourceUrl",
        //             termMap: {
        //                 // token: "%token"
        //                 name: "%name",
        //                 root: __dirname
        //             },
        //             writable: true
        //         }
        //     }
        // },
        root: path.join(__dirname, "..")
    });

    gpii.ontologyHandler.finalInit = function (that) {
        //Read the list of available ontologyTransformations
        var ontologyDir = fluid.stringTemplate(that.options.ontologySourceListDir, { root: that.options.root });
        var ontologyTransformsList = fs.readdirSync(ontologyDir);
        //Load all the ontologies:
        gpii.ontologyHandler.loadOntologyTranformSpecs(that, ontologyDir, ontologyTransformsList);

    };

    /*
     * Reads the files (or URLs) that contains the ontology transformation specs and stores it in
     * the ontologyTransformSpecs propery of the gpii.ontologyHandler object
     *
     * @that (Object) - the gpii.ontologyHandler object. Should at minimum contain ontologySourceURL
     *     and ontologyTransformSpecs properties
     * @ontologyTransformList (Array) - A list of available ontology transformations
     */
    gpii.ontologyHandler.loadOntologyTranformSpecs = function (that, ontologyDir, ontologyTransformsList) {
        var promises = [];
        var promise;
        var transformSpecs = {};
        fluid.each(ontologyTransformsList, function (filename) {
            //read file content
            var transformSpec = fs.readFileSync(ontologyDir + "/" + filename);

            //remove ".json" part of filename to use as key
            filename = filename.substring(0, filename.length-5);
            transformSpecs[filename] = JSON.parse(transformSpec);
        });
        that.options.ontologyTransformSpecs = transformSpecs;
        //TODO REMOVE: console.log(JSON.stringify(transformSpecs, null, 2));
    };


    /*
     * Function to take a raw preferences set and transform it into a desired ontology (incl. doing
     * the required transformations for each of the ). This function does not have any side-effects
     *
     * @that (Object) - A gpii.ontologyHandler object
     * @rawPrefs (Object) - the raw preferences as can be found on the raw preferences server - NOT
     *     expected keyed by 'preferences'
     * @toView (String) - the ontology for which to translate the raw NP set to
     *
     * @return Preferences in the ontology given in 'toView' parameter. This includes the preferences
     *     resulting from transforming all compatible preferences from different ontologies
     */
    gpii.ontologyHandler.rawPrefsToOntology = function (that, rawPrefs, toView) {
        var togo = {};
        //from each ontology in the raw prefs, check if we can transform into desired ontology,
        //do so if possible and merge with prefs set.
        fluid.each(rawPrefs, function (fromPrefs, fromView) {
            if (fromView === toView) {
                $.extend(togo, fromPrefs, true);
                return;
            }
            var transformSpec = gpii.ontologyHandler.getTransformSpec(
                    that.options.ontologyTransformSpecs, fromView, toView);
            if (transformSpec !== undefined) {
                var transformed = fluid.model.transformWithRules(fromPrefs, transformSpec);
                fluid.log("translated from " + fromPrefs + " to " + transformed + ", result: "
                    + JSON.stringify(transformed, 2, null));
                $.extend(togo, transformed, true);
            }
        });
        return togo;
    };

    /*
     * If the desired transformation spec from the requested ontology to the requested ontology
     * can be produced, return it. Else return undefined.
     *
     * @transformSpecs - Object with all the available transformationSpecs. It should be keyed by:
     *     "<from>-<to>" values (where <from> and <to> are replaced by the keys of ontologies) and
     *     value should be the actual transformationSpec
     * @from - the key of the ontology to transform from
     * @to - the key of the ontology to transform to
     *
     * @return - Transformation spec for translating the from ontology defined by param 'from' to 
     *     ontology defined by param 'from'
     */
    gpii.ontologyHandler.getTransformSpec = function (transformSpecs, from, to) {
        var fromTo = from + "-" + to;
        if (transformSpecs[fromTo] !== undefined) {
            return transformSpecs[fromTo];
        }

        var toFrom = to + "-" + from;
        return (transformSpecs[toFrom] === undefined) ? undefined :
            fluid.model.transform.invertConfiguration(transformSpecs[toFrom]);
    };

    /*
     * Takes a set of preferences in some ontology X and transforms they into some ontology Y. Note
     * that the preferences given should NOT be keyed by an ontology ID.
     *
     * @prefs (Object) - The preferences set to be translated into a different ontology. The NP set 
     *     passed should be in the ontology specified by the 'fromView' parameter and NOT keyed by
     *     an ontology ID.
     * @fromView (String) - the ontology in which the NP set given in the 'prefs' parameter is formatted
     * @toView (String) - the ontology to which the NP set should be transformed.
     *
     * @return - the NP transformed into the ontology requested via the 'toView' parameter. If no
     *     valid transformation to that ontology was found, an empty NP set is returned
     */
    gpii.ontologyHandler.prefsToOntology = function (that, prefs, fromView, toView) {
        if (fromView === toView) {
            return prefs;
        }
         var transformSpec = gpii.ontologyHandler.getTransformSpec(
                    that.options.ontologyTransformSpecs, fromView, toView);
        if (transformSpec === undefined) {
            return {};
        }
        
        var transformed = fluid.model.transformWithRules(prefs, transformSpec);
        fluid.log("translated from " + prefs + " to " + transformed + ", result: "
            + JSON.stringify(transformed, 2, null));
        return transformed;
    }

})();