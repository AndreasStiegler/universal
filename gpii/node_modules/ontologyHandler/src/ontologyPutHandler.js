/*!
GPII Ontology Server PUT Handler

Copyright 2014 Raising the floor - International

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

/* global require */
//TODO KASPER: make sure that it works with putting to a non-existing NP set
(function () {
    "use strict";

    var fluid = require("infusion"),
        gpii = fluid.registerNamespace("gpii");

    fluid.registerNamespace("gpii.ontology.put");

    fluid.defaults("kettle.requests.request.handler.ontologyPut", {
        gradeNames: ["autoInit", "fluid.littleComponent"],
        invokers: {
            handle: {
                funcName: "gpii.ontology.put.request",
                args: [ "{request}", "{ontologyHandler}", "{that}.events.onGetRawPreferences"],
                dynamic: true
            },
            onGetRawPreferences: {
                funcName: "gpii.ontology.put.onGetRawPreferences",
                args: [ "{arguments}.0", "{request}", "{ontologyHandler}.ontologySource",
                    "{ontologyHandler}", "{that}.events.onPutRawPreferences" ]
            },
            onPutRawPreferences: {
                funcName: "gpii.ontology.put.onPutRawPreferences",
                args: [ "{arguments}.0", "{request}", "{requestProxy}" ]
            }
        },
        events: {
            onGetRawPreferences: null,
            onPutRawPreferences: null
        },
        listeners: {
            onGetRawPreferences: "{that}.onGetRawPreferences",
            onPutRawPreferences: "{that}.onPutRawPreferences"
        }
    });

    gpii.ontology.put.request = function (request, ontologyHandler, event) {
        ontologyHandler.getRawPreferences(event, request.req.params.token);
    };

    gpii.ontology.put.onGetRawPreferences = function (rawPrefs, request, ontologySource, ontologyHandler, event) {
        var token = request.req.params.token;
        var togo = fluid.copy(rawPrefs);
        var put = {
            format: (request.req.query && request.req.query.view) ? request.req.query.view : "flat",
            preferences: request.req.body
        };

        //each consumer is responsible for sending _ALL_ relevant preferences in an ontology, so
        //we can safely replace
        togo[put.format] = put.preferences;

        //build a set of ontology transformations that we would like to have available
        var transformSpecs = [];
        fluid.each(rawPrefs, function (preferences, view) {
            if (view === put.format)
                return;

            transformSpecs.push({from: put.format, to: view});
        });


        //if any of the preferences that are being put are present in another ontology, that entry
        //should be removed from the other ontology, to avoid duplication of the same term in
        //different ontologies.
        gpii.ontologyHandler.evaluateOntologyTransforms(transformSpecs, ontologyHandler.options.ontologies, ontologySource, function (transforms) {
            /*
                TODO KASPER: What are we gonna do about a user who wants to reset a setting, eg:
                User has the following raw prefs set: { ontA: { fontSize: 14 } }
                User loads the prefs set in ontB view: { ontB: { fontSize: Big }}
                the user now uses a preferences editor to set the fontSize setting to default. As
                a result the payload sent as PUT is : {}, specified as being in ontB.

                The desired result is to have the users NP set be: { ontA: {}}, but this wont happen
                unless we force all consumers to send both the original and the new preference set OR
                indicators for each 'default' setting that it has been set to default (/unset) during
                that session
            */

            fluid.each(transforms, function (data) {
                //transform put prefs into each of the existing compatible views
                var transformed = fluid.model.transformWithRules(put.preferences, data.transformation);
                //and remove the matches from the raw preferences set:
                var filteredPrefs = gpii.ontologyHandler.utils.filterPrefs(togo[data.to], transformed);
                togo[data.to] = filteredPrefs;
            });

            ontologyHandler.setRawPreferences(event, togo, token, "PUT");
        });
    };

    gpii.ontology.put.onPutRawPreferences = function (reply, request, requestProxy) {
        var ret = {
            token: reply.token,
            preferences: reply.preferences[request.req.query.view ? request.req.query.view : "flat"]
        };
        requestProxy.events.onSuccess.fire(ret);
    };
})();