/*!
  GPII Web Sockets Settings Handler

  Copyright 2014, 2015 Emergya

  Licensed under the New BSD license. You may not use this file except in
  compliance with this License.

  You may obtain a copy of the License at
  https://github.com/gpii/universal/LICENSE.txt
*/

/*global require*/

(function () {

    "use strict";

    var fluid = require("infusion"),
        gpii = fluid.registerNamespace("gpii"),
        $ = fluid.registerNamespace("jQuery");

    fluid.defaults("gpii.settingsHandlers.WebSocketsComponent", {
        gradeNames: ["fluid.modelRelayComponent", "autoInit"],
        changeApplierOptions: {
            resolverGetConfig: fluid.model.escapedGetConfig,
            resolverSetConfig: fluid.model.escapedSetConfig
        },
        clients: {},
        model: {
            settings: {}
        },
        modelListeners: {
            "settings.*": {
                funcName: "gpii.settingsHandlers.WebSocketsComponent.settingsChanged",
                args: "{change}"
            }
        },
        invokers: {
            addClient: {
                funcName: "gpii.settingsHandlers.WebSocketsComponent.addClient",
                args: ["{that}", "{arguments}.0", "{arguments}.1"]
            },
            removeClient: {
                funcName: "gpii.settingsHandlers.WebSocketsComponent.removeClient",
                args: ["{that}", "{arguments}.0"]
            },
            getSettingsForId: {
                funcName: "gpii.settingsHandlers.WebSocketsComponent.getSettingsForId",
                args: ["{that}", "{arguments}.0"]
            },
            get: {
                funcName: "gpii.settingsHandlers.WebSocketsComponent.get",
                args: ["{arguments}.0", "{that}"]
            },
            getImpl: {
                funcName: "gpii.settingsHandlers.WebSocketsComponent.getImpl",
                args: ["{arguments}.0", "{that}"]
            },
            set: {
                funcName: "gpii.settingsHandlers.WebSocketsComponent.set",
                args: ["{arguments}.0", "{that}"]
            },
            setImpl: {
                funcName: "gpii.settingsHandlers.WebSocketsComponent.setImpl",
                args: ["{arguments}.0", "{that}"]
            }
        }
    });

    ///////////////// Clients /////////////////////

    gpii.settingsHandlers.WebSocketsComponent.addClient = function (that, solutionId, client) {
        var currentValue = fluid.get(that.options.clients, [solutionId, client.id]);
        if (!currentValue) {
            fluid.set(that.options.clients, [solutionId, client.id], client);
        }
    };

    gpii.settingsHandlers.WebSocketsComponent.removeClient = function (that, client) {
        for (var solutionId in that.options.clients) {
            delete that.options.clients[solutionId][client.id];
            if ($.isEmptyObject(that.options.clients[solutionId])) {
                delete that.options.clients[solutionId];
            }
        }
    };

    ///////////////// Settings /////////////////////

    gpii.settingsHandlers.WebSocketsComponent.settingsChanged = function (/*change*/) {
        //console.log("A change in settings has been registered: " + JSON.stringify(change));
    };

    gpii.settingsHandlers.WebSocketsComponent.getSettingsForId = function (that, solutionId) {
        return fluid.get(that.model.settings, [solutionId]);
    };

    gpii.settingsHandlers.WebSocketsComponent.getImpl = function (payload, that) {
        var path = payload.options.path;
        var results = fluid.transform(payload.settings, function (value, key) {
            var currentValue = fluid.get(that.model.settings, [path, key]);
            return currentValue;
        });

        return results;
    };

    gpii.settingsHandlers.WebSocketsComponent.get = function (payload, that) {
        return gpii.settingsHandlers.invokeSettingsHandler(that.getImpl, payload);
    };

    gpii.settingsHandlers.WebSocketsComponent.setImpl = function (payload, that) {
        var path = payload.options.path;
        var results = fluid.transform(payload.settings, function (value, key) {
            var oldValue = fluid.get(that.model.settings, [path, key]);
            var type;

            if (oldValue === undefined) {
                type = "ADD";
            } else if (value === undefined) {
                type = "DELETE";
            } else {
                type = null;
            }

            that.applier.change(["settings", path, key], value, type);

            var newValue = fluid.get(that.model.settings, [path, key]);

            return {
                oldValue: oldValue,
                newValue: newValue
            };
        });

        if ($.isEmptyObject(that.model.settings[path])) {
            delete that.model.settings[path];
        }

        gpii.settingsHandlers.WebSocketsComponent.notifySettings(path, that);
        return results;
    };

    gpii.settingsHandlers.WebSocketsComponent.set = function (payload, that) {
        return gpii.settingsHandlers.invokeSettingsHandler(that.setImpl, payload);
    };

    gpii.settingsHandlers.WebSocketsComponent.notifySettings = function(id, that) {
        if (id in that.options.clients) {
            var newSettings = gpii.settingsHandlers.WebSocketsComponent.getSettingsForId(that, id);
            for (var client in that.options.clients[id]) {
                that.options.clients[id][client].emit("onBrowserSettingsChanged", newSettings);
            }
        }
    };

})();

