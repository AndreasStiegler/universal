/*!
GPII Settings Handler Utilities

Copyright 2013 OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

"use strict";

var fluid = fluid || require("infusion"),
    fs = require("fs"),
    $ = fluid.jQueryStandalone,
    settingsHandlers = fluid.registerNamespace("gpii.settingsHandlers");

settingsHandlers.readFile = function (options) {
    if (options === undefined ||
        (options.path === undefined && options.filename === undefined)) {
        fluid.fail("readFile: expected an options block defining filename and encoding");
    }
    // TODO check for and handle read errors
    var content = fs.readFileSync(options.path || options.filename,
        options.encoding || "utf-8");
    return content;
};

settingsHandlers.writeFile = function (content, options) {
    // TODO check for and handler write errors.
    fs.writeFileSync(options.path || options.filename, content,
        options.encoding || "utf-8");
};

settingsHandlers.getSettings = function (solutionEntry, currentSettings) {
    var newSettingsResponse = {};
    var userRequestedSettings = solutionEntry.settings;

    fluid.each(userRequestedSettings, function (settingVal, settingKey) {
        var value = fluid.get(currentSettings, settingKey,
            fluid.model.escapedGetConfig);
        newSettingsResponse[settingKey] = value;
    });

    return {
        settings: newSettingsResponse
    };
};

settingsHandlers.setSettings = function (solutionEntry, currentSettings) {
    var newSettingsResponse = {};
    var userRequestedSettings = solutionEntry.settings;
    var options = solutionEntry.options;

    // record differences between required and default settings
    // so that they default settings can be restored
    fluid.each(userRequestedSettings, function (settingVal, settingKey) {
        var oldValue = fluid.get(currentSettings, settingKey,
            fluid.model.escapedGetConfig);
        fluid.set(currentSettings, settingKey, settingVal,
            fluid.model.escapedSetConfig);
        newSettingsResponse[settingKey] = {
            "oldValue": oldValue,
            "newValue": settingVal
        };
    });
    return { options: options, settings: newSettingsResponse };
};

/**
 * Utility for file-based settings handler. Handle individual solution entry data. The 'modifier' function passed as
 * parameter is called to allow editing of the solutionEntry based on the
 * current settings (both passed as parameters to the modifier function)
 */
settingsHandlers.handleFileSolutionEntry = function (solutionEntry, modifier, parser, isWrite) {
    var options = solutionEntry.options;

    if (options && (options.path || options.filename)) {
        // read file
        var content = settingsHandlers.readFile(options);
        var currentSettings = parser.parse(content, options);
        // modification of the entry
        var settings = modifier(solutionEntry, currentSettings);
        if (isWrite) {
            solutionEntry.settings = currentSettings;
            var settingsData = parser.stringify(currentSettings, options);
            settingsHandlers.writeFile(settingsData, options);
            fluid.log("Settings explicitly configured in GPII profile:", settingsData);
        }
        return settings;
    }

    return solutionEntry;
};

/**
 * Function for looping through the payload sent to get/set calls. Looping
 * is done by fluid.transform calls, and at the level of each solution
 * entry.
 */
settingsHandlers.transformFilePayload = function (payload, modifier, parser, isWrite) {
    var returnObj = fluid.copy(payload);

    return fluid.transform(returnObj, function (solution) {
        return fluid.transform(solution, function(solutionEntry) {
            return settingsHandlers.handleFileSolutionEntry(solutionEntry,
                modifier, parser, isWrite);
        });
    });
};

settingsHandlers.makeFileGet = function (parser) {
    return function (payload) {
        return settingsHandlers.transformFilePayload(payload, settingsHandlers.getSettings, parser);
    };
};

settingsHandlers.makeFileSet = function (parser) {
    return function (payload) {
        return settingsHandlers.transformFilePayload(payload, settingsHandlers.setSettings, parser, true);
    };
};

/** A general utility for invoking a settings handler, given a function for handling a single setting
 * @param handler A function processing a single solution's entries
 * @param payload The full payload as supplied to the settings handler's top-level method
 **/

settingsHandlers.invokeSettingsHandler = function (handler, payload) {
    // TODO: use model transformation
    return fluid.transform(payload, function (oneSolution) {
        return fluid.transform(oneSolution, function (element) {
              // TODO: more efficient algorithm
            var directLoad = fluid.filterKeys(fluid.copy(element), ["settings", "options"]);
            var others = fluid.censorKeys(fluid.copy(element), ["settings", "options"]);
            var results = {
                settings: handler(directLoad)
            };
            return $.extend(true, results, others);
        });
    });
};
