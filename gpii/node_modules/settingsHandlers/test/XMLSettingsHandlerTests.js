/*!
XML Settings Handler Tests

Copyright 2012 Raising the Floor - International

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

/*global require, __dirname*/

(function () {
    // This loads universal.
     var fluid = require("infusion"),
         gpii = fluid.registerNamespace("gpii"),
         jqUnit = fluid.require("jqUnit"),
         fs = require("fs");

    require("testFramework");
    require("settingsHandlers");

    var XMLHandlerTester = gpii.tests.testEnvironment();

    XMLHandlerTester.asyncTest("Basic Array transformations", function () {
        setTimeout(function () { 
            var basicTest = {
                raw: {
                    a: {
                        c: [ 
                        { name: "c1", val: "vc1" },
                        { name: "c2", val: "vc2" }
                        ]
                    }
                }, 
                rules: {
                    "a.c": {
                        "expander": {
                            type: "gpii.settingsHandlers.XMLHandler.arrayToHash",
                            inputPath: "a.c",
                            options: {
                                key: "name"
                            }
                        }
                    }
                },
                expected: {                
                    a: {
                        c: {
                            c1: { val: "vc1" },
                            c2: { val: "vc2" }
                        } 
                    }
                },
                invertedRules: {
                    expander: [ 
                    {
                        type: "gpii.settingsHandlers.XMLHandler.hashToArray",
                        inputPath: "a.c",
                        outputPath: "a.c",
                        options: {
                            key: "name"
                        }
                    }
                    ]
                }
            };

            var transformed = fluid.model.transformWithRules(basicTest.raw, basicTest.rules);
            jqUnit.assertDeepEq("Simple single array->hash transformation", basicTest.expected, transformed);
            var inverseRules = fluid.model.transform.invertConfiguration(basicTest.rules);
            jqUnit.assertDeepEq("simple single inverted rules", basicTest.invertedRules, inverseRules);
            var inverseTransformed = fluid.model.transformWithRules(basicTest.expected, basicTest.invertedRules);
            jqUnit.assertDeepEq("simple single hash->array transformation", basicTest.raw, inverseTransformed);
            jqUnit.start();
        }, 10);
    });

    XMLHandlerTester.asyncTest("More Complex Array transformations", function () {
        setTimeout(function () { 
            var complexTest = {
                raw: {
                    b: {
                        b1: "hello",
                        b2: "hello"
                    },
                    a: {
                        "dotted.key": [ 
                        { "uni.que": "u.q1", val: "vc1" },
                        { "uni.que": "u.q2", val: "vc2" }
                        ]
                    }
                }, 
                rules: {
                    "c.dotted\\.key": {
                        "expander": {
                            type: "gpii.settingsHandlers.XMLHandler.arrayToHash",
                            inputPath: "a.dotted\\.key",
                            options: {
                                key: "uni.que"
                            }
                        }
                    }
                },
                expected: {
                    b: {
                        b1: "hello",
                        b2: "hello"
                    },
                    c: {
                        "dotted.key": {
                            "u.q1": { val: "vc1" },
                            "u.q2": { val: "vc2" }
                        } 
                    }
                },
                invertedRules: {
                    expander: [ 
                    {
                        type: "gpii.settingsHandlers.XMLHandler.hashToArray",
                        inputPath: "c.dotted\\.key",
                        outputPath: "a.dotted\\.key",
                        options: {
                            key: "uni.que"
                        }
                    }
                    ]
                }
            };

            var transformed = fluid.model.transformWithRules(complexTest.raw, complexTest.rules);
            jqUnit.assertDeepEq("Simple single array->hash transformation", complexTest.expected, transformed);
            var inverseRules = fluid.model.transform.invertConfiguration(complexTest.rules);
            jqUnit.assertDeepEq("simple single inverted rules", complexTest.invertedRules, inverseRules);
            var inverseTransformed = fluid.model.transformWithRules(complexTest.expected, complexTest.invertedRules);
            jqUnit.assertDeepEq("simple single hash->array transformation", complexTest.raw, inverseTransformed);
            jqUnit.start();
        }, 10);
    });

    XMLHandlerTester.test("XMLHandler.applySettings", function () {
        //check simple json structure
        var result = gpii.settingsHandlers.XMLHandler.applySettings({ "key": "val1" }, { "key": "val2"});
        jqUnit.assertDeepEq("Simple setting", { key: { oldValue: 'val2', newValue: 'val1' } }, result);

        //complex json structure
        var json = {
            firstentry: {
                lvl2: {
                    key1: "vala",
                    key2: "valb"
                }
            },
            nextentry: {
                key3: "valc"
            }
        };
        var settings = {
            "firstentry.lvl2.key1": "newValue",
            "nextentry.key3": "otherNewValue"
        };
        var exp = {
            "firstentry.lvl2.key1": { oldValue: "vala", newValue: "newValue" },
            "nextentry.key3": { oldValue: "valc", newValue: "otherNewValue" }
        };
        result = gpii.settingsHandlers.XMLHandler.applySettings(settings, json);
        jqUnit.assertDeepEq("Multiple and nested settings", exp, result);

        //check applySettings for unset values
        json = {
            somekey: {
                somekey2: {
                    key1: "vala"
                }
            }
        };
        settings = {
            "newkey1.newkey2": "someval"
        };
        exp = { 'newkey1.newkey2': { oldValue: undefined, newValue: 'someval' }};
        result = gpii.settingsHandlers.XMLHandler.applySettings(settings, json);
        jqUnit.assertDeepEq("Non existing settings (multilevel)", exp, result);
    });

    XMLHandlerTester.test("XMLHandler.set", function () {
        var payload = {
            "com.texthelp.readwritegold": [{
                settings: {
                    "ApplicationSettings.IsEnterprise.$t": true,
                    "ApplicationSettings.SpeechInput.LanguageId.$t": 1
                },
                options: {
                    "filename": __dirname+"/data/XMLSettingsHandler/input1.xml",
                    "encoding": "utf-8",
                    "xml-tag": "<?xml version=\"1.0\" encoding=\"utf-8\"?>"
                }
            }]
        };
        var expectedResult = {
            'com.texthelp.readwritegold': [{
                settings: {
                    'ApplicationSettings.IsEnterprise.$t': { oldValue: 'false', newValue: true },
                    'ApplicationSettings.SpeechInput.LanguageId.$t': { oldValue: '0', newValue: 1 }
                },
                options: {
                    "filename": __dirname+"/data/XMLSettingsHandler/input1.xml",
                    "encoding": "utf-8",
                    "xml-tag": "<?xml version=\"1.0\" encoding=\"utf-8\"?>"
                }
            }]

        };
        //read original XML and copy to a file we can mess up:
        var origXML = fs.readFileSync(__dirname+"/data/XMLSettingsHandler/data1.xml", "utf-8");
        fs.writeFileSync(__dirname+"/data/XMLSettingsHandler/input1.xml", origXML, "utf-8");
        //test return payload
        var returnPayload = gpii.settingsHandlers.XMLHandler.set(payload);
        jqUnit.assertDeepEq("Checking return payload for simple XML file: ", expectedResult, returnPayload);
        
        //next check that the written XML file is as expected:
        var savedXML = fs.readFileSync(__dirname+"/data/XMLSettingsHandler/input1.xml", "utf-8");
        var expectedXML = fs.readFileSync(__dirname+"/data/XMLSettingsHandler/expected_output1.xml", "utf-8");
        jqUnit.assertEquals("checking XML file: ", expectedXML, savedXML);
    });
}());