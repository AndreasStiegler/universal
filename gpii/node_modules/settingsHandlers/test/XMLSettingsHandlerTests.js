/*!
XML Settings Handler Tests

Copyright 2012 Raising the Floor - International

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

/*global require, __dirname*/

(function () {
    // This loads universal.
     var fluid = require("infusion"),
         gpii = fluid.registerNamespace("gpii"),
         jqUnit = fluid.require("jqUnit"),
         fs = require("fs");

    require("testFramework");
    require("settingsHandlers");

    var XMLHandlerTester = gpii.tests.testEnvironment();

    // XMLHandlerTester.asyncTest("Basic Array transformations", function () {
    //     setTimeout(function () { 
    //         var basicTest = {
    //             raw: {
    //                 a: {
    //                     c: [ 
    //                     { name: "c1", val: "vc1" },
    //                     { name: "c2", val: "vc2" }
    //                     ]
    //                 }
    //             }, 
    //             rules: {
    //                 "a.c": {
    //                     "expander": {
    //                         type: "gpii.settingsHandlers.XMLHandler.arrayToHash",
    //                         inputPath: "a.c",
    //                         options: {
    //                             key: "name"
    //                         }
    //                     }
    //                 }
    //             },
    //             expected: {                
    //                 a: {
    //                     c: {
    //                         c1: { val: "vc1" },
    //                         c2: { val: "vc2" }
    //                     } 
    //                 }
    //             },
    //             invertedRules: {
    //                 expander: [ 
    //                 {
    //                     type: "gpii.settingsHandlers.XMLHandler.arrayToHash.inverse",
    //                     inputPath: "a.c",
    //                     outputPath: "a.c",
    //                     options: {
    //                         key: "name"
    //                     }
    //                 }
    //                 ]
    //             }
    //         };

    //         var transformed = fluid.model.transformWithRules(basicTest.raw, basicTest.rules);
    //         jqUnit.assertDeepEq("Simple single array->hash transformation", basicTest.expected, transformed);
    //         var inverseRules = fluid.model.transform.invertConfiguration(basicTest.rules);
    //         jqUnit.assertDeepEq("simple single inverted rules", basicTest.invertedRules, inverseRules);
    //         var inverseTransformed = fluid.model.transformWithRules(basicTest.expected, basicTest.invertedRules);
    //         jqUnit.assertDeepEq("simple single hash->array transformation", basicTest.raw, inverseTransformed);
    //         jqUnit.start();
    //     }, 10);
    // });

    // XMLHandlerTester.asyncTest("More Complex Array transformations", function () {
    //     setTimeout(function () { 
    //         var complexTest = {
    //             raw: {
    //                 b: {
    //                     b1: "hello",
    //                     b2: "hello"
    //                 },
    //                 a: {
    //                     "dotted.key": [ 
    //                     { "uni.que": "u.q1", val: { first: "vc1.1", second: "vc1.2" }},
    //                     { "uni.que": "u.q2", val: { first: "vc2.1", second: "vc2.2" }}
    //                     ]
    //                 }
    //             }, 
    //             rules: {
    //                 b: "b",
    //                 "c.dotted\\.key": {
    //                     "expander": {
    //                         type: "gpii.settingsHandlers.XMLHandler.arrayToHash",
    //                         inputPath: "a.dotted\\.key",
    //                         options: {
    //                             key: "uni.que"
    //                         }
    //                     }
    //                 }
    //             },
    //             expected: {
    //                 b: {
    //                     b1: "hello",
    //                     b2: "hello"
    //                 },
    //                 c: {
    //                     "dotted.key": {
    //                         "u.q1": { val: { first: "vc1.1", second: "vc1.2" } },
    //                         "u.q2": { val: { first: "vc2.1", second: "vc2.2" } }
    //                     } 
    //                 }
    //             },
    //             invertedRules: {
    //                 expander: [ 
    //                 { 
    //                     type: 'fluid.model.transform.value',
    //                     inputPath: 'b',
    //                     outputPath: 'b' 
    //                 },{
    //                     type: "gpii.settingsHandlers.XMLHandler.arrayToHash.inverse",
    //                     inputPath: "c.dotted\\.key",
    //                     outputPath: "a.dotted\\.key",
    //                     options: {
    //                         key: "uni.que"
    //                     }
    //                 }
    //                 ]
    //             }
    //         };

    //         var transformed = fluid.model.transformWithRules(complexTest.raw, complexTest.rules);
    //         jqUnit.assertDeepEq("Simple single array->hash transformation", complexTest.expected, transformed);
    //         var inverseRules = fluid.model.transform.invertConfiguration(complexTest.rules);
    //         jqUnit.assertDeepEq("simple single inverted rules", complexTest.invertedRules, inverseRules);
    //         var inverseTransformed = fluid.model.transformWithRules(complexTest.expected, complexTest.invertedRules);
    //         jqUnit.assertDeepEq("simple single hash->array transformation", complexTest.raw, inverseTransformed);
    //         jqUnit.start();
    //     }, 10);
    // });

    // XMLHandlerTester.asyncTest("Nested Array transformations", function () {
    //     setTimeout(function () { 
    //         var nestedTest = {
    //             raw: {
    //                 outer: [
    //                 { 
    //                     outerpivot: "outerkey1",
    //                     outervar:  [
    //                     {
    //                         innerpivot: "innerkey1.1",
    //                         innervar: "innerval1.1.1",
    //                         innervarx: "innerval1.1.2"
    //                     },
    //                     {
    //                         innerpivot: "innerkey1.2",
    //                         innervar: "innerval1.2.1"
    //                     }]
    //                 }, {
    //                     outerpivot: "outerkey2",
    //                     outervar: [
    //                     {
    //                         innerpivot: "innerkey2.1",
    //                         innervar: "innerval2.1.1",
    //                         innervarx: "innerval2.1.2"
    //                     },
    //                     {
    //                         innerpivot: "innerkey2.2",
    //                         innervar: "innerval2.2.1"
    //                     }]
    //                 }
    //                 ]
    //             }, 
    //             rules: {
    //                 "outer": {
    //                     "expander": {
    //                         type: "gpii.settingsHandlers.XMLHandler.arrayToHash",
    //                         inputPath: "outer",
    //                         options: {
    //                             key: "outerpivot",
    //                             innerValue: [
    //                             {
    //                                 "outervar": {
    //                                     "expander": {
    //                                         type: "gpii.settingsHandlers.XMLHandler.arrayToHash",
    //                                         inputPath: "outervar",
    //                                         options: {
    //                                             key: "innerpivot"
    //                                         }
    //                                     }
    //                                 }
    //                             }
    //                             ]
    //                         }
    //                     }
    //                 }
    //             },
    //             expected: {
    //                 "outer": {
    //                     "outerkey1": {
    //                         "outervar": {
    //                             "innerkey1.1": {
    //                                 "innervar": "innerval1.1.1",
    //                                 "innervarx": "innerval1.1.2"
    //                             },
    //                             "innerkey1.2": {
    //                                 "innervar": "innerval1.2.1"
    //                             }
    //                         }
    //                     },
    //                     "outerkey2": {
    //                         "outervar": {
    //                             "innerkey2.1": {
    //                                 "innervar": "innerval2.1.1",
    //                                 "innervarx": "innerval2.1.2"
    //                             },
    //                             "innerkey2.2": {
    //                                 "innervar": "innerval2.2.1"
    //                             }
    //                         }
    //                     }
    //                 }
    //             },
    //             invertedRules: {
    //                 "expander": [{
    //                     type: "gpii.settingsHandlers.XMLHandler.arrayToHash.inverse",
    //                     inputPath: "outer",
    //                     outputPath: "outer",
    //                     options: {
    //                         key: "outerpivot",
    //                         innerValue: [{
    //                             expander: [{
    //                                 type: "gpii.settingsHandlers.XMLHandler.arrayToHash.inverse",
    //                                 inputPath: "outervar",
    //                                 outputPath: "outervar",
    //                                 options: {
    //                                     key: "innerpivot"
    //                                 }
    //                             }]
    //                         }]
    //                     }
    //                 }]
    //             }
    //         };

    //         var transformed = fluid.model.transformWithRules(nestedTest.raw, nestedTest.rules);
    //         jqUnit.assertDeepEq("Nested array->hash transformation", nestedTest.expected, transformed);
    //         var inverseRules = fluid.model.transform.invertConfiguration(nestedTest.rules);
    //         jqUnit.assertDeepEq("Nested inverted rules", nestedTest.invertedRules, inverseRules);
    //         var inverseTransformed = fluid.model.transformWithRules(nestedTest.expected, nestedTest.invertedRules);
    //         jqUnit.assertDeepEq("Nested hash->array transformation", nestedTest.raw, inverseTransformed);
    //         jqUnit.start();
    //     }, 10);
    // });

    // XMLHandlerTester.asyncTest("Multiple Nested Array transformations", function () {
    //     setTimeout(function () { 
    //         var nestedTest = {
    //             raw: {
    //                 outer: [
    //                 { 
    //                     outerpivot: "outerkey1",
    //                     outervar:  {
    //                         arr1: [
    //                         {
    //                             innerpivot1: "arr1.1",
    //                             innervar: "arr1.1.1",
    //                         },
    //                         {
    //                             innerpivot1: "arr1.2",
    //                             innervar: "arr1.2.1"
    //                         }],
    //                         arr2: [
    //                         {
    //                             innerpivot2: "arr2.1",
    //                             innervar: "arr2.1.1",
    //                         },
    //                         {
    //                             innerpivot2: "arr2.2",
    //                             innervar: "arr2.2.1"
    //                         }]
    //                     }
    //                 }
    //                 ]
    //             }, 
    //             rules: {
    //                 "outer": {
    //                     "expander": {
    //                         type: "gpii.settingsHandlers.XMLHandler.arrayToHash",
    //                         inputPath: "outer",
    //                         options: {
    //                             key: "outerpivot",
    //                             innerValue: [
    //                             {
    //                                 "outervar.arr1": {
    //                                     "expander": {
    //                                         type: "gpii.settingsHandlers.XMLHandler.arrayToHash",
    //                                         inputPath: "outervar.arr1",
    //                                         options: {
    //                                             key: "innerpivot1"
    //                                         }
    //                                     }
    //                                 }
    //                             }, 
    //                             {
    //                                 "outervar.arr2": {
    //                                     "expander": {
    //                                         type: "gpii.settingsHandlers.XMLHandler.arrayToHash",
    //                                         inputPath: "outervar.arr2",
    //                                         options: {
    //                                             key: "innerpivot2"
    //                                         }
    //                                     }
    //                                 }
    //                             }
    //                             ]
    //                         }
    //                     }
    //                 }
    //             },
    //             expected: {
    //                 "outer": {
    //                     "outerkey1": {
    //                         "outervar": {
    //                             "arr1": {
    //                                 "arr1.1": { "innervar": "arr1.1.1" },
    //                                 "arr1.2": { "innervar": "arr1.2.1" },
    //                             },
    //                             "arr2": {
    //                                 "arr2.1": { "innervar": "arr2.1.1" },
    //                                 "arr2.2": { "innervar": "arr2.2.1" },
    //                             }
    //                         }
    //                     }
    //                 }
    //             },
    //             invertedRules: {
    //                 "expander": [{
    //                     type: "gpii.settingsHandlers.XMLHandler.arrayToHash.inverse",
    //                     inputPath: "outer",
    //                     outputPath: "outer",
    //                     options: {
    //                         key: "outerpivot",
    //                         innerValue: [{
    //                             expander: [{
    //                                 type: "gpii.settingsHandlers.XMLHandler.arrayToHash.inverse",
    //                                 inputPath: "outervar.arr1",
    //                                 outputPath: "outervar.arr1",
    //                                 options: {
    //                                     key: "innerpivot1"
    //                                 }
    //                             }]
    //                         }, {
    //                             expander: [{
    //                                 type: "gpii.settingsHandlers.XMLHandler.arrayToHash.inverse",
    //                                 inputPath: "outervar.arr2",
    //                                 outputPath: "outervar.arr2",
    //                                 options: {
    //                                     key: "innerpivot2"
    //                                 }
    //                             }]
    //                         }]
    //                     }
    //                 }]
    //             }
    //         };

    //         var transformed = fluid.model.transformWithRules(nestedTest.raw, nestedTest.rules);
    //         jqUnit.assertDeepEq("Multiply Nested array->hash transformation", nestedTest.expected, transformed);
    //         var inverseRules = fluid.model.transform.invertConfiguration(nestedTest.rules);
    //         jqUnit.assertDeepEq("Multiply Nested inverted rules", nestedTest.invertedRules, inverseRules);
    //         var inverseTransformed = fluid.model.transformWithRules(nestedTest.expected, nestedTest.invertedRules);
    //         jqUnit.assertDeepEq("Multiply Nested hash->array transformation", nestedTest.raw, inverseTransformed);
    //         jqUnit.start();
    //     }, 10);
    // });

    XMLHandlerTester.asyncTest("XMLHandler.applySettings", function () {
        setTimeout(function() {
    //     //check simple json structure
    //     var result = gpii.settingsHandlers.XMLHandler.applySettings({ "key": "val1" }, { "key": "val2"});
    //     jqUnit.assertDeepEq("Simple setting", { key: { oldValue: 'val2', newValue: 'val1' } }, result);

    //     //complex json structure
    //     var json = {
    //         firstentry: {
    //             lvl2: {
    //                 key1: "vala",
    //                 key2: "valb"
    //             }
    //         },
    //         nextentry: {
    //             key3: "valc"
    //         }
    //     };
    //     var settings = {
    //         "firstentry.lvl2.key1": "newValue",
    //         "nextentry.key3": "otherNewValue"
    //     };
    //     var exp = {
    //         "firstentry.lvl2.key1": { oldValue: "vala", newValue: "newValue" },
    //         "nextentry.key3": { oldValue: "valc", newValue: "otherNewValue" }
    //     };
    //     result = gpii.settingsHandlers.XMLHandler.applySettings(settings, json);
    //     jqUnit.assertDeepEq("Multiple and nested settings", exp, result);

    //     //check applySettings for unset values
    //     json = {
    //         somekey: {
    //             somekey2: {
    //                 key1: "vala"
    //             }
    //         }
    //     };
    //     settings = {
    //         "newkey1.newkey2": "someval"
    //     };
    //     exp = { 'newkey1.newkey2': { oldValue: undefined, newValue: 'someval' }};
    //     result = gpii.settingsHandlers.XMLHandler.applySettings(settings, json);
    //     jqUnit.assertDeepEq("Non existing settings (multilevel)", exp, result);
    // });

    // XMLHandlerTester.test("XMLHandler.set", function () {
    //     var payload = {
    //         "com.texthelp.readwritegold": [{
    //             settings: {
    //                 "ApplicationSettings.IsEnterprise.$t": true,
    //                 "ApplicationSettings.SpeechInput.LanguageId.$t": 1
    //             },
    //             options: {
    //                 "filename": __dirname+"/data/XMLSettingsHandler/input1.xml",
    //                 "encoding": "utf-8",
    //                 "xml-tag": "<?xml version=\"1.0\" encoding=\"utf-8\"?>"
    //             }
    //         }]
    //     };
    //     var expectedResult = {
    //         'com.texthelp.readwritegold': [{
    //             settings: {
    //                 'ApplicationSettings.IsEnterprise.$t': { oldValue: 'false', newValue: true },
    //                 'ApplicationSettings.SpeechInput.LanguageId.$t': { oldValue: '0', newValue: 1 }
    //             },
    //             options: {
    //                 "filename": __dirname+"/data/XMLSettingsHandler/input1.xml",
    //                 "encoding": "utf-8",
    //                 "xml-tag": "<?xml version=\"1.0\" encoding=\"utf-8\"?>"
    //             }
    //         }]

    //     };
    //     //read original XML and copy to a file we can mess up:
    //     var origXML = fs.readFileSync(__dirname+"/data/XMLSettingsHandler/data1.xml", "utf-8");
    //     fs.writeFileSync(__dirname+"/data/XMLSettingsHandler/input1.xml", origXML, "utf-8");
    //     //test return payload
    //     var returnPayload = gpii.settingsHandlers.XMLHandler.set(payload);
    //     jqUnit.assertDeepEq("Checking return payload for simple XML file: ", expectedResult, returnPayload);
        
    //     //next check that the written XML file is as expected:
    //     var savedXML = fs.readFileSync(__dirname+"/data/XMLSettingsHandler/input1.xml", "utf-8");
    //     var expectedXML = fs.readFileSync(__dirname+"/data/XMLSettingsHandler/expected_output1.xml", "utf-8");
    //     jqUnit.assertEquals("checking XML file: ", expectedXML, savedXML);

        //Set with transformations:
        var payload2 = {
            "setreq": [{
                settings: {
                    "testing.hello.$t": "space",
                    "testing.hello\\.to.$t": "another space",
                    //TODO: "testing.new-variable.here": "KAPAW",
                    "testing.with-params.foo": "oof",
                    "testing.double.hello2.iam": "bond, james bond",
                    "testing.double.hello2.and.$t": "bond, james bond, jr",
                    "testing.simpleArray.settings.ind2.$t":"hello other indexed space",
                    "testing.Sociable\\.Launcher\\.Properties\\.Settings.setting.AutoLogin.serializeAs": "New Value",
                    "testing.Sociable\\.Launcher\\.Properties\\.Settings.setting.AutoLogin.value.$t": "10000"
                },
                options: {
                    "filename": __dirname+"/data/XMLSettingsHandler/tmp1.xml",
                    "encoding": "utf-8",
                    "xml-tag": "<?xml version=\"1.0\" encoding=\"utf-8\"?>",
                    "rules": {
                        "testing.simpleArray.settings": {
                            "expander": {
                                type: "gpii.settingsHandlers.XMLHandler.arrayToHash",
                                inputPath: "testing.simpleArray.settings",
                                options: {
                                    key: "unique",
                                }
                            }
                        },
                        "testing.Sociable\\.Launcher\\.Properties\\.Settings.setting": {
                            "expander": {
                                type: "gpii.settingsHandlers.XMLHandler.arrayToHash",
                                inputPath: "testing.Sociable\\.Launcher\\.Properties\\.Settings.setting",
                                options: {
                                    key: "name",
                                }
                            }
                        },
                        "testing": "testing"
                    }
                }
            }]
        };
        var expected2 = {
            "setreq": [                {
                settings: {
                    "testing.hello.$t": { oldValue: "world", newValue: "space" },
                    "testing.hello\\.to.$t": { oldValue: "another world", newValue: "another space" },
                    //TODO: "testing.new-variable.here": { oldValue: undefined, newValue: "KAPAW" },
                    "testing.with-params.foo": { oldValue: "bar", newValue: "oof" },
                    "testing.double.hello2.iam": { oldValue: "alsohere", newValue: "bond, james bond" },
                    "testing.double.hello2.and.$t": { oldValue: "me as well", newValue: "bond, james bond, jr" },
                    "testing.simpleArray.settings.ind2.$t": { oldValue: "hello other indexed world", newValue: "hello other indexed space" },
                    "testing.Sociable\\.Launcher\\.Properties\\.Settings.setting.AutoLogin.serializeAs": { oldValue: "String", newValue: "New Value" },
                    "testing.Sociable\\.Launcher\\.Properties\\.Settings.setting.AutoLogin.value.$t": { oldValue: "0", newValue: "10000" }
                },
                options: payload2.setreq[0].options
            }]
        };
        //read original XML and copy to a file we can mess up:
        var origXML = fs.readFileSync(__dirname+"/data/XMLSettingsHandler/test1.xml", "utf-8");
        fs.writeFileSync(__dirname+"/data/XMLSettingsHandler/tmp1.xml", origXML, "utf-8");
        //test return payload
        var returnPayload2 = gpii.settingsHandlers.XMLHandler.set(payload2);
        jqUnit.assertDeepEq("Checking return payload for simple XML file: ", expected2, returnPayload2);
        
        //next check that the written XML file is as expected:
        var savedXML2 = fs.readFileSync(__dirname+"/data/XMLSettingsHandler/tmp1.xml", "utf-8");
        var expectedXML2 = fs.readFileSync(__dirname+"/data/XMLSettingsHandler/expected_output1.xml", "utf-8");
        jqUnit.assertEquals("checking XML file: ", expectedXML2, savedXML2);
        jqUnit.start();
    }, 10);
    });
}());