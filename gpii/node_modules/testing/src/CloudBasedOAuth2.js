/*!
GPII Cloud-based Flow Manager with OAuth2 Test Infrastructure

Copyright 2012 OCAD University
Copyright 2012 Antranig Basman
Copyright 2013 Raising the Floor
Copyright 2014 Lucendo Development Ltd.

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

"use strict";

var fluid = require("infusion"),
    querystring = require("querystring"),
    gpii = fluid.registerNamespace("gpii"),
    $ = fluid.registerNamespace("jQuery"),
    jqUnit = fluid.registerNamespace("jqUnit"),
    kettle = fluid.registerNamespace("kettle");

fluid.registerNamespace("gpii.test.cloudBased.oauth2");

fluid.defaults("gpii.test.cloudBased.oauth2.testCaseHolder", {
    gradeNames: ["kettle.test.testCaseHolder", "autoInit"],
    distributeOptions: {
        record: "gpii.oauth2.dataStore.acceptanceData",
        target: "{that gpii.oauth2.dataStore}.options.gradeNames"
    },
    members: {
        encodedLogin: {
            expander: {
                func: "gpii.test.cloudBased.oauth2.encodeLogin",
                args: ["{testCaseHolder}.options.username", "{testCaseHolder}.options.password"]
            }
        },
        encodedDecision: {
            expander: {
                func: "gpii.test.cloudBased.oauth2.encodeDecision"
            }
        }
    },
    components: {
        authorizeRequest: {
            type: "kettle.test.request.httpCookie",
            options: {
                path: "/authorize?response_type=code&client_id=%client_id&redirect_uri=%redirect_uri&state=%state",
                port: 8081,
                termMap: {
                    client_id: "{testCaseHolder}.options.client_id",
                    redirect_uri: "{testCaseHolder}.options.redirect_uri",
                    state: "{testCaseHolder}.options.state"
                }
            }
        },
        loginRequest: {
            type: "kettle.test.request.httpCookie",
            options: {
                headers: {
                    "Content-Type": "application/x-www-form-urlencoded"
                },
                path: "/login",
                port: 8081,
                method: "POST"
            }
        },
        authorizeRequest2: {
            type: "kettle.test.request.httpCookie",
            options: {
                path: "/authorize?response_type=code&client_id=%client_id&redirect_uri=%redirect_uri&state=%state",
                port: 8081,
                termMap: {
                    client_id: "{testCaseHolder}.options.client_id",
                    redirect_uri: "{testCaseHolder}.options.redirect_uri",
                    state: "{testCaseHolder}.options.state"
                }
            }
        },
        decisionRequest: {
            type: "kettle.test.request.httpCookie",
            options: {
                path: "/authorize_decision",
                port: 8081,
                method: "POST"
            }
        }
    }
});

gpii.test.cloudBased.oauth2.encodeLogin = function (username, password) {
    return querystring.stringify({username: username, password:password});
};

gpii.test.cloudBased.oauth2.encodeDecision = function () {
    // TODO: find correct form contents here
    return querystring.stringify({});
};


gpii.test.cloudBased.oauth2.verifyLoginRedirect = function (request, cookieJar) {
	var response = request.nativeResponse;
	jqUnit.assertEquals("Should have received a 302 redirect (as per passport impl)", 302, response.statusCode);
	jqUnit.assertEquals("Should have been redirected to /login", "/login", response.headers.location);
    jqUnit.assertValue("Should have stored a cookie received from server", cookieJar.cookie);
};

gpii.test.cloudBased.oauth2.verifyAuthorizeRedirect = function (loginRequest, authorizeRequest) {
    var response = loginRequest.nativeResponse;
    jqUnit.assertEquals("Should have received a 302 redirect (as per passport impl)", 302, response.statusCode);
    var origRequest = authorizeRequest.nativeRequest;
    jqUnit.assertTrue("Should have been redirected to an /authorize URL", response.headers.location.indexOf("/authorize") === 0);
    jqUnit.assertEquals("Should have been redirected to original /authorize URL", origRequest.path, response.headers.location);
};

gpii.test.cloudBased.oauth2.sendAuthorizeRequest2 = function (authorizeRequest2, loginRequest) {
    authorizeRequest2.send({
        path: loginRequest.nativeResponse.headers.location
    });
};

gpii.test.cloudBased.oauth2.verifyAuthorizeResponse = function (authorizeRequest) {
    var response = authorizeRequest.nativeResponse;
    jqUnit.assertEquals("Should have received a 200 response", 200, response.statusCode);
    jqUnit.assertEquals("Should have received an HTML response holding logon UI", "text/html; charset=utf-8", response.headers["content-type"]);
};

gpii.test.cloudBased.oauth2.verifyDecisionResponse = function (decisionRequest) {
    // TODO: determine form of this decision
    jqUnit.assertValue("Received decision response", decisionRequest);
};

gpii.test.cloudBased.oauth2.buildTestFixture = function (testDef, commonRec, baseDir) {
	testDef = $.extend(true, testDef, commonRec);
    testDef.expect = 9;
    testDef.sequence = fluid.makeArray(testDef.sequence);
    testDef.gradeNames = fluid.makeArray(testDef.gradeNames);
    testDef.gradeNames.push("gpii.test.cloudBased.oauth2.testCaseHolder");

    testDef.sequence.unshift({
        func: "{authorizeRequest}.send"
    }, {
        event: "{authorizeRequest}.events.onComplete",
        listener: "gpii.test.cloudBased.oauth2.verifyLoginRedirect",
        args: ["{authorizeRequest}", "{cookieJar}"]
    }, {
        func: "{loginRequest}.send",
        args: "{testCaseHolder}.encodedLogin"
    }, {
        event: "{loginRequest}.events.onComplete",
        listener: "gpii.test.cloudBased.oauth2.verifyAuthorizeRedirect",
        args: ["{loginRequest}", "{authorizeRequest}"]
    }, {
        func: "gpii.test.cloudBased.oauth2.sendAuthorizeRequest2",
        args: ["{authorizeRequest2}", "{loginRequest}"]
    }, {
        event: "{authorizeRequest2}.events.onComplete",
        listener: "gpii.test.cloudBased.oauth2.verifyAuthorizeResponse",
        args: ["{authorizeRequest2}"]
    }, {
        func: "{decisionRequest}.send",
        args: "{testCaseHolder}.encodedDecision"
    }, {
        event: "{decisionRequest}.events.onComplete",
        listener: "gpii.test.cloudBased.oauth2.verifyDecisionResponse",
        args: ["{decisionRequest}"]
    });
    testDef.config = gpii.test.cloudBased.gpiiConfig(baseDir);

    return testDef;
};

gpii.test.cloudBased.oauth2.bootstrap = function (testDefs, commonRec, baseDir) {
    return kettle.test.bootstrapServer(testDefs, function (testDef) {
        return gpii.test.cloudBased.oauth2.buildTestFixture(testDef, commonRec, baseDir);
    });
};