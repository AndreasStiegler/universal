/*!
GPII Configuration Manager Tests

Copyright 2012 OCAD University
Copyright 2012 Raising The Floor - International

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

// Declare dependencies
/*global require, fluid, jqUnit, gpii, start*/

(function () {
    "use strict";

    var fluid = require("infusion");
    var gpii = fluid.registerNamespace("gpii");

    fluid.registerNamespace("gpii.tests.lifecycleManager");
    
    var standardLifecycle = {
            "start": [
                "setSettings",
                {
                "type": "gpii.tests.lifecycleManager.mockExecHandler",
                "command": "jaws.exe",
                "name": "exec",
                args: ["-settingsDirectory", "C:\\dev\\null"]
                }],
            "stop": [{
                "type": "gpii.tests.lifecycleManager.mockKillHandler",
                pid: "${{exec}.pid}"
                }, 
                "restoreSettings"]
            };

    var configurationSpec = [{
        "id": "org.gnome.desktop.a11y.magnifier",
        "settingsHandlers": [{
            "type": "gpii.tests.lifecycleManager.mockSettingsHandler",
            "settings": {
                "cross-hairs-clip": true,
                "cross-hairs-color": "red"
            },
            "options": {}
        }],
        "lifecycleManager": standardLifecycle
        }];

    var expectedSettingsStore = [{
        "id": "org.gnome.desktop.a11y.magnifier",
        "settingsHandlers": [{
            "type": "gpii.tests.lifecycleManager.mockSettingsHandler",
            "settings": {
                "cross-hairs-clip": false,
                "cross-hairs-color": "red"
            },
            "options": {}
        }],
        "lifecycleManager": standardLifecycle
    }];

    var createPayloadForSettingsHandlerRequest = {
        "type": "gpii.gsettings.set",
        "settings": {
            "cross-hairs-clip": true,
            "cross-hairs-color": "red"
        },
        "options": {}
    };

    var createPayloadForSettingsHandlerResponse = [{
        "org.gnome.desktop.a11y.magnifier": {
            "settings": {
                "cross-hairs-clip": true,
                "cross-hairs-color": "red"
            },
            "options": {}
        }
    }];

    var parseHandlerResponseFunctionRequest = [{
        "org.gnome.desktop.a11y.magnifier": {
            "settings": {
                "cross-hairs-clip": {
                    "oldValue": false,
                    "newValue": true
                },
                "cross-hairs-color": {
                    "oldValue": "red",
                    "newValue": "red",
                    statusCode: 500,
                    statusMessage: "Internal Error"
                }
            }
        }
    }];

    var parseHandlerResponseFunctionExpectedResponse = {
        "cross-hairs-clip": false,
        "cross-hairs-color": "red"
    };

    var invokeSettingsHandlersRequest = [{
        "type": "gpii.tests.lifecycleManager.mockSettingsHandler",
        "settings": {
            "cross-hairs-clip": true,
            "cross-hairs-color": "red"
        },
        "options": {}
    }];

    var invokeSettingsHandlersExpectedSnapshot = [{
        "type": "gpii.tests.lifecycleManager.mockSettingsHandler",
        "settings": {
            "cross-hairs-clip": false,
            "cross-hairs-color": "red"
        },
        "options": {}
    }];

    var invokeLaunchHandlersRequest = [standardLifecycle];

    var launchHandlerExpectedPayloadStart = {
        command: "jaws.exe",
        args: ["-settingsDirectory", "C:\\dev\\null"]
    };

    var launchHandlerExpectedPayloadStop = {
        pid: "%pid"
    };

    //This payload will be checked against in the mockLaunchHandler.
    //should be set to launchHandlerExpectedPayloadStart or
    //launchHandlerExpectedPayloadStop depending on what is being tested.
    var launchHandlerExpectedPayload = {};

    gpii.tests.lifecycleManager.mockLaunchHandler = function (data) {
        jqUnit.assertDeepEq("Expected Payload sent to the launch handler", launchHandlerExpectedPayload, data);
        var returnData = {
            termMap: {
                pid: "1234"
            }
        };
        return returnData;
    };

    var settingsHandlerExpectedInputNewSettings = [{
        "org.gnome.desktop.a11y.magnifier": {
            "settings": {
                "cross-hairs-clip": true,
                "cross-hairs-color": "red"
            },
            "options": {}
        }
    }];

    var settingsHandlerExpectedInputRestoreSettings = [{
        "org.gnome.desktop.a11y.magnifier": {
            "settings": {
                "cross-hairs-clip": false,
                "cross-hairs-color": "red"
            },
            "options": {}
        }
    }];

    //This payload will be checked against in the mockSettingsHandler.
    //should be set to settingsHandlerExpectedInputNewSettings or
    //settingsHandlerExpectedInputRestoreSettings depending on what is being tested.
    var settingsHandlerExpectedInput = {};

    gpii.tests.lifecycleManager.mockSettingsHandler = function (data) {
        jqUnit.assertDeepEq("expected input sent to settingsHandler", data, settingsHandlerExpectedInput);
        return parseHandlerResponseFunctionRequest;
    };

    gpii.tests.lifecycleManager.runTests = function () {
        var testCase = jqUnit.TestCase("Configuration Manager");

/*
        testCase.test("gpii.lifecycleManager.createPayloadForSettingsHandler()", function () {
            jqUnit.expect(1);
            var response = gpii.lifecycleManager.createPayloadForSettingsHandler("org.gnome.desktop.a11y.magnifier", createPayloadForSettingsHandlerRequest);
            jqUnit.assertDeepEq("createPayloadForSettingsHandler returning the correct payload", createPayloadForSettingsHandlerResponse, response);
        });

        testCase.test("gpii.lifecycleManager.parseHandlerResponse()", function () {
            jqUnit.expect(1);
            var response = gpii.lifecycleManager.parseHandlerResponse("org.gnome.desktop.a11y.magnifier", parseHandlerResponseFunctionRequest);
            jqUnit.assertDeepEq("parseHandlerResponse returning the correct payload", parseHandlerResponseFunctionExpectedResponse, response);
        });

        testCase.test("gpii.lifecycleManager.invokeSettingsHandlers()", function () {
            jqUnit.expect(2);
            //set the expected input of the mock settingsHandler
            settingsHandlerExpectedInput = settingsHandlerExpectedInputNewSettings;
            var invokeSettingsHandlersRequestSnapshot = fluid.copy(invokeSettingsHandlersRequest);
            gpii.lifecycleManager.invokeSettingsHandlers("org.gnome.desktop.a11y.magnifier", invokeSettingsHandlersRequest, invokeSettingsHandlersRequestSnapshot);
            jqUnit.assertDeepEq("invokeSettingsHandlers properly updated the settingsHandler block", invokeSettingsHandlersExpectedSnapshot, invokeSettingsHandlersRequestSnapshot);
        });


        testCase.test("gpii.lifecycleManager.invokeLaunchHandlers()", function () {
            jqUnit.expect(2);
            var launchHandlerSnapshot = fluid.copy(invokeLaunchHandlersRequest);

            launchHandlerExpectedPayload = launchHandlerExpectedPayloadStart;
            gpii.lifecycleManager.invokeLaunchHandlers(invokeLaunchHandlersRequest, "start", launchHandlerSnapshot);

            launchHandlerExpectedPayload = launchHandlerExpectedPayloadStop;
            gpii.lifecycleManager.invokeLaunchHandlers(launchHandlerSnapshot, "stop", launchHandlerSnapshot);
        });
*/
        testCase.asyncTest("gpii.lifecycleManager.start() and stop()", function () {
            //2 tests for the settingsHandler (see mockSettingsHandler function above)
            //2 tests for the launchHandler (see mockLaunchHandler function above)
            //and the two asserts below
            jqUnit.expect(6);
            var lifecycleManager = gpii.lifecycleManager();
            launchHandlerExpectedPayload = launchHandlerExpectedPayloadStart;
            settingsHandlerExpectedInput = settingsHandlerExpectedInputNewSettings;
            var options = {
                userToken: 123
            };

            lifecycleManager.start(options, configurationSpec, function (success) {
                jqUnit.assertDeepEq("start: The expected data has been saved to the settings store: ", expectedSettingsStore, lifecycleManager.settingsStore);
                start();
            });

            launchHandlerExpectedPayload = launchHandlerExpectedPayloadStop;
            settingsHandlerExpectedInput = settingsHandlerExpectedInputRestoreSettings;

            lifecycleManager.stop(options, function (success) {
                jqUnit.assertDeepEq("stop: The original settings restored, stop message to launch handler, empty settings store", [], lifecycleManager.settingsStore);
                start();
            });

        });
    };
}());
